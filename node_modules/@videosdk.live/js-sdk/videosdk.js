/*! For license information please see videosdk.js.LICENSE.txt */
!(function (e, t) {
  if ("object" == typeof exports && "object" == typeof module)
    module.exports = t();
  else if ("function" == typeof define && define.amd) define([], t);
  else {
    var r = t();
    for (var n in r) ("object" == typeof exports ? exports : e)[n] = r[n];
  }
})(self, () =>
  (() => {
    var e = {
        11: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome74 = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = i(r(1765)),
            d = i(r(8046)),
            l = i(r(5544)),
            u = i(r(5938)),
            p = i(r(4256)),
            h = r(4893),
            m = r(521),
            f = r(1305),
            g = r(3303),
            v = new o.Logger("Chrome74"),
            _ = { OS: 1024, MIS: 1024 };
          class y extends m.HandlerInterface {
            static createFactory() {
              return () => new y();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome74";
            }
            close() {
              if ((v.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              v.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = a.parse(t.sdp),
                  n = l.extractRtpCapabilities({ sdpObject: r });
                return p.addNackSuppportForOpus(n), n;
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return v.debug("getNativeSctpCapabilities()"), { numStreams: _ };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              v.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : (v.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ),
                    this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (this._pc.iceConnectionState) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    ));
            }
            async updateIceServers(e) {
              this.assertNotClosed(), v.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                v.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  v.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  v.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  t.length > 1 &&
                  t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  });
              const s = c.clone(this._sendingRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, n);
              const i = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                p = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                });
              let h,
                m = await this._pc.createOffer(),
                f = a.parse(m.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f,
                }));
              let _ = !1;
              const y = (0, g.parse)((t || [{}])[0].scalabilityMode);
              t &&
                1 === t.length &&
                y.spatialLayers > 1 &&
                "video/vp9" === s.codecs[0].mimeType.toLowerCase() &&
                (v.debug("send() | enabling legacy simulcast for VP9 SVC"),
                (_ = !0),
                (f = a.parse(m.sdp)),
                (h = f.media[o.idx]),
                u.addLegacySimulcast({
                  offerMediaObject: h,
                  numStreams: y.spatialLayers,
                }),
                (m = { type: "offer", sdp: a.write(f) })),
                v.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m
                ),
                await this._pc.setLocalDescription(m);
              const b = p.mid;
              if (
                ((s.mid = b),
                (f = a.parse(this._pc.localDescription.sdp)),
                (h = f.media[o.idx]),
                (s.rtcp.cname = l.getCname({ offerMediaObject: h })),
                t)
              )
                if (1 === t.length) {
                  let e = u.getRtpEncodings({ offerMediaObject: h });
                  Object.assign(e[0], t[0]),
                    _ && (e = [e[0]]),
                    (s.encodings = e);
                } else s.encodings = t;
              else s.encodings = u.getRtpEncodings({ offerMediaObject: h });
              if (
                s.encodings.length > 1 &&
                ("video/vp8" === s.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === s.codecs[0].mimeType.toLowerCase())
              )
                for (const e of s.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${y.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: h,
                reuseMid: o.reuseMid,
                offerRtpParameters: s,
                answerRtpParameters: i,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                v.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ),
                await this._pc.setRemoteDescription(w),
                this._mapMidTransceiver.set(b, p),
                { localId: b, rtpParameters: s, rtpSender: p.sender }
              );
            }
            async stopSending(e) {
              if (
                (this.assertSendDirection(),
                v.debug("stopSending() [localId:%s]", e),
                this._closed)
              )
                return;
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              v.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              v.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if ((this._remoteSdp.resumeSendingMediaSection(e), !t))
                throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "sendonly";
              const r = await this._pc.createOffer();
              v.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? v.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : v.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              v.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              v.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              v.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % _.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  v.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: n,
                  rtpParameters: s,
                  streamId: i,
                } = t;
                v.debug("receive() [trackId:%s, kind:%s]", e, n);
                const a = s.mid || String(this._mapMidTransceiver.size);
                r.set(e, a),
                  this._remoteSdp.receive({
                    mid: a,
                    kind: n,
                    offerRtpParameters: s,
                    streamId: i || s.rtcp.cname,
                    trackId: e,
                  });
              }
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              let s = await this._pc.createAnswer();
              const i = a.parse(s.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: n } = t,
                  s = r.get(e),
                  a = i.media.find((e) => String(e.mid) === s);
                l.applyCodecParameters({
                  offerRtpParameters: n,
                  answerMediaObject: a,
                });
              }
              (s = { type: "answer", sdp: a.write(i) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: i,
                  })),
                v.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s);
              for (const n of e) {
                const { trackId: e } = n,
                  s = r.get(e),
                  i = this._pc.getTransceivers().find((e) => e.mid === s);
                if (!i) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(s, i),
                  t.push({
                    localId: s,
                    track: i.receiver.track,
                    rtpReceiver: i.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                v.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                v.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                v.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              v.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                v.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new h.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome74 = y;
        },
        19: function (e, t, r) {
          var n, s, i, a, o, c, d, l, u;
          e.exports =
            ((u = r(9021)),
            r(3009),
            r(1025),
            (s = (n = u).lib),
            (i = s.Base),
            (a = s.WordArray),
            (o = n.algo),
            (c = o.SHA256),
            (d = o.HMAC),
            (l = o.PBKDF2 =
              i.extend({
                cfg: i.extend({ keySize: 4, hasher: c, iterations: 25e4 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var r = this.cfg,
                      n = d.create(r.hasher, e),
                      s = a.create(),
                      i = a.create([1]),
                      o = s.words,
                      c = i.words,
                      l = r.keySize,
                      u = r.iterations;
                    o.length < l;

                  ) {
                    var p = n.update(t).finalize(i);
                    n.reset();
                    for (
                      var h = p.words, m = h.length, f = p, g = 1;
                      g < u;
                      g++
                    ) {
                      (f = n.finalize(f)), n.reset();
                      for (var v = f.words, _ = 0; _ < m; _++) h[_] ^= v[_];
                    }
                    s.concat(p), c[0]++;
                  }
                  return (s.sigBytes = 4 * l), s;
                },
              })),
            (n.PBKDF2 = function (e, t, r) {
              return l.create(r).compute(e, t);
            }),
            u.PBKDF2);
        },
        25: function (e, t, r) {
          var n, s, i, a;
          e.exports =
            ((a = r(9021)),
            r(7165),
            (s = (n = a).lib.CipherParams),
            (i = n.enc.Hex),
            (n.format.Hex = {
              stringify: function (e) {
                return e.ciphertext.toString(i);
              },
              parse: function (e) {
                var t = i.parse(e);
                return s.create({ ciphertext: t });
              },
            }),
            a.format.Hex);
        },
        76: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              },
            a =
              (this && this.__importDefault) ||
              function (e) {
                return e && e.__esModule ? e : { default: e };
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.debug =
              t.parseScalabilityMode =
              t.detectDevice =
              t.Device =
              t.version =
              t.types =
                void 0);
          const o = a(r(7833));
          t.debug = o.default;
          const c = r(6004);
          Object.defineProperty(t, "Device", {
            enumerable: !0,
            get: function () {
              return c.Device;
            },
          }),
            Object.defineProperty(t, "detectDevice", {
              enumerable: !0,
              get: function () {
                return c.detectDevice;
              },
            });
          const d = i(r(8057));
          (t.types = d), (t.version = "3.7.7");
          var l = r(3303);
          Object.defineProperty(t, "parseScalabilityMode", {
            enumerable: !0,
            get: function () {
              return l.parse;
            },
          });
        },
        296: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => s });
          var n = r(7800);
          function s(e, t) {
            return (
              (function (e) {
                if (Array.isArray(e)) return e;
              })(e) ||
              (function (e, t) {
                var r =
                  null == e
                    ? null
                    : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
                      e["@@iterator"];
                if (null != r) {
                  var n,
                    s,
                    i,
                    a,
                    o = [],
                    c = !0,
                    d = !1;
                  try {
                    if (((i = (r = r.call(e)).next), 0 === t)) {
                      if (Object(r) !== r) return;
                      c = !1;
                    } else
                      for (
                        ;
                        !(c = (n = i.call(r)).done) &&
                        (o.push(n.value), o.length !== t);
                        c = !0
                      );
                  } catch (e) {
                    (d = !0), (s = e);
                  } finally {
                    try {
                      if (
                        !c &&
                        null != r.return &&
                        ((a = r.return()), Object(a) !== a)
                      )
                        return;
                    } finally {
                      if (d) throw s;
                    }
                  }
                  return o;
                }
              })(e, t) ||
              (0, n.A)(e, t) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
        },
        328: (e, t, r) => {
          r(8624), (e.exports = self.fetch.bind(self));
        },
        388: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => s });
          var n = r(2284);
          function s(e, t) {
            if (t && ("object" == (0, n.A)(t) || "function" == typeof t))
              return t;
            if (void 0 !== t)
              throw new TypeError(
                "Derived constructors may only return object or undefined"
              );
            return (function (e) {
              if (void 0 === e)
                throw new ReferenceError(
                  "this hasn't been initialised - super() hasn't been called"
                );
              return e;
            })(e);
          }
        },
        467: (e, t, r) => {
          "use strict";
          function n(e, t, r, n, s, i, a) {
            try {
              var o = e[i](a),
                c = o.value;
            } catch (e) {
              return void r(e);
            }
            o.done ? t(c) : Promise.resolve(c).then(n, s);
          }
          function s(e) {
            return function () {
              var t = this,
                r = arguments;
              return new Promise(function (s, i) {
                var a = e.apply(t, r);
                function o(e) {
                  n(a, s, i, o, c, "next", e);
                }
                function c(e) {
                  n(a, s, i, o, c, "throw", e);
                }
                o(void 0);
              });
            };
          }
          r.d(t, { A: () => s });
        },
        477: () => {},
        482: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(7165),
            (n.pad.Iso97971 = {
              pad: function (e, t) {
                e.concat(n.lib.WordArray.create([2147483648], 1)),
                  n.pad.ZeroPadding.pad(e, t);
              },
              unpad: function (e) {
                n.pad.ZeroPadding.unpad(e), e.sigBytes--;
              },
            }),
            n.pad.Iso97971);
        },
        521: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.HandlerInterface = void 0);
          const n = r(2010);
          class s extends n.EnhancedEventEmitter {
            constructor() {
              super();
            }
          }
          t.HandlerInterface = s;
        },
        736: (e, t, r) => {
          e.exports = function (e) {
            function t(e) {
              let r,
                s,
                i,
                a = null;
              function o(...e) {
                if (!o.enabled) return;
                const n = o,
                  s = Number(new Date()),
                  i = s - (r || s);
                (n.diff = i),
                  (n.prev = r),
                  (n.curr = s),
                  (r = s),
                  (e[0] = t.coerce(e[0])),
                  "string" != typeof e[0] && e.unshift("%O");
                let a = 0;
                (e[0] = e[0].replace(/%([a-zA-Z%])/g, (r, s) => {
                  if ("%%" === r) return "%";
                  a++;
                  const i = t.formatters[s];
                  if ("function" == typeof i) {
                    const t = e[a];
                    (r = i.call(n, t)), e.splice(a, 1), a--;
                  }
                  return r;
                })),
                  t.formatArgs.call(n, e);
                (n.log || t.log).apply(n, e);
              }
              return (
                (o.namespace = e),
                (o.useColors = t.useColors()),
                (o.color = t.selectColor(e)),
                (o.extend = n),
                (o.destroy = t.destroy),
                Object.defineProperty(o, "enabled", {
                  enumerable: !0,
                  configurable: !1,
                  get: () =>
                    null !== a
                      ? a
                      : (s !== t.namespaces &&
                          ((s = t.namespaces), (i = t.enabled(e))),
                        i),
                  set: (e) => {
                    a = e;
                  },
                }),
                "function" == typeof t.init && t.init(o),
                o
              );
            }
            function n(e, r) {
              const n = t(this.namespace + (void 0 === r ? ":" : r) + e);
              return (n.log = this.log), n;
            }
            function s(e, t) {
              let r = 0,
                n = 0,
                s = -1,
                i = 0;
              for (; r < e.length; )
                if (n < t.length && (t[n] === e[r] || "*" === t[n]))
                  "*" === t[n] ? ((s = n), (i = r), n++) : (r++, n++);
                else {
                  if (-1 === s) return !1;
                  (n = s + 1), i++, (r = i);
                }
              for (; n < t.length && "*" === t[n]; ) n++;
              return n === t.length;
            }
            return (
              (t.debug = t),
              (t.default = t),
              (t.coerce = function (e) {
                if (e instanceof Error) return e.stack || e.message;
                return e;
              }),
              (t.disable = function () {
                const e = [...t.names, ...t.skips.map((e) => "-" + e)].join(
                  ","
                );
                return t.enable(""), e;
              }),
              (t.enable = function (e) {
                t.save(e), (t.namespaces = e), (t.names = []), (t.skips = []);
                const r = ("string" == typeof e ? e : "")
                  .trim()
                  .replace(" ", ",")
                  .split(",")
                  .filter(Boolean);
                for (const e of r)
                  "-" === e[0] ? t.skips.push(e.slice(1)) : t.names.push(e);
              }),
              (t.enabled = function (e) {
                for (const r of t.skips) if (s(e, r)) return !1;
                for (const r of t.names) if (s(e, r)) return !0;
                return !1;
              }),
              (t.humanize = r(6585)),
              (t.destroy = function () {
                console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                );
              }),
              Object.keys(e).forEach((r) => {
                t[r] = e[r];
              }),
              (t.names = []),
              (t.skips = []),
              (t.formatters = {}),
              (t.selectColor = function (e) {
                let r = 0;
                for (let t = 0; t < e.length; t++)
                  (r = (r << 5) - r + e.charCodeAt(t)), (r |= 0);
                return t.colors[Math.abs(r) % t.colors.length];
              }),
              t.enable(t.load()),
              t
            );
          };
        },
        754: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            (function () {
              var e = n,
                t = e.lib.WordArray;
              function r(e, r, n) {
                for (var s = [], i = 0, a = 0; a < r; a++)
                  if (a % 4) {
                    var o =
                      (n[e.charCodeAt(a - 1)] << ((a % 4) * 2)) |
                      (n[e.charCodeAt(a)] >>> (6 - (a % 4) * 2));
                    (s[i >>> 2] |= o << (24 - (i % 4) * 8)), i++;
                  }
                return t.create(s, i);
              }
              e.enc.Base64 = {
                stringify: function (e) {
                  var t = e.words,
                    r = e.sigBytes,
                    n = this._map;
                  e.clamp();
                  for (var s = [], i = 0; i < r; i += 3)
                    for (
                      var a =
                          (((t[i >>> 2] >>> (24 - (i % 4) * 8)) & 255) << 16) |
                          (((t[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) &
                            255) <<
                            8) |
                          ((t[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) &
                            255),
                        o = 0;
                      o < 4 && i + 0.75 * o < r;
                      o++
                    )
                      s.push(n.charAt((a >>> (6 * (3 - o))) & 63));
                  var c = n.charAt(64);
                  if (c) for (; s.length % 4; ) s.push(c);
                  return s.join("");
                },
                parse: function (e) {
                  var t = e.length,
                    n = this._map,
                    s = this._reverseMap;
                  if (!s) {
                    s = this._reverseMap = [];
                    for (var i = 0; i < n.length; i++) s[n.charCodeAt(i)] = i;
                  }
                  var a = n.charAt(64);
                  if (a) {
                    var o = e.indexOf(a);
                    -1 !== o && (t = o);
                  }
                  return r(e, t, s);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
              };
            })(),
            n.enc.Base64);
        },
        816: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => s });
          var n = r(2284);
          function s(e) {
            var t = (function (e, t) {
              if ("object" != (0, n.A)(e) || !e) return e;
              var r = e[Symbol.toPrimitive];
              if (void 0 !== r) {
                var s = r.call(e, t || "default");
                if ("object" != (0, n.A)(s)) return s;
                throw new TypeError(
                  "@@toPrimitive must return a primitive value."
                );
              }
              return ("string" === t ? String : Number)(e);
            })(e, "string");
            return "symbol" == (0, n.A)(t) ? t : t + "";
          }
        },
        955: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = n,
                t = e.lib.BlockCipher,
                r = e.algo,
                s = [],
                i = [],
                a = [],
                o = [],
                c = [],
                d = [],
                l = [],
                u = [],
                p = [],
                h = [];
              !(function () {
                for (var e = [], t = 0; t < 256; t++)
                  e[t] = t < 128 ? t << 1 : (t << 1) ^ 283;
                var r = 0,
                  n = 0;
                for (t = 0; t < 256; t++) {
                  var m = n ^ (n << 1) ^ (n << 2) ^ (n << 3) ^ (n << 4);
                  (m = (m >>> 8) ^ (255 & m) ^ 99), (s[r] = m), (i[m] = r);
                  var f = e[r],
                    g = e[f],
                    v = e[g],
                    _ = (257 * e[m]) ^ (16843008 * m);
                  (a[r] = (_ << 24) | (_ >>> 8)),
                    (o[r] = (_ << 16) | (_ >>> 16)),
                    (c[r] = (_ << 8) | (_ >>> 24)),
                    (d[r] = _),
                    (_ =
                      (16843009 * v) ^
                      (65537 * g) ^
                      (257 * f) ^
                      (16843008 * r)),
                    (l[m] = (_ << 24) | (_ >>> 8)),
                    (u[m] = (_ << 16) | (_ >>> 16)),
                    (p[m] = (_ << 8) | (_ >>> 24)),
                    (h[m] = _),
                    r
                      ? ((r = f ^ e[e[e[v ^ f]]]), (n ^= e[e[n]]))
                      : (r = n = 1);
                }
              })();
              var m = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
                f = (r.AES = t.extend({
                  _doReset: function () {
                    if (!this._nRounds || this._keyPriorReset !== this._key) {
                      for (
                        var e = (this._keyPriorReset = this._key),
                          t = e.words,
                          r = e.sigBytes / 4,
                          n = 4 * ((this._nRounds = r + 6) + 1),
                          i = (this._keySchedule = []),
                          a = 0;
                        a < n;
                        a++
                      )
                        a < r
                          ? (i[a] = t[a])
                          : ((d = i[a - 1]),
                            a % r
                              ? r > 6 &&
                                a % r == 4 &&
                                (d =
                                  (s[d >>> 24] << 24) |
                                  (s[(d >>> 16) & 255] << 16) |
                                  (s[(d >>> 8) & 255] << 8) |
                                  s[255 & d])
                              : ((d =
                                  (s[(d = (d << 8) | (d >>> 24)) >>> 24] <<
                                    24) |
                                  (s[(d >>> 16) & 255] << 16) |
                                  (s[(d >>> 8) & 255] << 8) |
                                  s[255 & d]),
                                (d ^= m[(a / r) | 0] << 24)),
                            (i[a] = i[a - r] ^ d));
                      for (
                        var o = (this._invKeySchedule = []), c = 0;
                        c < n;
                        c++
                      ) {
                        if (((a = n - c), c % 4)) var d = i[a];
                        else d = i[a - 4];
                        o[c] =
                          c < 4 || a <= 4
                            ? d
                            : l[s[d >>> 24]] ^
                              u[s[(d >>> 16) & 255]] ^
                              p[s[(d >>> 8) & 255]] ^
                              h[s[255 & d]];
                      }
                    }
                  },
                  encryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._keySchedule, a, o, c, d, s);
                  },
                  decryptBlock: function (e, t) {
                    var r = e[t + 1];
                    (e[t + 1] = e[t + 3]),
                      (e[t + 3] = r),
                      this._doCryptBlock(
                        e,
                        t,
                        this._invKeySchedule,
                        l,
                        u,
                        p,
                        h,
                        i
                      ),
                      (r = e[t + 1]),
                      (e[t + 1] = e[t + 3]),
                      (e[t + 3] = r);
                  },
                  _doCryptBlock: function (e, t, r, n, s, i, a, o) {
                    for (
                      var c = this._nRounds,
                        d = e[t] ^ r[0],
                        l = e[t + 1] ^ r[1],
                        u = e[t + 2] ^ r[2],
                        p = e[t + 3] ^ r[3],
                        h = 4,
                        m = 1;
                      m < c;
                      m++
                    ) {
                      var f =
                          n[d >>> 24] ^
                          s[(l >>> 16) & 255] ^
                          i[(u >>> 8) & 255] ^
                          a[255 & p] ^
                          r[h++],
                        g =
                          n[l >>> 24] ^
                          s[(u >>> 16) & 255] ^
                          i[(p >>> 8) & 255] ^
                          a[255 & d] ^
                          r[h++],
                        v =
                          n[u >>> 24] ^
                          s[(p >>> 16) & 255] ^
                          i[(d >>> 8) & 255] ^
                          a[255 & l] ^
                          r[h++],
                        _ =
                          n[p >>> 24] ^
                          s[(d >>> 16) & 255] ^
                          i[(l >>> 8) & 255] ^
                          a[255 & u] ^
                          r[h++];
                      (d = f), (l = g), (u = v), (p = _);
                    }
                    (f =
                      ((o[d >>> 24] << 24) |
                        (o[(l >>> 16) & 255] << 16) |
                        (o[(u >>> 8) & 255] << 8) |
                        o[255 & p]) ^
                      r[h++]),
                      (g =
                        ((o[l >>> 24] << 24) |
                          (o[(u >>> 16) & 255] << 16) |
                          (o[(p >>> 8) & 255] << 8) |
                          o[255 & d]) ^
                        r[h++]),
                      (v =
                        ((o[u >>> 24] << 24) |
                          (o[(p >>> 16) & 255] << 16) |
                          (o[(d >>> 8) & 255] << 8) |
                          o[255 & l]) ^
                        r[h++]),
                      (_ =
                        ((o[p >>> 24] << 24) |
                          (o[(d >>> 16) & 255] << 16) |
                          (o[(l >>> 8) & 255] << 8) |
                          o[255 & u]) ^
                        r[h++]),
                      (e[t] = f),
                      (e[t + 1] = g),
                      (e[t + 2] = v),
                      (e[t + 3] = _);
                  },
                  keySize: 8,
                }));
              e.AES = t._createHelper(f);
            })(),
            n.AES);
        },
        1025: function (e, t, r) {
          var n, s, i, a;
          e.exports =
            ((n = r(9021)),
            (i = (s = n).lib.Base),
            (a = s.enc.Utf8),
            void (s.algo.HMAC = i.extend({
              init: function (e, t) {
                (e = this._hasher = new e.init()),
                  "string" == typeof t && (t = a.parse(t));
                var r = e.blockSize,
                  n = 4 * r;
                t.sigBytes > n && (t = e.finalize(t)), t.clamp();
                for (
                  var s = (this._oKey = t.clone()),
                    i = (this._iKey = t.clone()),
                    o = s.words,
                    c = i.words,
                    d = 0;
                  d < r;
                  d++
                )
                  (o[d] ^= 1549556828), (c[d] ^= 909522486);
                (s.sigBytes = i.sigBytes = n), this.reset();
              },
              reset: function () {
                var e = this._hasher;
                e.reset(), e.update(this._iKey);
              },
              update: function (e) {
                return this._hasher.update(e), this;
              },
              finalize: function (e) {
                var t = this._hasher,
                  r = t.finalize(e);
                return t.reset(), t.finalize(this._oKey.clone().concat(r));
              },
            })));
        },
        1305: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.RemoteSdp = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = r(3471),
            d = new o.Logger("RemoteSdp");
          t.RemoteSdp = class {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: n,
              plainRtpParameters: s,
              planB: i = !1,
            }) {
              if (
                ((this._mediaSections = []),
                (this._midToIndex = new Map()),
                (this._iceParameters = e),
                (this._iceCandidates = t),
                (this._dtlsParameters = r),
                (this._sctpParameters = n),
                (this._plainRtpParameters = s),
                (this._planB = i),
                (this._sdpObject = {
                  version: 0,
                  origin: {
                    address: "0.0.0.0",
                    ipVer: 4,
                    netType: "IN",
                    sessionId: 1e4,
                    sessionVersion: 0,
                    username: "mediasoup-client",
                  },
                  name: "-",
                  timing: { start: 0, stop: 0 },
                  media: [],
                }),
                e && e.iceLite && (this._sdpObject.icelite = "ice-lite"),
                r)
              ) {
                this._sdpObject.msidSemantic = { semantic: "WMS", token: "*" };
                const e = this._dtlsParameters.fingerprints.length;
                (this._sdpObject.fingerprint = {
                  type: r.fingerprints[e - 1].algorithm,
                  hash: r.fingerprints[e - 1].value,
                }),
                  (this._sdpObject.groups = [{ type: "BUNDLE", mids: "" }]);
              }
              s &&
                ((this._sdpObject.origin.address = s.ip),
                (this._sdpObject.origin.ipVer = s.ipVersion));
            }
            updateIceParameters(e) {
              d.debug("updateIceParameters() [iceParameters:%o]", e),
                (this._iceParameters = e),
                (this._sdpObject.icelite = e.iceLite ? "ice-lite" : void 0);
              for (const t of this._mediaSections) t.setIceParameters(e);
            }
            updateDtlsRole(e) {
              d.debug("updateDtlsRole() [role:%s]", e),
                (this._dtlsParameters.role = e);
              for (const t of this._mediaSections) t.setDtlsRole(e);
            }
            getNextMediaSectionIdx() {
              for (let e = 0; e < this._mediaSections.length; ++e) {
                const t = this._mediaSections[e];
                if (t.closed) return { idx: e, reuseMid: t.mid };
              }
              return { idx: this._mediaSections.length };
            }
            send({
              offerMediaObject: e,
              reuseMid: t,
              offerRtpParameters: r,
              answerRtpParameters: n,
              codecOptions: s,
              extmapAllowMixed: i = !1,
            }) {
              const a = new c.AnswerMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                plainRtpParameters: this._plainRtpParameters,
                planB: this._planB,
                offerMediaObject: e,
                offerRtpParameters: r,
                answerRtpParameters: n,
                codecOptions: s,
                extmapAllowMixed: i,
              });
              t
                ? this._replaceMediaSection(a, t)
                : this._midToIndex.has(a.mid)
                ? this._replaceMediaSection(a)
                : this._addMediaSection(a);
            }
            receive({
              mid: e,
              kind: t,
              offerRtpParameters: r,
              streamId: n,
              trackId: s,
            }) {
              const i = this._midToIndex.get(e);
              let a;
              if ((void 0 !== i && (a = this._mediaSections[i]), a))
                a.planBReceive({
                  offerRtpParameters: r,
                  streamId: n,
                  trackId: s,
                }),
                  this._replaceMediaSection(a);
              else {
                a = new c.OfferMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  planB: this._planB,
                  mid: e,
                  kind: t,
                  offerRtpParameters: r,
                  streamId: n,
                  trackId: s,
                });
                const i = this._mediaSections.find((e) => e.closed);
                i
                  ? this._replaceMediaSection(a, i.mid)
                  : this._addMediaSection(a);
              }
            }
            pauseMediaSection(e) {
              this._findMediaSection(e).pause();
            }
            resumeSendingMediaSection(e) {
              this._findMediaSection(e).resume();
            }
            resumeReceivingMediaSection(e) {
              this._findMediaSection(e).resume();
            }
            disableMediaSection(e) {
              this._findMediaSection(e).disable();
            }
            closeMediaSection(e) {
              const t = this._findMediaSection(e);
              return e === this._firstMid
                ? (d.debug(
                    "closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]",
                    e
                  ),
                  this.disableMediaSection(e),
                  !1)
                : (t.close(), this._regenerateBundleMids(), !0);
            }
            muxMediaSectionSimulcast(e, t) {
              const r = this._findMediaSection(e);
              r.muxSimulcastStreams(t), this._replaceMediaSection(r);
            }
            planBStopReceiving({ mid: e, offerRtpParameters: t }) {
              const r = this._findMediaSection(e);
              r.planBStopReceiving({ offerRtpParameters: t }),
                this._replaceMediaSection(r);
            }
            sendSctpAssociation({ offerMediaObject: e }) {
              const t = new c.AnswerMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                sctpParameters: this._sctpParameters,
                plainRtpParameters: this._plainRtpParameters,
                offerMediaObject: e,
              });
              this._addMediaSection(t);
            }
            receiveSctpAssociation({ oldDataChannelSpec: e = !1 } = {}) {
              const t = new c.OfferMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                sctpParameters: this._sctpParameters,
                plainRtpParameters: this._plainRtpParameters,
                mid: "datachannel",
                kind: "application",
                oldDataChannelSpec: e,
              });
              this._addMediaSection(t);
            }
            getSdp() {
              return (
                this._sdpObject.origin.sessionVersion++,
                a.write(this._sdpObject)
              );
            }
            _addMediaSection(e) {
              this._firstMid || (this._firstMid = e.mid),
                this._mediaSections.push(e),
                this._midToIndex.set(e.mid, this._mediaSections.length - 1),
                this._sdpObject.media.push(e.getObject()),
                this._regenerateBundleMids();
            }
            _replaceMediaSection(e, t) {
              if ("string" == typeof t) {
                const r = this._midToIndex.get(t);
                if (void 0 === r)
                  throw new Error(`no media section found for reuseMid '${t}'`);
                const n = this._mediaSections[r];
                (this._mediaSections[r] = e),
                  this._midToIndex.delete(n.mid),
                  this._midToIndex.set(e.mid, r),
                  (this._sdpObject.media[r] = e.getObject()),
                  this._regenerateBundleMids();
              } else {
                const t = this._midToIndex.get(e.mid);
                if (void 0 === t)
                  throw new Error(`no media section found with mid '${e.mid}'`);
                (this._mediaSections[t] = e),
                  (this._sdpObject.media[t] = e.getObject());
              }
            }
            _findMediaSection(e) {
              const t = this._midToIndex.get(e);
              if (void 0 === t)
                throw new Error(`no media section found with mid '${e}'`);
              return this._mediaSections[t];
            }
            _regenerateBundleMids() {
              this._dtlsParameters &&
                (this._sdpObject.groups[0].mids = this._mediaSections
                  .filter((e) => !e.closed)
                  .map((e) => e.mid)
                  .join(" "));
            }
          };
        },
        1380: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(3240),
            (function () {
              var e = n,
                t = e.lib.Hasher,
                r = e.x64,
                s = r.Word,
                i = r.WordArray,
                a = e.algo;
              function o() {
                return s.create.apply(s, arguments);
              }
              var c = [
                  o(1116352408, 3609767458),
                  o(1899447441, 602891725),
                  o(3049323471, 3964484399),
                  o(3921009573, 2173295548),
                  o(961987163, 4081628472),
                  o(1508970993, 3053834265),
                  o(2453635748, 2937671579),
                  o(2870763221, 3664609560),
                  o(3624381080, 2734883394),
                  o(310598401, 1164996542),
                  o(607225278, 1323610764),
                  o(1426881987, 3590304994),
                  o(1925078388, 4068182383),
                  o(2162078206, 991336113),
                  o(2614888103, 633803317),
                  o(3248222580, 3479774868),
                  o(3835390401, 2666613458),
                  o(4022224774, 944711139),
                  o(264347078, 2341262773),
                  o(604807628, 2007800933),
                  o(770255983, 1495990901),
                  o(1249150122, 1856431235),
                  o(1555081692, 3175218132),
                  o(1996064986, 2198950837),
                  o(2554220882, 3999719339),
                  o(2821834349, 766784016),
                  o(2952996808, 2566594879),
                  o(3210313671, 3203337956),
                  o(3336571891, 1034457026),
                  o(3584528711, 2466948901),
                  o(113926993, 3758326383),
                  o(338241895, 168717936),
                  o(666307205, 1188179964),
                  o(773529912, 1546045734),
                  o(1294757372, 1522805485),
                  o(1396182291, 2643833823),
                  o(1695183700, 2343527390),
                  o(1986661051, 1014477480),
                  o(2177026350, 1206759142),
                  o(2456956037, 344077627),
                  o(2730485921, 1290863460),
                  o(2820302411, 3158454273),
                  o(3259730800, 3505952657),
                  o(3345764771, 106217008),
                  o(3516065817, 3606008344),
                  o(3600352804, 1432725776),
                  o(4094571909, 1467031594),
                  o(275423344, 851169720),
                  o(430227734, 3100823752),
                  o(506948616, 1363258195),
                  o(659060556, 3750685593),
                  o(883997877, 3785050280),
                  o(958139571, 3318307427),
                  o(1322822218, 3812723403),
                  o(1537002063, 2003034995),
                  o(1747873779, 3602036899),
                  o(1955562222, 1575990012),
                  o(2024104815, 1125592928),
                  o(2227730452, 2716904306),
                  o(2361852424, 442776044),
                  o(2428436474, 593698344),
                  o(2756734187, 3733110249),
                  o(3204031479, 2999351573),
                  o(3329325298, 3815920427),
                  o(3391569614, 3928383900),
                  o(3515267271, 566280711),
                  o(3940187606, 3454069534),
                  o(4118630271, 4000239992),
                  o(116418474, 1914138554),
                  o(174292421, 2731055270),
                  o(289380356, 3203993006),
                  o(460393269, 320620315),
                  o(685471733, 587496836),
                  o(852142971, 1086792851),
                  o(1017036298, 365543100),
                  o(1126000580, 2618297676),
                  o(1288033470, 3409855158),
                  o(1501505948, 4234509866),
                  o(1607167915, 987167468),
                  o(1816402316, 1246189591),
                ],
                d = [];
              !(function () {
                for (var e = 0; e < 80; e++) d[e] = o();
              })();
              var l = (a.SHA512 = t.extend({
                _doReset: function () {
                  this._hash = new i.init([
                    new s.init(1779033703, 4089235720),
                    new s.init(3144134277, 2227873595),
                    new s.init(1013904242, 4271175723),
                    new s.init(2773480762, 1595750129),
                    new s.init(1359893119, 2917565137),
                    new s.init(2600822924, 725511199),
                    new s.init(528734635, 4215389547),
                    new s.init(1541459225, 327033209),
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._hash.words,
                      n = r[0],
                      s = r[1],
                      i = r[2],
                      a = r[3],
                      o = r[4],
                      l = r[5],
                      u = r[6],
                      p = r[7],
                      h = n.high,
                      m = n.low,
                      f = s.high,
                      g = s.low,
                      v = i.high,
                      _ = i.low,
                      y = a.high,
                      b = a.low,
                      w = o.high,
                      S = o.low,
                      R = l.high,
                      k = l.low,
                      E = u.high,
                      C = u.low,
                      T = p.high,
                      P = p.low,
                      O = h,
                      x = m,
                      D = f,
                      I = g,
                      A = v,
                      M = _,
                      L = y,
                      N = b,
                      j = w,
                      B = S,
                      F = R,
                      U = k,
                      W = E,
                      q = C,
                      V = T,
                      H = P,
                      z = 0;
                    z < 80;
                    z++
                  ) {
                    var G,
                      K,
                      $ = d[z];
                    if (z < 16)
                      (K = $.high = 0 | e[t + 2 * z]),
                        (G = $.low = 0 | e[t + 2 * z + 1]);
                    else {
                      var J = d[z - 15],
                        Q = J.high,
                        Y = J.low,
                        X =
                          ((Q >>> 1) | (Y << 31)) ^
                          ((Q >>> 8) | (Y << 24)) ^
                          (Q >>> 7),
                        Z =
                          ((Y >>> 1) | (Q << 31)) ^
                          ((Y >>> 8) | (Q << 24)) ^
                          ((Y >>> 7) | (Q << 25)),
                        ee = d[z - 2],
                        te = ee.high,
                        re = ee.low,
                        ne =
                          ((te >>> 19) | (re << 13)) ^
                          ((te << 3) | (re >>> 29)) ^
                          (te >>> 6),
                        se =
                          ((re >>> 19) | (te << 13)) ^
                          ((re << 3) | (te >>> 29)) ^
                          ((re >>> 6) | (te << 26)),
                        ie = d[z - 7],
                        ae = ie.high,
                        oe = ie.low,
                        ce = d[z - 16],
                        de = ce.high,
                        le = ce.low;
                      (K =
                        (K =
                          (K =
                            X + ae + ((G = Z + oe) >>> 0 < Z >>> 0 ? 1 : 0)) +
                          ne +
                          ((G += se) >>> 0 < se >>> 0 ? 1 : 0)) +
                        de +
                        ((G += le) >>> 0 < le >>> 0 ? 1 : 0)),
                        ($.high = K),
                        ($.low = G);
                    }
                    var ue,
                      pe = (j & F) ^ (~j & W),
                      he = (B & U) ^ (~B & q),
                      me = (O & D) ^ (O & A) ^ (D & A),
                      fe = (x & I) ^ (x & M) ^ (I & M),
                      ge =
                        ((O >>> 28) | (x << 4)) ^
                        ((O << 30) | (x >>> 2)) ^
                        ((O << 25) | (x >>> 7)),
                      ve =
                        ((x >>> 28) | (O << 4)) ^
                        ((x << 30) | (O >>> 2)) ^
                        ((x << 25) | (O >>> 7)),
                      _e =
                        ((j >>> 14) | (B << 18)) ^
                        ((j >>> 18) | (B << 14)) ^
                        ((j << 23) | (B >>> 9)),
                      ye =
                        ((B >>> 14) | (j << 18)) ^
                        ((B >>> 18) | (j << 14)) ^
                        ((B << 23) | (j >>> 9)),
                      be = c[z],
                      we = be.high,
                      Se = be.low,
                      Re = V + _e + ((ue = H + ye) >>> 0 < H >>> 0 ? 1 : 0),
                      ke = ve + fe;
                    (V = W),
                      (H = q),
                      (W = F),
                      (q = U),
                      (F = j),
                      (U = B),
                      (j =
                        (L +
                          (Re =
                            (Re =
                              (Re =
                                Re +
                                pe +
                                ((ue += he) >>> 0 < he >>> 0 ? 1 : 0)) +
                              we +
                              ((ue += Se) >>> 0 < Se >>> 0 ? 1 : 0)) +
                            K +
                            ((ue += G) >>> 0 < G >>> 0 ? 1 : 0)) +
                          ((B = (N + ue) | 0) >>> 0 < N >>> 0 ? 1 : 0)) |
                        0),
                      (L = A),
                      (N = M),
                      (A = D),
                      (M = I),
                      (D = O),
                      (I = x),
                      (O =
                        (Re +
                          (ge + me + (ke >>> 0 < ve >>> 0 ? 1 : 0)) +
                          ((x = (ue + ke) | 0) >>> 0 < ue >>> 0 ? 1 : 0)) |
                        0);
                  }
                  (m = n.low = m + x),
                    (n.high = h + O + (m >>> 0 < x >>> 0 ? 1 : 0)),
                    (g = s.low = g + I),
                    (s.high = f + D + (g >>> 0 < I >>> 0 ? 1 : 0)),
                    (_ = i.low = _ + M),
                    (i.high = v + A + (_ >>> 0 < M >>> 0 ? 1 : 0)),
                    (b = a.low = b + N),
                    (a.high = y + L + (b >>> 0 < N >>> 0 ? 1 : 0)),
                    (S = o.low = S + B),
                    (o.high = w + j + (S >>> 0 < B >>> 0 ? 1 : 0)),
                    (k = l.low = k + U),
                    (l.high = R + F + (k >>> 0 < U >>> 0 ? 1 : 0)),
                    (C = u.low = C + q),
                    (u.high = E + W + (C >>> 0 < q >>> 0 ? 1 : 0)),
                    (P = p.low = P + H),
                    (p.high = T + V + (P >>> 0 < H >>> 0 ? 1 : 0));
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    r = 8 * this._nDataBytes,
                    n = 8 * e.sigBytes;
                  return (
                    (t[n >>> 5] |= 128 << (24 - (n % 32))),
                    (t[30 + (((n + 128) >>> 10) << 5)] = Math.floor(
                      r / 4294967296
                    )),
                    (t[31 + (((n + 128) >>> 10) << 5)] = r),
                    (e.sigBytes = 4 * t.length),
                    this._process(),
                    this._hash.toX32()
                  );
                },
                clone: function () {
                  var e = t.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
                blockSize: 32,
              }));
              (e.SHA512 = t._createHelper(l)),
                (e.HmacSHA512 = t._createHmacHelper(l));
            })(),
            n.SHA512);
        },
        1396: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(3240),
            r(6440),
            r(5503),
            r(754),
            r(4725),
            r(4636),
            r(5471),
            r(3009),
            r(6308),
            r(1380),
            r(9557),
            r(5953),
            r(8056),
            r(1025),
            r(19),
            r(9506),
            r(7165),
            r(2169),
            r(6939),
            r(6372),
            r(3797),
            r(8454),
            r(2073),
            r(4905),
            r(482),
            r(2155),
            r(8124),
            r(25),
            r(955),
            r(7628),
            r(7193),
            r(6298),
            r(2696),
            r(3128),
            n);
        },
        1765: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.deepFreeze = t.generateRandomNumber = t.clone = void 0),
            (t.clone = function (e) {
              return void 0 === e
                ? void 0
                : Number.isNaN(e)
                ? NaN
                : "function" == typeof structuredClone
                ? structuredClone(e)
                : JSON.parse(JSON.stringify(e));
            }),
            (t.generateRandomNumber = function () {
              return Math.round(1e7 * Math.random());
            }),
            (t.deepFreeze = function e(t) {
              const r = Reflect.ownKeys(t);
              for (const n of r) {
                const r = t[n];
                ((r && "object" == typeof r) || "function" == typeof r) && e(r);
              }
              return Object.freeze(t);
            });
        },
        1767: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Firefox60 = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = r(4893),
            d = i(r(1765)),
            l = i(r(8046)),
            u = i(r(5544)),
            p = i(r(5938)),
            h = r(521),
            m = r(1305),
            f = r(3303),
            g = new o.Logger("Firefox60"),
            v = { OS: 16, MIS: 2048 };
          class _ extends h.HandlerInterface {
            static createFactory() {
              return () => new _();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Firefox60";
            }
            close() {
              if ((g.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              g.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                }),
                t = document.createElement("canvas");
              t.getContext("2d");
              const r = t.captureStream().getVideoTracks()[0];
              try {
                e.addTransceiver("audio", { direction: "sendrecv" });
                const n = e.addTransceiver(r, { direction: "sendrecv" }),
                  s = n.sender.getParameters(),
                  i = [
                    { rid: "r0", maxBitrate: 1e5 },
                    { rid: "r1", maxBitrate: 5e5 },
                  ];
                (s.encodings = i), await n.sender.setParameters(s);
                const o = await e.createOffer();
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                const c = a.parse(o.sdp);
                return u.extractRtpCapabilities({ sdpObject: c });
              } catch (n) {
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                throw n;
              }
            }
            async getNativeSctpCapabilities() {
              return g.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              this.assertNotClosed(),
                g.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (g.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              throw (
                (this.assertNotClosed(),
                new c.UnsupportedError("not supported"))
              );
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                g.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  g.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  g.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  (t = d.clone(t)).length > 1 &&
                  (t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  }),
                  t.reverse());
              const s = d.clone(this._sendingRtpParametersByKind[e.kind]);
              s.codecs = l.reduceCodecs(s.codecs, n);
              const i = d.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              i.codecs = l.reduceCodecs(i.codecs, n);
              const o = this._pc.addTransceiver(e, {
                direction: "sendonly",
                streams: [this._sendStream],
              });
              if (t) {
                const e = o.sender.getParameters();
                (e.encodings = t), await o.sender.setParameters(e);
              }
              const c = await this._pc.createOffer();
              let h = a.parse(c.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h,
                }));
              const m = (0, f.parse)((t || [{}])[0].scalabilityMode);
              g.debug(
                "send() | calling pc.setLocalDescription() [offer:%o]",
                c
              ),
                await this._pc.setLocalDescription(c);
              const v = o.mid;
              (s.mid = v), (h = a.parse(this._pc.localDescription.sdp));
              const _ = h.media[h.media.length - 1];
              if (((s.rtcp.cname = u.getCname({ offerMediaObject: _ })), t))
                if (1 === t.length) {
                  const e = p.getRtpEncodings({ offerMediaObject: _ });
                  Object.assign(e[0], t[0]), (s.encodings = e);
                } else s.encodings = t.reverse();
              else s.encodings = p.getRtpEncodings({ offerMediaObject: _ });
              if (
                s.encodings.length > 1 &&
                ("video/vp8" === s.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === s.codecs[0].mimeType.toLowerCase())
              )
                for (const e of s.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${m.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: _,
                offerRtpParameters: s,
                answerRtpParameters: i,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                g.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ),
                await this._pc.setRemoteDescription(y),
                this._mapMidTransceiver.set(v, o),
                { localId: v, rtpParameters: s, rtpSender: o.sender }
              );
            }
            async stopSending(e) {
              if (
                (this.assertSendDirection(),
                g.debug("stopSending() [localId:%s]", e),
                this._closed)
              )
                return;
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated transceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.disableMediaSection(t.mid);
              const r = await this._pc.createOffer();
              g.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              g.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "sendonly"),
                this._remoteSdp.resumeSendingMediaSection(e);
              const r = await this._pc.createOffer();
              g.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? g.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : g.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated transceiver not found");
              const n = r.sender.getParameters();
              (t = n.encodings.length - 1 - t),
                n.encodings.forEach((e, r) => {
                  e.active = r >= t;
                }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              g.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              g.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              g.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t,
                  })),
                  g.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: n,
                  rtpParameters: s,
                  streamId: i,
                } = t;
                g.debug("receive() [trackId:%s, kind:%s]", e, n);
                const a = s.mid || String(this._mapMidTransceiver.size);
                r.set(e, a),
                  this._remoteSdp.receive({
                    mid: a,
                    kind: n,
                    offerRtpParameters: s,
                    streamId: i || s.rtcp.cname,
                    trackId: e,
                  });
              }
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              let s = await this._pc.createAnswer();
              const i = a.parse(s.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: n } = t,
                  o = r.get(e),
                  c = i.media.find((e) => String(e.mid) === o);
                u.applyCodecParameters({
                  offerRtpParameters: n,
                  answerMediaObject: c,
                }),
                  (s = { type: "answer", sdp: a.write(i) });
              }
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: i,
                })),
                g.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s);
              for (const n of e) {
                const { trackId: e } = n,
                  s = r.get(e),
                  i = this._pc.getTransceivers().find((e) => e.mid === s);
                if (!i) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(s, i),
                  t.push({
                    localId: s,
                    track: i.receiver.track,
                    rtpReceiver: i.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                g.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                g.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                g.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              g.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: e,
                  });
                }
                g.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new c.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Firefox60 = _;
        },
        1803: (e, t, r) => {
          "use strict";
          r.d(t, { Iy: () => R, ed: () => w, sg: () => S, v7: () => _ });
          var n = r(4467),
            s = r(296),
            i = r(9027);
          function a(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          var o = {},
            c = {},
            d = {};
          for (var l in i.$.videoProfiles)
            "oneSixNine" == i.$.videoProfiles[l].aspectRatio &&
              ((o[l] = i.$.videoProfiles[l]),
              (o[l].encoding = {
                maxBitrate: o[l].bitRate,
                maxFramerate: o[l].frameRate,
              })),
              "fourThree" == i.$.videoProfiles[l].aspectRatio &&
                ((c[l] = i.$.videoProfiles[l]),
                (c[l].encoding = {
                  maxBitrate: c[l].bitRate,
                  maxFramerate: c[l].frameRate,
                }));
          for (var l in i.$.screenShareProfiles)
            (d[l] = i.$.screenShareProfiles[l]),
              (d[l].encoding = {
                maxBitrate: d[l].bitRate,
                maxFramerate: d[l].frameRate,
              });
          var u = Object.values(o),
            p = Object.values(c),
            h = Object.values(d),
            m = [o.h180p_w320p, o.h360p_w640p],
            f = [c.h180p_w240p, c.h360p_w480p],
            g = function (e) {
              return [{ scaleResolutionDownBy: 2, fps: 3 }].map(function (t) {
                var r;
                return {
                  width: Math.floor(e.width / t.scaleResolutionDownBy),
                  height: Math.floor(e.height / t.scaleResolutionDownBy),
                  encodings: {
                    maxBitrate: Math.max(
                      15e4,
                      Math.floor(
                        e.encoding.maxBitrate /
                          (Math.pow(t.scaleResolutionDownBy, 2) *
                            ((null !== (r = e.encoding.maxFramerate) &&
                            void 0 !== r
                              ? r
                              : 30) /
                              t.fps))
                      )
                    ),
                    maxFramerate: t.fps,
                  },
                };
              });
            },
            v = ["q", "h", "f"];
          function _(e, t, r, n, i) {
            var a = n && n.videoEncoding;
            e && (a = n && n.screenShareEncoding);
            var o = null == n ? void 0 : n.simulcast;
            if (
              (a ||
                (a = (function (e, t, r) {
                  for (
                    var n = (function (e, t, r) {
                        if (e) return h;
                        var n = t > r ? t / r : r / t;
                        if (Math.abs(n - 16 / 9) < Math.abs(n - 4 / 3))
                          return u;
                        return p;
                      })(e, t, r),
                      s = n[0].encoding,
                      i = Math.max(t, r),
                      a = 0;
                    a < n.length;
                    a += 1
                  ) {
                    var o = n[a];
                    if (((s = o.encoding), o.width >= i)) break;
                  }
                  return s;
                })(e, t, r)),
              !o)
            )
              return [a];
            var c,
              d = {
                width: t,
                height: r,
                encoding: {
                  maxBitrate: a.maxBitrate,
                  maxFramerate: a.maxFramerate,
                },
              },
              l = [],
              m = (l = y(e, d))[0];
            if (l.length > 1) {
              var f = l;
              c = (0, s.A)(f, 2)[1];
            }
            var g = Math.max(t, r);
            return b(
              t,
              r,
              g >= 960 && c ? [m, c, d] : g >= 480 ? [m, d] : [d],
              i
            );
          }
          function y(e, t) {
            if (e) g(t);
            var r = t.width,
              n = t.height,
              s = r > n ? r / n : n / r;
            return Math.abs(s - 16 / 9) < Math.abs(s - 4 / 3) ? m : f;
          }
          function b(e, t, r, s) {
            var i = [];
            return (
              r.forEach(function (r, o) {
                if (!(o >= v.length)) {
                  var c = s ? null : { maxFramerate: r.encoding.maxFramerate },
                    d = Math.min(e, t),
                    l = (function (e) {
                      for (var t = 1; t < arguments.length; t++) {
                        var r = null != arguments[t] ? arguments[t] : {};
                        t % 2
                          ? a(Object(r), !0).forEach(function (t) {
                              (0, n.A)(e, t, r[t]);
                            })
                          : Object.getOwnPropertyDescriptors
                          ? Object.defineProperties(
                              e,
                              Object.getOwnPropertyDescriptors(r)
                            )
                          : a(Object(r)).forEach(function (t) {
                              Object.defineProperty(
                                e,
                                t,
                                Object.getOwnPropertyDescriptor(r, t)
                              );
                            });
                      }
                      return e;
                    })(
                      {
                        rid: v[o],
                        scaleResolutionDownBy: d / Math.min(r.width, r.height),
                        maxBitrate: r.encoding.maxBitrate,
                      },
                      c
                    );
                  i.push(l);
                }
              }),
              i
            );
          }
          function w(e, t, r) {
            if (!e) return {};
            var n = e.id,
              s = e.appData,
              i = s.width,
              a = s.height,
              o = s.encodings;
            try {
              var c = (function (e) {
                var t = [];
                if (e && 0 != e.length) {
                  if (1 === e.length) {
                    for (var r = 0; r < 3; r++) t.push(Math.pow(2, 3 - r - 1));
                    return t;
                  }
                  var n = !1;
                  return (
                    e.forEach(function (e) {
                      void 0 !== e.scaleResolutionDownBy
                        ? ((n = !0),
                          t.push(Math.max(1, e.scaleResolutionDownBy)))
                        : t.push(1);
                    }),
                    n ||
                      e.forEach(function (r, n) {
                        t[n] = Math.pow(2, e.length - n - 1);
                      }),
                    t
                  );
                }
              })(o);
              if (!c) return {};
              var d = c
                  .map(function (e) {
                    return { width: i / e, height: a / e };
                  })
                  .sort(function (e, t) {
                    return e.width - t.width;
                  }),
                l = d.findIndex(function (e) {
                  return e.width >= t && e.height >= r;
                });
              -1 === l && (l = d.length - 1);
              var u = e.temporalLayers ? e.temporalLayers : 2;
              if (0 === l && u > 0) {
                var p = i / c[0],
                  h = a / c[0];
                t < 0.5 * p && r < 0.5 * h && (u -= 1),
                  u > 0 && t < 0.25 * p && r < 0.25 * h && (u -= 1);
              }
              return {
                consumerId: n,
                newPreferredSpatialLayer: Math.max(0, l),
                newPreferredTemporalLayer: Math.max(0, u),
              };
            } catch (e) {
              return {};
            }
          }
          function S(e, t) {
            var r;
            return function () {
              for (
                var n = this, s = arguments.length, i = new Array(s), a = 0;
                a < s;
                a++
              )
                i[a] = arguments[a];
              clearTimeout(r),
                (r = setTimeout(function () {
                  return e.apply(n, i);
                }, t));
            };
          }
          function R(e) {
            var t = window.innerHeight || document.documentElement.clientHeight,
              r = window.innerWidth || document.documentElement.clientWidth,
              n = e.top < t && e.bottom > 0,
              s = e.left < r && e.right > 0;
            return n && s;
          }
        },
        1806: (e, t, r) => {
          "use strict";
          r.d(t, { $Q: () => n, T4: () => s, Ts: () => a, ue: () => i });
          var n = "vk_e2ee",
            s = {
              sharedKey: !1,
              ratchetSalt: "VideoSDKEncryptionRatchetSalt",
              ratchetWindowSize: 0,
              failureTolerance: 10,
              keyringSize: 16,
              discardFrameWhenCryptorNotReady: !1,
            },
            i = ["vp8", "vp9", "h264", "av1"],
            a = ["opus"];
        },
        1919: (e, t, r) => {
          "use strict";
          r.r(t), r.d(t, { default: () => Ar });
          var n = {};
          r.r(n),
            r.d(n, {
              Decoder: () => Ee,
              Encoder: () => Re,
              PacketType: () => Se,
              protocol: () => we,
            });
          var s = r(296),
            i = r(2284),
            a = r(467),
            o = r(3029),
            c = r(2901),
            d = r(4467),
            l = r(4756),
            u = r.n(l);
          const p = Object.create(null);
          (p.open = "0"),
            (p.close = "1"),
            (p.ping = "2"),
            (p.pong = "3"),
            (p.message = "4"),
            (p.upgrade = "5"),
            (p.noop = "6");
          const h = Object.create(null);
          Object.keys(p).forEach((e) => {
            h[p[e]] = e;
          });
          const m = { type: "error", data: "parser error" },
            f =
              "function" == typeof Blob ||
              ("undefined" != typeof Blob &&
                "[object BlobConstructor]" ===
                  Object.prototype.toString.call(Blob)),
            g = "function" == typeof ArrayBuffer,
            v = (e) =>
              "function" == typeof ArrayBuffer.isView
                ? ArrayBuffer.isView(e)
                : e && e.buffer instanceof ArrayBuffer,
            _ = ({ type: e, data: t }, r, n) =>
              f && t instanceof Blob
                ? r
                  ? n(t)
                  : y(t, n)
                : g && (t instanceof ArrayBuffer || v(t))
                ? r
                  ? n(t)
                  : y(new Blob([t]), n)
                : n(p[e] + (t || "")),
            y = (e, t) => {
              const r = new FileReader();
              return (
                (r.onload = function () {
                  const e = r.result.split(",")[1];
                  t("b" + (e || ""));
                }),
                r.readAsDataURL(e)
              );
            };
          function b(e) {
            return e instanceof Uint8Array
              ? e
              : e instanceof ArrayBuffer
              ? new Uint8Array(e)
              : new Uint8Array(e.buffer, e.byteOffset, e.byteLength);
          }
          let w;
          const S =
              "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
            R = "undefined" == typeof Uint8Array ? [] : new Uint8Array(256);
          for (let e = 0; e < 64; e++) R[S.charCodeAt(e)] = e;
          const k = "function" == typeof ArrayBuffer,
            E = (e, t) => {
              if ("string" != typeof e)
                return { type: "message", data: T(e, t) };
              const r = e.charAt(0);
              if ("b" === r)
                return { type: "message", data: C(e.substring(1), t) };
              return h[r]
                ? e.length > 1
                  ? { type: h[r], data: e.substring(1) }
                  : { type: h[r] }
                : m;
            },
            C = (e, t) => {
              if (k) {
                const r = ((e) => {
                  let t,
                    r,
                    n,
                    s,
                    i,
                    a = 0.75 * e.length,
                    o = e.length,
                    c = 0;
                  "=" === e[e.length - 1] &&
                    (a--, "=" === e[e.length - 2] && a--);
                  const d = new ArrayBuffer(a),
                    l = new Uint8Array(d);
                  for (t = 0; t < o; t += 4)
                    (r = R[e.charCodeAt(t)]),
                      (n = R[e.charCodeAt(t + 1)]),
                      (s = R[e.charCodeAt(t + 2)]),
                      (i = R[e.charCodeAt(t + 3)]),
                      (l[c++] = (r << 2) | (n >> 4)),
                      (l[c++] = ((15 & n) << 4) | (s >> 2)),
                      (l[c++] = ((3 & s) << 6) | (63 & i));
                  return d;
                })(e);
                return T(r, t);
              }
              return { base64: !0, data: e };
            },
            T = (e, t) =>
              "blob" === t
                ? e instanceof Blob
                  ? e
                  : new Blob([e])
                : e instanceof ArrayBuffer
                ? e
                : e.buffer,
            P = String.fromCharCode(30);
          function O() {
            return new TransformStream({
              transform(e, t) {
                !(function (e, t) {
                  f && e.data instanceof Blob
                    ? e.data.arrayBuffer().then(b).then(t)
                    : g && (e.data instanceof ArrayBuffer || v(e.data))
                    ? t(b(e.data))
                    : _(e, !1, (e) => {
                        w || (w = new TextEncoder()), t(w.encode(e));
                      });
                })(e, (r) => {
                  const n = r.length;
                  let s;
                  if (n < 126)
                    (s = new Uint8Array(1)),
                      new DataView(s.buffer).setUint8(0, n);
                  else if (n < 65536) {
                    s = new Uint8Array(3);
                    const e = new DataView(s.buffer);
                    e.setUint8(0, 126), e.setUint16(1, n);
                  } else {
                    s = new Uint8Array(9);
                    const e = new DataView(s.buffer);
                    e.setUint8(0, 127), e.setBigUint64(1, BigInt(n));
                  }
                  e.data && "string" != typeof e.data && (s[0] |= 128),
                    t.enqueue(s),
                    t.enqueue(r);
                });
              },
            });
          }
          let x;
          function D(e) {
            return e.reduce((e, t) => e + t.length, 0);
          }
          function I(e, t) {
            if (e[0].length === t) return e.shift();
            const r = new Uint8Array(t);
            let n = 0;
            for (let s = 0; s < t; s++)
              (r[s] = e[0][n++]), n === e[0].length && (e.shift(), (n = 0));
            return e.length && n < e[0].length && (e[0] = e[0].slice(n)), r;
          }
          function A(e) {
            if (e)
              return (function (e) {
                for (var t in A.prototype) e[t] = A.prototype[t];
                return e;
              })(e);
          }
          (A.prototype.on = A.prototype.addEventListener =
            function (e, t) {
              return (
                (this._callbacks = this._callbacks || {}),
                (this._callbacks["$" + e] =
                  this._callbacks["$" + e] || []).push(t),
                this
              );
            }),
            (A.prototype.once = function (e, t) {
              function r() {
                this.off(e, r), t.apply(this, arguments);
              }
              return (r.fn = t), this.on(e, r), this;
            }),
            (A.prototype.off =
              A.prototype.removeListener =
              A.prototype.removeAllListeners =
              A.prototype.removeEventListener =
                function (e, t) {
                  if (
                    ((this._callbacks = this._callbacks || {}),
                    0 == arguments.length)
                  )
                    return (this._callbacks = {}), this;
                  var r,
                    n = this._callbacks["$" + e];
                  if (!n) return this;
                  if (1 == arguments.length)
                    return delete this._callbacks["$" + e], this;
                  for (var s = 0; s < n.length; s++)
                    if ((r = n[s]) === t || r.fn === t) {
                      n.splice(s, 1);
                      break;
                    }
                  return (
                    0 === n.length && delete this._callbacks["$" + e], this
                  );
                }),
            (A.prototype.emit = function (e) {
              this._callbacks = this._callbacks || {};
              for (
                var t = new Array(arguments.length - 1),
                  r = this._callbacks["$" + e],
                  n = 1;
                n < arguments.length;
                n++
              )
                t[n - 1] = arguments[n];
              if (r) {
                n = 0;
                for (var s = (r = r.slice(0)).length; n < s; ++n)
                  r[n].apply(this, t);
              }
              return this;
            }),
            (A.prototype.emitReserved = A.prototype.emit),
            (A.prototype.listeners = function (e) {
              return (
                (this._callbacks = this._callbacks || {}),
                this._callbacks["$" + e] || []
              );
            }),
            (A.prototype.hasListeners = function (e) {
              return !!this.listeners(e).length;
            });
          const M =
              "function" == typeof Promise &&
              "function" == typeof Promise.resolve
                ? (e) => Promise.resolve().then(e)
                : (e, t) => t(e, 0),
            L =
              "undefined" != typeof self
                ? self
                : "undefined" != typeof window
                ? window
                : Function("return this")();
          function N(e, ...t) {
            return t.reduce(
              (t, r) => (e.hasOwnProperty(r) && (t[r] = e[r]), t),
              {}
            );
          }
          const j = L.setTimeout,
            B = L.clearTimeout;
          function F(e, t) {
            t.useNativeTimers
              ? ((e.setTimeoutFn = j.bind(L)), (e.clearTimeoutFn = B.bind(L)))
              : ((e.setTimeoutFn = L.setTimeout.bind(L)),
                (e.clearTimeoutFn = L.clearTimeout.bind(L)));
          }
          function U() {
            return (
              Date.now().toString(36).substring(3) +
              Math.random().toString(36).substring(2, 5)
            );
          }
          class W extends Error {
            constructor(e, t, r) {
              super(e),
                (this.description = t),
                (this.context = r),
                (this.type = "TransportError");
            }
          }
          class q extends A {
            constructor(e) {
              super(),
                (this.writable = !1),
                F(this, e),
                (this.opts = e),
                (this.query = e.query),
                (this.socket = e.socket),
                (this.supportsBinary = !e.forceBase64);
            }
            onError(e, t, r) {
              return super.emitReserved("error", new W(e, t, r)), this;
            }
            open() {
              return (this.readyState = "opening"), this.doOpen(), this;
            }
            close() {
              return (
                ("opening" !== this.readyState && "open" !== this.readyState) ||
                  (this.doClose(), this.onClose()),
                this
              );
            }
            send(e) {
              "open" === this.readyState && this.write(e);
            }
            onOpen() {
              (this.readyState = "open"),
                (this.writable = !0),
                super.emitReserved("open");
            }
            onData(e) {
              const t = E(e, this.socket.binaryType);
              this.onPacket(t);
            }
            onPacket(e) {
              super.emitReserved("packet", e);
            }
            onClose(e) {
              (this.readyState = "closed"), super.emitReserved("close", e);
            }
            pause(e) {}
            createUri(e, t = {}) {
              return (
                e +
                "://" +
                this._hostname() +
                this._port() +
                this.opts.path +
                this._query(t)
              );
            }
            _hostname() {
              const e = this.opts.hostname;
              return -1 === e.indexOf(":") ? e : "[" + e + "]";
            }
            _port() {
              return this.opts.port &&
                ((this.opts.secure && Number(443 !== this.opts.port)) ||
                  (!this.opts.secure && 80 !== Number(this.opts.port)))
                ? ":" + this.opts.port
                : "";
            }
            _query(e) {
              const t = (function (e) {
                let t = "";
                for (let r in e)
                  e.hasOwnProperty(r) &&
                    (t.length && (t += "&"),
                    (t +=
                      encodeURIComponent(r) + "=" + encodeURIComponent(e[r])));
                return t;
              })(e);
              return t.length ? "?" + t : "";
            }
          }
          class V extends q {
            constructor() {
              super(...arguments), (this._polling = !1);
            }
            get name() {
              return "polling";
            }
            doOpen() {
              this._poll();
            }
            pause(e) {
              this.readyState = "pausing";
              const t = () => {
                (this.readyState = "paused"), e();
              };
              if (this._polling || !this.writable) {
                let e = 0;
                this._polling &&
                  (e++,
                  this.once("pollComplete", function () {
                    --e || t();
                  })),
                  this.writable ||
                    (e++,
                    this.once("drain", function () {
                      --e || t();
                    }));
              } else t();
            }
            _poll() {
              (this._polling = !0), this.doPoll(), this.emitReserved("poll");
            }
            onData(e) {
              ((e, t) => {
                const r = e.split(P),
                  n = [];
                for (let e = 0; e < r.length; e++) {
                  const s = E(r[e], t);
                  if ((n.push(s), "error" === s.type)) break;
                }
                return n;
              })(e, this.socket.binaryType).forEach((e) => {
                if (
                  ("opening" === this.readyState &&
                    "open" === e.type &&
                    this.onOpen(),
                  "close" === e.type)
                )
                  return (
                    this.onClose({
                      description: "transport closed by the server",
                    }),
                    !1
                  );
                this.onPacket(e);
              }),
                "closed" !== this.readyState &&
                  ((this._polling = !1),
                  this.emitReserved("pollComplete"),
                  "open" === this.readyState && this._poll());
            }
            doClose() {
              const e = () => {
                this.write([{ type: "close" }]);
              };
              "open" === this.readyState ? e() : this.once("open", e);
            }
            write(e) {
              (this.writable = !1),
                ((e, t) => {
                  const r = e.length,
                    n = new Array(r);
                  let s = 0;
                  e.forEach((e, i) => {
                    _(e, !1, (e) => {
                      (n[i] = e), ++s === r && t(n.join(P));
                    });
                  });
                })(e, (e) => {
                  this.doWrite(e, () => {
                    (this.writable = !0), this.emitReserved("drain");
                  });
                });
            }
            uri() {
              const e = this.opts.secure ? "https" : "http",
                t = this.query || {};
              return (
                !1 !== this.opts.timestampRequests &&
                  (t[this.opts.timestampParam] = U()),
                this.supportsBinary || t.sid || (t.b64 = 1),
                this.createUri(e, t)
              );
            }
          }
          let H = !1;
          try {
            H =
              "undefined" != typeof XMLHttpRequest &&
              "withCredentials" in new XMLHttpRequest();
          } catch (e) {}
          const z = H;
          function G() {}
          class K extends V {
            constructor(e) {
              if ((super(e), "undefined" != typeof location)) {
                const t = "https:" === location.protocol;
                let r = location.port;
                r || (r = t ? "443" : "80"),
                  (this.xd =
                    ("undefined" != typeof location &&
                      e.hostname !== location.hostname) ||
                    r !== e.port);
              }
            }
            doWrite(e, t) {
              const r = this.request({ method: "POST", data: e });
              r.on("success", t),
                r.on("error", (e, t) => {
                  this.onError("xhr post error", e, t);
                });
            }
            doPoll() {
              const e = this.request();
              e.on("data", this.onData.bind(this)),
                e.on("error", (e, t) => {
                  this.onError("xhr poll error", e, t);
                }),
                (this.pollXhr = e);
            }
          }
          class $ extends A {
            constructor(e, t, r) {
              super(),
                (this.createRequest = e),
                F(this, r),
                (this._opts = r),
                (this._method = r.method || "GET"),
                (this._uri = t),
                (this._data = void 0 !== r.data ? r.data : null),
                this._create();
            }
            _create() {
              var e;
              const t = N(
                this._opts,
                "agent",
                "pfx",
                "key",
                "passphrase",
                "cert",
                "ca",
                "ciphers",
                "rejectUnauthorized",
                "autoUnref"
              );
              t.xdomain = !!this._opts.xd;
              const r = (this._xhr = this.createRequest(t));
              try {
                r.open(this._method, this._uri, !0);
                try {
                  if (this._opts.extraHeaders) {
                    r.setDisableHeaderCheck && r.setDisableHeaderCheck(!0);
                    for (let e in this._opts.extraHeaders)
                      this._opts.extraHeaders.hasOwnProperty(e) &&
                        r.setRequestHeader(e, this._opts.extraHeaders[e]);
                  }
                } catch (e) {}
                if ("POST" === this._method)
                  try {
                    r.setRequestHeader(
                      "Content-type",
                      "text/plain;charset=UTF-8"
                    );
                  } catch (e) {}
                try {
                  r.setRequestHeader("Accept", "*/*");
                } catch (e) {}
                null === (e = this._opts.cookieJar) ||
                  void 0 === e ||
                  e.addCookies(r),
                  "withCredentials" in r &&
                    (r.withCredentials = this._opts.withCredentials),
                  this._opts.requestTimeout &&
                    (r.timeout = this._opts.requestTimeout),
                  (r.onreadystatechange = () => {
                    var e;
                    3 === r.readyState &&
                      (null === (e = this._opts.cookieJar) ||
                        void 0 === e ||
                        e.parseCookies(r.getResponseHeader("set-cookie"))),
                      4 === r.readyState &&
                        (200 === r.status || 1223 === r.status
                          ? this._onLoad()
                          : this.setTimeoutFn(() => {
                              this._onError(
                                "number" == typeof r.status ? r.status : 0
                              );
                            }, 0));
                  }),
                  r.send(this._data);
              } catch (e) {
                return void this.setTimeoutFn(() => {
                  this._onError(e);
                }, 0);
              }
              "undefined" != typeof document &&
                ((this._index = $.requestsCount++),
                ($.requests[this._index] = this));
            }
            _onError(e) {
              this.emitReserved("error", e, this._xhr), this._cleanup(!0);
            }
            _cleanup(e) {
              if (void 0 !== this._xhr && null !== this._xhr) {
                if (((this._xhr.onreadystatechange = G), e))
                  try {
                    this._xhr.abort();
                  } catch (e) {}
                "undefined" != typeof document &&
                  delete $.requests[this._index],
                  (this._xhr = null);
              }
            }
            _onLoad() {
              const e = this._xhr.responseText;
              null !== e &&
                (this.emitReserved("data", e),
                this.emitReserved("success"),
                this._cleanup());
            }
            abort() {
              this._cleanup();
            }
          }
          if (
            (($.requestsCount = 0),
            ($.requests = {}),
            "undefined" != typeof document)
          )
            if ("function" == typeof attachEvent) attachEvent("onunload", J);
            else if ("function" == typeof addEventListener) {
              addEventListener(
                "onpagehide" in L ? "pagehide" : "unload",
                J,
                !1
              );
            }
          function J() {
            for (let e in $.requests)
              $.requests.hasOwnProperty(e) && $.requests[e].abort();
          }
          const Q = (function () {
            const e = Y({ xdomain: !1 });
            return e && null !== e.responseType;
          })();
          function Y(e) {
            const t = e.xdomain;
            try {
              if ("undefined" != typeof XMLHttpRequest && (!t || z))
                return new XMLHttpRequest();
            } catch (e) {}
            if (!t)
              try {
                return new L[["Active"].concat("Object").join("X")](
                  "Microsoft.XMLHTTP"
                );
              } catch (e) {}
          }
          const X =
            "undefined" != typeof navigator &&
            "string" == typeof navigator.product &&
            "reactnative" === navigator.product.toLowerCase();
          class Z extends q {
            get name() {
              return "websocket";
            }
            doOpen() {
              const e = this.uri(),
                t = this.opts.protocols,
                r = X
                  ? {}
                  : N(
                      this.opts,
                      "agent",
                      "perMessageDeflate",
                      "pfx",
                      "key",
                      "passphrase",
                      "cert",
                      "ca",
                      "ciphers",
                      "rejectUnauthorized",
                      "localAddress",
                      "protocolVersion",
                      "origin",
                      "maxPayload",
                      "family",
                      "checkServerIdentity"
                    );
              this.opts.extraHeaders && (r.headers = this.opts.extraHeaders);
              try {
                this.ws = this.createSocket(e, t, r);
              } catch (e) {
                return this.emitReserved("error", e);
              }
              (this.ws.binaryType = this.socket.binaryType),
                this.addEventListeners();
            }
            addEventListeners() {
              (this.ws.onopen = () => {
                this.opts.autoUnref && this.ws._socket.unref(), this.onOpen();
              }),
                (this.ws.onclose = (e) =>
                  this.onClose({
                    description: "websocket connection closed",
                    context: e,
                  })),
                (this.ws.onmessage = (e) => this.onData(e.data)),
                (this.ws.onerror = (e) => this.onError("websocket error", e));
            }
            write(e) {
              this.writable = !1;
              for (let t = 0; t < e.length; t++) {
                const r = e[t],
                  n = t === e.length - 1;
                _(r, this.supportsBinary, (e) => {
                  try {
                    this.doWrite(r, e);
                  } catch (e) {}
                  n &&
                    M(() => {
                      (this.writable = !0), this.emitReserved("drain");
                    }, this.setTimeoutFn);
                });
              }
            }
            doClose() {
              void 0 !== this.ws &&
                ((this.ws.onerror = () => {}),
                this.ws.close(),
                (this.ws = null));
            }
            uri() {
              const e = this.opts.secure ? "wss" : "ws",
                t = this.query || {};
              return (
                this.opts.timestampRequests &&
                  (t[this.opts.timestampParam] = U()),
                this.supportsBinary || (t.b64 = 1),
                this.createUri(e, t)
              );
            }
          }
          const ee = L.WebSocket || L.MozWebSocket;
          const te = {
              websocket: class extends Z {
                createSocket(e, t, r) {
                  return X ? new ee(e, t, r) : t ? new ee(e, t) : new ee(e);
                }
                doWrite(e, t) {
                  this.ws.send(t);
                }
              },
              webtransport: class extends q {
                get name() {
                  return "webtransport";
                }
                doOpen() {
                  try {
                    this._transport = new WebTransport(
                      this.createUri("https"),
                      this.opts.transportOptions[this.name]
                    );
                  } catch (e) {
                    return this.emitReserved("error", e);
                  }
                  this._transport.closed
                    .then(() => {
                      this.onClose();
                    })
                    .catch((e) => {
                      this.onError("webtransport error", e);
                    }),
                    this._transport.ready.then(() => {
                      this._transport.createBidirectionalStream().then((e) => {
                        const t = (function (e, t) {
                            x || (x = new TextDecoder());
                            const r = [];
                            let n = 0,
                              s = -1,
                              i = !1;
                            return new TransformStream({
                              transform(a, o) {
                                for (r.push(a); ; ) {
                                  if (0 === n) {
                                    if (D(r) < 1) break;
                                    const e = I(r, 1);
                                    (i = !(128 & ~e[0])),
                                      (s = 127 & e[0]),
                                      (n = s < 126 ? 3 : 126 === s ? 1 : 2);
                                  } else if (1 === n) {
                                    if (D(r) < 2) break;
                                    const e = I(r, 2);
                                    (s = new DataView(
                                      e.buffer,
                                      e.byteOffset,
                                      e.length
                                    ).getUint16(0)),
                                      (n = 3);
                                  } else if (2 === n) {
                                    if (D(r) < 8) break;
                                    const e = I(r, 8),
                                      t = new DataView(
                                        e.buffer,
                                        e.byteOffset,
                                        e.length
                                      ),
                                      i = t.getUint32(0);
                                    if (i > Math.pow(2, 21) - 1) {
                                      o.enqueue(m);
                                      break;
                                    }
                                    (s = i * Math.pow(2, 32) + t.getUint32(4)),
                                      (n = 3);
                                  } else {
                                    if (D(r) < s) break;
                                    const e = I(r, s);
                                    o.enqueue(E(i ? e : x.decode(e), t)),
                                      (n = 0);
                                  }
                                  if (0 === s || s > e) {
                                    o.enqueue(m);
                                    break;
                                  }
                                }
                              },
                            });
                          })(Number.MAX_SAFE_INTEGER, this.socket.binaryType),
                          r = e.readable.pipeThrough(t).getReader(),
                          n = O();
                        n.readable.pipeTo(e.writable),
                          (this._writer = n.writable.getWriter());
                        const s = () => {
                          r.read()
                            .then(({ done: e, value: t }) => {
                              e || (this.onPacket(t), s());
                            })
                            .catch((e) => {});
                        };
                        s();
                        const i = { type: "open" };
                        this.query.sid &&
                          (i.data = `{"sid":"${this.query.sid}"}`),
                          this._writer.write(i).then(() => this.onOpen());
                      });
                    });
                }
                write(e) {
                  this.writable = !1;
                  for (let t = 0; t < e.length; t++) {
                    const r = e[t],
                      n = t === e.length - 1;
                    this._writer.write(r).then(() => {
                      n &&
                        M(() => {
                          (this.writable = !0), this.emitReserved("drain");
                        }, this.setTimeoutFn);
                    });
                  }
                }
                doClose() {
                  var e;
                  null === (e = this._transport) || void 0 === e || e.close();
                }
              },
              polling: class extends K {
                constructor(e) {
                  super(e);
                  const t = e && e.forceBase64;
                  this.supportsBinary = Q && !t;
                }
                request(e = {}) {
                  return (
                    Object.assign(e, { xd: this.xd }, this.opts),
                    new $(Y, this.uri(), e)
                  );
                }
              },
            },
            re =
              /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
            ne = [
              "source",
              "protocol",
              "authority",
              "userInfo",
              "user",
              "password",
              "host",
              "port",
              "relative",
              "path",
              "directory",
              "file",
              "query",
              "anchor",
            ];
          function se(e) {
            if (e.length > 8e3) throw "URI too long";
            const t = e,
              r = e.indexOf("["),
              n = e.indexOf("]");
            -1 != r &&
              -1 != n &&
              (e =
                e.substring(0, r) +
                e.substring(r, n).replace(/:/g, ";") +
                e.substring(n, e.length));
            let s = re.exec(e || ""),
              i = {},
              a = 14;
            for (; a--; ) i[ne[a]] = s[a] || "";
            return (
              -1 != r &&
                -1 != n &&
                ((i.source = t),
                (i.host = i.host
                  .substring(1, i.host.length - 1)
                  .replace(/;/g, ":")),
                (i.authority = i.authority
                  .replace("[", "")
                  .replace("]", "")
                  .replace(/;/g, ":")),
                (i.ipv6uri = !0)),
              (i.pathNames = (function (e, t) {
                const r = /\/{2,9}/g,
                  n = t.replace(r, "/").split("/");
                ("/" != t.slice(0, 1) && 0 !== t.length) || n.splice(0, 1);
                "/" == t.slice(-1) && n.splice(n.length - 1, 1);
                return n;
              })(0, i.path)),
              (i.queryKey = (function (e, t) {
                const r = {};
                return (
                  t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function (e, t, n) {
                    t && (r[t] = n);
                  }),
                  r
                );
              })(0, i.query)),
              i
            );
          }
          const ie =
              "function" == typeof addEventListener &&
              "function" == typeof removeEventListener,
            ae = [];
          ie &&
            addEventListener(
              "offline",
              () => {
                ae.forEach((e) => e());
              },
              !1
            );
          class oe extends A {
            constructor(e, t) {
              if (
                (super(),
                (this.binaryType = "arraybuffer"),
                (this.writeBuffer = []),
                (this._prevBufferLen = 0),
                (this._pingInterval = -1),
                (this._pingTimeout = -1),
                (this._maxPayload = -1),
                (this._pingTimeoutTime = 1 / 0),
                e && "object" == typeof e && ((t = e), (e = null)),
                e)
              ) {
                const r = se(e);
                (t.hostname = r.host),
                  (t.secure = "https" === r.protocol || "wss" === r.protocol),
                  (t.port = r.port),
                  r.query && (t.query = r.query);
              } else t.host && (t.hostname = se(t.host).host);
              F(this, t),
                (this.secure =
                  null != t.secure
                    ? t.secure
                    : "undefined" != typeof location &&
                      "https:" === location.protocol),
                t.hostname && !t.port && (t.port = this.secure ? "443" : "80"),
                (this.hostname =
                  t.hostname ||
                  ("undefined" != typeof location
                    ? location.hostname
                    : "localhost")),
                (this.port =
                  t.port ||
                  ("undefined" != typeof location && location.port
                    ? location.port
                    : this.secure
                    ? "443"
                    : "80")),
                (this.transports = []),
                (this._transportsByName = {}),
                t.transports.forEach((e) => {
                  const t = e.prototype.name;
                  this.transports.push(t), (this._transportsByName[t] = e);
                }),
                (this.opts = Object.assign(
                  {
                    path: "/engine.io",
                    agent: !1,
                    withCredentials: !1,
                    upgrade: !0,
                    timestampParam: "t",
                    rememberUpgrade: !1,
                    addTrailingSlash: !0,
                    rejectUnauthorized: !0,
                    perMessageDeflate: { threshold: 1024 },
                    transportOptions: {},
                    closeOnBeforeunload: !1,
                  },
                  t
                )),
                (this.opts.path =
                  this.opts.path.replace(/\/$/, "") +
                  (this.opts.addTrailingSlash ? "/" : "")),
                "string" == typeof this.opts.query &&
                  (this.opts.query = (function (e) {
                    let t = {},
                      r = e.split("&");
                    for (let e = 0, n = r.length; e < n; e++) {
                      let n = r[e].split("=");
                      t[decodeURIComponent(n[0])] = decodeURIComponent(n[1]);
                    }
                    return t;
                  })(this.opts.query)),
                ie &&
                  (this.opts.closeOnBeforeunload &&
                    ((this._beforeunloadEventListener = () => {
                      this.transport &&
                        (this.transport.removeAllListeners(),
                        this.transport.close());
                    }),
                    addEventListener(
                      "beforeunload",
                      this._beforeunloadEventListener,
                      !1
                    )),
                  "localhost" !== this.hostname &&
                    ((this._offlineEventListener = () => {
                      this._onClose("transport close", {
                        description: "network connection lost",
                      });
                    }),
                    ae.push(this._offlineEventListener))),
                this.opts.withCredentials && (this._cookieJar = void 0),
                this._open();
            }
            createTransport(e) {
              const t = Object.assign({}, this.opts.query);
              (t.EIO = 4), (t.transport = e), this.id && (t.sid = this.id);
              const r = Object.assign(
                {},
                this.opts,
                {
                  query: t,
                  socket: this,
                  hostname: this.hostname,
                  secure: this.secure,
                  port: this.port,
                },
                this.opts.transportOptions[e]
              );
              return new this._transportsByName[e](r);
            }
            _open() {
              if (0 === this.transports.length)
                return void this.setTimeoutFn(() => {
                  this.emitReserved("error", "No transports available");
                }, 0);
              const e =
                this.opts.rememberUpgrade &&
                oe.priorWebsocketSuccess &&
                -1 !== this.transports.indexOf("websocket")
                  ? "websocket"
                  : this.transports[0];
              this.readyState = "opening";
              const t = this.createTransport(e);
              t.open(), this.setTransport(t);
            }
            setTransport(e) {
              this.transport && this.transport.removeAllListeners(),
                (this.transport = e),
                e
                  .on("drain", this._onDrain.bind(this))
                  .on("packet", this._onPacket.bind(this))
                  .on("error", this._onError.bind(this))
                  .on("close", (e) => this._onClose("transport close", e));
            }
            onOpen() {
              (this.readyState = "open"),
                (oe.priorWebsocketSuccess =
                  "websocket" === this.transport.name),
                this.emitReserved("open"),
                this.flush();
            }
            _onPacket(e) {
              if (
                "opening" === this.readyState ||
                "open" === this.readyState ||
                "closing" === this.readyState
              )
                switch (
                  (this.emitReserved("packet", e),
                  this.emitReserved("heartbeat"),
                  e.type)
                ) {
                  case "open":
                    this.onHandshake(JSON.parse(e.data));
                    break;
                  case "ping":
                    this._sendPacket("pong"),
                      this.emitReserved("ping"),
                      this.emitReserved("pong"),
                      this._resetPingTimeout();
                    break;
                  case "error":
                    const t = new Error("server error");
                    (t.code = e.data), this._onError(t);
                    break;
                  case "message":
                    this.emitReserved("data", e.data),
                      this.emitReserved("message", e.data);
                }
            }
            onHandshake(e) {
              this.emitReserved("handshake", e),
                (this.id = e.sid),
                (this.transport.query.sid = e.sid),
                (this._pingInterval = e.pingInterval),
                (this._pingTimeout = e.pingTimeout),
                (this._maxPayload = e.maxPayload),
                this.onOpen(),
                "closed" !== this.readyState && this._resetPingTimeout();
            }
            _resetPingTimeout() {
              this.clearTimeoutFn(this._pingTimeoutTimer);
              const e = this._pingInterval + this._pingTimeout;
              (this._pingTimeoutTime = Date.now() + e),
                (this._pingTimeoutTimer = this.setTimeoutFn(() => {
                  this._onClose("ping timeout");
                }, e)),
                this.opts.autoUnref && this._pingTimeoutTimer.unref();
            }
            _onDrain() {
              this.writeBuffer.splice(0, this._prevBufferLen),
                (this._prevBufferLen = 0),
                0 === this.writeBuffer.length
                  ? this.emitReserved("drain")
                  : this.flush();
            }
            flush() {
              if (
                "closed" !== this.readyState &&
                this.transport.writable &&
                !this.upgrading &&
                this.writeBuffer.length
              ) {
                const e = this._getWritablePackets();
                this.transport.send(e),
                  (this._prevBufferLen = e.length),
                  this.emitReserved("flush");
              }
            }
            _getWritablePackets() {
              if (
                !(
                  this._maxPayload &&
                  "polling" === this.transport.name &&
                  this.writeBuffer.length > 1
                )
              )
                return this.writeBuffer;
              let e = 1;
              for (let r = 0; r < this.writeBuffer.length; r++) {
                const n = this.writeBuffer[r].data;
                if (
                  (n &&
                    (e +=
                      "string" == typeof (t = n)
                        ? (function (e) {
                            let t = 0,
                              r = 0;
                            for (let n = 0, s = e.length; n < s; n++)
                              (t = e.charCodeAt(n)),
                                t < 128
                                  ? (r += 1)
                                  : t < 2048
                                  ? (r += 2)
                                  : t < 55296 || t >= 57344
                                  ? (r += 3)
                                  : (n++, (r += 4));
                            return r;
                          })(t)
                        : Math.ceil(1.33 * (t.byteLength || t.size))),
                  r > 0 && e > this._maxPayload)
                )
                  return this.writeBuffer.slice(0, r);
                e += 2;
              }
              var t;
              return this.writeBuffer;
            }
            _hasPingExpired() {
              if (!this._pingTimeoutTime) return !0;
              const e = Date.now() > this._pingTimeoutTime;
              return (
                e &&
                  ((this._pingTimeoutTime = 0),
                  M(() => {
                    this._onClose("ping timeout");
                  }, this.setTimeoutFn)),
                e
              );
            }
            write(e, t, r) {
              return this._sendPacket("message", e, t, r), this;
            }
            send(e, t, r) {
              return this._sendPacket("message", e, t, r), this;
            }
            _sendPacket(e, t, r, n) {
              if (
                ("function" == typeof t && ((n = t), (t = void 0)),
                "function" == typeof r && ((n = r), (r = null)),
                "closing" === this.readyState || "closed" === this.readyState)
              )
                return;
              (r = r || {}).compress = !1 !== r.compress;
              const s = { type: e, data: t, options: r };
              this.emitReserved("packetCreate", s),
                this.writeBuffer.push(s),
                n && this.once("flush", n),
                this.flush();
            }
            close() {
              const e = () => {
                  this._onClose("forced close"), this.transport.close();
                },
                t = () => {
                  this.off("upgrade", t), this.off("upgradeError", t), e();
                },
                r = () => {
                  this.once("upgrade", t), this.once("upgradeError", t);
                };
              return (
                ("opening" !== this.readyState && "open" !== this.readyState) ||
                  ((this.readyState = "closing"),
                  this.writeBuffer.length
                    ? this.once("drain", () => {
                        this.upgrading ? r() : e();
                      })
                    : this.upgrading
                    ? r()
                    : e()),
                this
              );
            }
            _onError(e) {
              if (
                ((oe.priorWebsocketSuccess = !1),
                this.opts.tryAllTransports &&
                  this.transports.length > 1 &&
                  "opening" === this.readyState)
              )
                return this.transports.shift(), this._open();
              this.emitReserved("error", e),
                this._onClose("transport error", e);
            }
            _onClose(e, t) {
              if (
                "opening" === this.readyState ||
                "open" === this.readyState ||
                "closing" === this.readyState
              ) {
                if (
                  (this.clearTimeoutFn(this._pingTimeoutTimer),
                  this.transport.removeAllListeners("close"),
                  this.transport.close(),
                  this.transport.removeAllListeners(),
                  ie &&
                    (this._beforeunloadEventListener &&
                      removeEventListener(
                        "beforeunload",
                        this._beforeunloadEventListener,
                        !1
                      ),
                    this._offlineEventListener))
                ) {
                  const e = ae.indexOf(this._offlineEventListener);
                  -1 !== e && ae.splice(e, 1);
                }
                (this.readyState = "closed"),
                  (this.id = null),
                  this.emitReserved("close", e, t),
                  (this.writeBuffer = []),
                  (this._prevBufferLen = 0);
              }
            }
          }
          oe.protocol = 4;
          class ce extends oe {
            constructor() {
              super(...arguments), (this._upgrades = []);
            }
            onOpen() {
              if (
                (super.onOpen(),
                "open" === this.readyState && this.opts.upgrade)
              )
                for (let e = 0; e < this._upgrades.length; e++)
                  this._probe(this._upgrades[e]);
            }
            _probe(e) {
              let t = this.createTransport(e),
                r = !1;
              oe.priorWebsocketSuccess = !1;
              const n = () => {
                r ||
                  (t.send([{ type: "ping", data: "probe" }]),
                  t.once("packet", (e) => {
                    if (!r)
                      if ("pong" === e.type && "probe" === e.data) {
                        if (
                          ((this.upgrading = !0),
                          this.emitReserved("upgrading", t),
                          !t)
                        )
                          return;
                        (oe.priorWebsocketSuccess = "websocket" === t.name),
                          this.transport.pause(() => {
                            r ||
                              ("closed" !== this.readyState &&
                                (d(),
                                this.setTransport(t),
                                t.send([{ type: "upgrade" }]),
                                this.emitReserved("upgrade", t),
                                (t = null),
                                (this.upgrading = !1),
                                this.flush()));
                          });
                      } else {
                        const e = new Error("probe error");
                        (e.transport = t.name),
                          this.emitReserved("upgradeError", e);
                      }
                  }));
              };
              function s() {
                r || ((r = !0), d(), t.close(), (t = null));
              }
              const i = (e) => {
                const r = new Error("probe error: " + e);
                (r.transport = t.name),
                  s(),
                  this.emitReserved("upgradeError", r);
              };
              function a() {
                i("transport closed");
              }
              function o() {
                i("socket closed");
              }
              function c(e) {
                t && e.name !== t.name && s();
              }
              const d = () => {
                t.removeListener("open", n),
                  t.removeListener("error", i),
                  t.removeListener("close", a),
                  this.off("close", o),
                  this.off("upgrading", c);
              };
              t.once("open", n),
                t.once("error", i),
                t.once("close", a),
                this.once("close", o),
                this.once("upgrading", c),
                -1 !== this._upgrades.indexOf("webtransport") &&
                "webtransport" !== e
                  ? this.setTimeoutFn(() => {
                      r || t.open();
                    }, 200)
                  : t.open();
            }
            onHandshake(e) {
              (this._upgrades = this._filterUpgrades(e.upgrades)),
                super.onHandshake(e);
            }
            _filterUpgrades(e) {
              const t = [];
              for (let r = 0; r < e.length; r++)
                ~this.transports.indexOf(e[r]) && t.push(e[r]);
              return t;
            }
          }
          class de extends ce {
            constructor(e, t = {}) {
              const r = "object" == typeof e ? e : t;
              (!r.transports ||
                (r.transports && "string" == typeof r.transports[0])) &&
                (r.transports = (
                  r.transports || ["polling", "websocket", "webtransport"]
                )
                  .map((e) => te[e])
                  .filter((e) => !!e)),
                super(e, r);
            }
          }
          const le = "function" == typeof ArrayBuffer,
            ue = Object.prototype.toString,
            pe =
              "function" == typeof Blob ||
              ("undefined" != typeof Blob &&
                "[object BlobConstructor]" === ue.call(Blob)),
            he =
              "function" == typeof File ||
              ("undefined" != typeof File &&
                "[object FileConstructor]" === ue.call(File));
          function me(e) {
            return (
              (le &&
                (e instanceof ArrayBuffer ||
                  ((e) =>
                    "function" == typeof ArrayBuffer.isView
                      ? ArrayBuffer.isView(e)
                      : e.buffer instanceof ArrayBuffer)(e))) ||
              (pe && e instanceof Blob) ||
              (he && e instanceof File)
            );
          }
          function fe(e, t) {
            if (!e || "object" != typeof e) return !1;
            if (Array.isArray(e)) {
              for (let t = 0, r = e.length; t < r; t++) if (fe(e[t])) return !0;
              return !1;
            }
            if (me(e)) return !0;
            if (
              e.toJSON &&
              "function" == typeof e.toJSON &&
              1 === arguments.length
            )
              return fe(e.toJSON(), !0);
            for (const t in e)
              if (Object.prototype.hasOwnProperty.call(e, t) && fe(e[t]))
                return !0;
            return !1;
          }
          function ge(e) {
            const t = [],
              r = e.data,
              n = e;
            return (
              (n.data = ve(r, t)),
              (n.attachments = t.length),
              { packet: n, buffers: t }
            );
          }
          function ve(e, t) {
            if (!e) return e;
            if (me(e)) {
              const r = { _placeholder: !0, num: t.length };
              return t.push(e), r;
            }
            if (Array.isArray(e)) {
              const r = new Array(e.length);
              for (let n = 0; n < e.length; n++) r[n] = ve(e[n], t);
              return r;
            }
            if ("object" == typeof e && !(e instanceof Date)) {
              const r = {};
              for (const n in e)
                Object.prototype.hasOwnProperty.call(e, n) &&
                  (r[n] = ve(e[n], t));
              return r;
            }
            return e;
          }
          function _e(e, t) {
            return (e.data = ye(e.data, t)), delete e.attachments, e;
          }
          function ye(e, t) {
            if (!e) return e;
            if (e && !0 === e._placeholder) {
              if ("number" == typeof e.num && e.num >= 0 && e.num < t.length)
                return t[e.num];
              throw new Error("illegal attachments");
            }
            if (Array.isArray(e))
              for (let r = 0; r < e.length; r++) e[r] = ye(e[r], t);
            else if ("object" == typeof e)
              for (const r in e)
                Object.prototype.hasOwnProperty.call(e, r) &&
                  (e[r] = ye(e[r], t));
            return e;
          }
          const be = [
              "connect",
              "connect_error",
              "disconnect",
              "disconnecting",
              "newListener",
              "removeListener",
            ],
            we = 5;
          var Se;
          !(function (e) {
            (e[(e.CONNECT = 0)] = "CONNECT"),
              (e[(e.DISCONNECT = 1)] = "DISCONNECT"),
              (e[(e.EVENT = 2)] = "EVENT"),
              (e[(e.ACK = 3)] = "ACK"),
              (e[(e.CONNECT_ERROR = 4)] = "CONNECT_ERROR"),
              (e[(e.BINARY_EVENT = 5)] = "BINARY_EVENT"),
              (e[(e.BINARY_ACK = 6)] = "BINARY_ACK");
          })(Se || (Se = {}));
          class Re {
            constructor(e) {
              this.replacer = e;
            }
            encode(e) {
              return (e.type !== Se.EVENT && e.type !== Se.ACK) || !fe(e)
                ? [this.encodeAsString(e)]
                : this.encodeAsBinary({
                    type: e.type === Se.EVENT ? Se.BINARY_EVENT : Se.BINARY_ACK,
                    nsp: e.nsp,
                    data: e.data,
                    id: e.id,
                  });
            }
            encodeAsString(e) {
              let t = "" + e.type;
              return (
                (e.type !== Se.BINARY_EVENT && e.type !== Se.BINARY_ACK) ||
                  (t += e.attachments + "-"),
                e.nsp && "/" !== e.nsp && (t += e.nsp + ","),
                null != e.id && (t += e.id),
                null != e.data && (t += JSON.stringify(e.data, this.replacer)),
                t
              );
            }
            encodeAsBinary(e) {
              const t = ge(e),
                r = this.encodeAsString(t.packet),
                n = t.buffers;
              return n.unshift(r), n;
            }
          }
          function ke(e) {
            return "[object Object]" === Object.prototype.toString.call(e);
          }
          class Ee extends A {
            constructor(e) {
              super(), (this.reviver = e);
            }
            add(e) {
              let t;
              if ("string" == typeof e) {
                if (this.reconstructor)
                  throw new Error(
                    "got plaintext data when reconstructing a packet"
                  );
                t = this.decodeString(e);
                const r = t.type === Se.BINARY_EVENT;
                r || t.type === Se.BINARY_ACK
                  ? ((t.type = r ? Se.EVENT : Se.ACK),
                    (this.reconstructor = new Ce(t)),
                    0 === t.attachments && super.emitReserved("decoded", t))
                  : super.emitReserved("decoded", t);
              } else {
                if (!me(e) && !e.base64) throw new Error("Unknown type: " + e);
                if (!this.reconstructor)
                  throw new Error(
                    "got binary data when not reconstructing a packet"
                  );
                (t = this.reconstructor.takeBinaryData(e)),
                  t &&
                    ((this.reconstructor = null),
                    super.emitReserved("decoded", t));
              }
            }
            decodeString(e) {
              let t = 0;
              const r = { type: Number(e.charAt(0)) };
              if (void 0 === Se[r.type])
                throw new Error("unknown packet type " + r.type);
              if (r.type === Se.BINARY_EVENT || r.type === Se.BINARY_ACK) {
                const n = t + 1;
                for (; "-" !== e.charAt(++t) && t != e.length; );
                const s = e.substring(n, t);
                if (s != Number(s) || "-" !== e.charAt(t))
                  throw new Error("Illegal attachments");
                r.attachments = Number(s);
              }
              if ("/" === e.charAt(t + 1)) {
                const n = t + 1;
                for (; ++t; ) {
                  if ("," === e.charAt(t)) break;
                  if (t === e.length) break;
                }
                r.nsp = e.substring(n, t);
              } else r.nsp = "/";
              const n = e.charAt(t + 1);
              if ("" !== n && Number(n) == n) {
                const n = t + 1;
                for (; ++t; ) {
                  const r = e.charAt(t);
                  if (null == r || Number(r) != r) {
                    --t;
                    break;
                  }
                  if (t === e.length) break;
                }
                r.id = Number(e.substring(n, t + 1));
              }
              if (e.charAt(++t)) {
                const n = this.tryParse(e.substr(t));
                if (!Ee.isPayloadValid(r.type, n))
                  throw new Error("invalid payload");
                r.data = n;
              }
              return r;
            }
            tryParse(e) {
              try {
                return JSON.parse(e, this.reviver);
              } catch (e) {
                return !1;
              }
            }
            static isPayloadValid(e, t) {
              switch (e) {
                case Se.CONNECT:
                  return ke(t);
                case Se.DISCONNECT:
                  return void 0 === t;
                case Se.CONNECT_ERROR:
                  return "string" == typeof t || ke(t);
                case Se.EVENT:
                case Se.BINARY_EVENT:
                  return (
                    Array.isArray(t) &&
                    ("number" == typeof t[0] ||
                      ("string" == typeof t[0] && -1 === be.indexOf(t[0])))
                  );
                case Se.ACK:
                case Se.BINARY_ACK:
                  return Array.isArray(t);
              }
            }
            destroy() {
              this.reconstructor &&
                (this.reconstructor.finishedReconstruction(),
                (this.reconstructor = null));
            }
          }
          class Ce {
            constructor(e) {
              (this.packet = e), (this.buffers = []), (this.reconPack = e);
            }
            takeBinaryData(e) {
              if (
                (this.buffers.push(e),
                this.buffers.length === this.reconPack.attachments)
              ) {
                const e = _e(this.reconPack, this.buffers);
                return this.finishedReconstruction(), e;
              }
              return null;
            }
            finishedReconstruction() {
              (this.reconPack = null), (this.buffers = []);
            }
          }
          function Te(e, t, r) {
            return (
              e.on(t, r),
              function () {
                e.off(t, r);
              }
            );
          }
          const Pe = Object.freeze({
            connect: 1,
            connect_error: 1,
            disconnect: 1,
            disconnecting: 1,
            newListener: 1,
            removeListener: 1,
          });
          class Oe extends A {
            constructor(e, t, r) {
              super(),
                (this.connected = !1),
                (this.recovered = !1),
                (this.receiveBuffer = []),
                (this.sendBuffer = []),
                (this._queue = []),
                (this._queueSeq = 0),
                (this.ids = 0),
                (this.acks = {}),
                (this.flags = {}),
                (this.io = e),
                (this.nsp = t),
                r && r.auth && (this.auth = r.auth),
                (this._opts = Object.assign({}, r)),
                this.io._autoConnect && this.open();
            }
            get disconnected() {
              return !this.connected;
            }
            subEvents() {
              if (this.subs) return;
              const e = this.io;
              this.subs = [
                Te(e, "open", this.onopen.bind(this)),
                Te(e, "packet", this.onpacket.bind(this)),
                Te(e, "error", this.onerror.bind(this)),
                Te(e, "close", this.onclose.bind(this)),
              ];
            }
            get active() {
              return !!this.subs;
            }
            connect() {
              return (
                this.connected ||
                  (this.subEvents(),
                  this.io._reconnecting || this.io.open(),
                  "open" === this.io._readyState && this.onopen()),
                this
              );
            }
            open() {
              return this.connect();
            }
            send(...e) {
              return e.unshift("message"), this.emit.apply(this, e), this;
            }
            emit(e, ...t) {
              var r, n, s;
              if (Pe.hasOwnProperty(e))
                throw new Error(
                  '"' + e.toString() + '" is a reserved event name'
                );
              if (
                (t.unshift(e),
                this._opts.retries &&
                  !this.flags.fromQueue &&
                  !this.flags.volatile)
              )
                return this._addToQueue(t), this;
              const i = { type: Se.EVENT, data: t, options: {} };
              if (
                ((i.options.compress = !1 !== this.flags.compress),
                "function" == typeof t[t.length - 1])
              ) {
                const e = this.ids++,
                  r = t.pop();
                this._registerAckCallback(e, r), (i.id = e);
              }
              const a =
                  null ===
                    (n =
                      null === (r = this.io.engine) || void 0 === r
                        ? void 0
                        : r.transport) || void 0 === n
                    ? void 0
                    : n.writable,
                o =
                  this.connected &&
                  !(null === (s = this.io.engine) || void 0 === s
                    ? void 0
                    : s._hasPingExpired());
              return (
                (this.flags.volatile && !a) ||
                  (o
                    ? (this.notifyOutgoingListeners(i), this.packet(i))
                    : this.sendBuffer.push(i)),
                (this.flags = {}),
                this
              );
            }
            _registerAckCallback(e, t) {
              var r;
              const n =
                null !== (r = this.flags.timeout) && void 0 !== r
                  ? r
                  : this._opts.ackTimeout;
              if (void 0 === n) return void (this.acks[e] = t);
              const s = this.io.setTimeoutFn(() => {
                  delete this.acks[e];
                  for (let t = 0; t < this.sendBuffer.length; t++)
                    this.sendBuffer[t].id === e && this.sendBuffer.splice(t, 1);
                  t.call(this, new Error("operation has timed out"));
                }, n),
                i = (...e) => {
                  this.io.clearTimeoutFn(s), t.apply(this, e);
                };
              (i.withError = !0), (this.acks[e] = i);
            }
            emitWithAck(e, ...t) {
              return new Promise((r, n) => {
                const s = (e, t) => (e ? n(e) : r(t));
                (s.withError = !0), t.push(s), this.emit(e, ...t);
              });
            }
            _addToQueue(e) {
              let t;
              "function" == typeof e[e.length - 1] && (t = e.pop());
              const r = {
                id: this._queueSeq++,
                tryCount: 0,
                pending: !1,
                args: e,
                flags: Object.assign({ fromQueue: !0 }, this.flags),
              };
              e.push((e, ...n) => {
                if (r !== this._queue[0]) return;
                return (
                  null !== e
                    ? r.tryCount > this._opts.retries &&
                      (this._queue.shift(), t && t(e))
                    : (this._queue.shift(), t && t(null, ...n)),
                  (r.pending = !1),
                  this._drainQueue()
                );
              }),
                this._queue.push(r),
                this._drainQueue();
            }
            _drainQueue(e = !1) {
              if (!this.connected || 0 === this._queue.length) return;
              const t = this._queue[0];
              (t.pending && !e) ||
                ((t.pending = !0),
                t.tryCount++,
                (this.flags = t.flags),
                this.emit.apply(this, t.args));
            }
            packet(e) {
              (e.nsp = this.nsp), this.io._packet(e);
            }
            onopen() {
              "function" == typeof this.auth
                ? this.auth((e) => {
                    this._sendConnectPacket(e);
                  })
                : this._sendConnectPacket(this.auth);
            }
            _sendConnectPacket(e) {
              this.packet({
                type: Se.CONNECT,
                data: this._pid
                  ? Object.assign(
                      { pid: this._pid, offset: this._lastOffset },
                      e
                    )
                  : e,
              });
            }
            onerror(e) {
              this.connected || this.emitReserved("connect_error", e);
            }
            onclose(e, t) {
              (this.connected = !1),
                delete this.id,
                this.emitReserved("disconnect", e, t),
                this._clearAcks();
            }
            _clearAcks() {
              Object.keys(this.acks).forEach((e) => {
                if (!this.sendBuffer.some((t) => String(t.id) === e)) {
                  const t = this.acks[e];
                  delete this.acks[e],
                    t.withError &&
                      t.call(this, new Error("socket has been disconnected"));
                }
              });
            }
            onpacket(e) {
              if (e.nsp === this.nsp)
                switch (e.type) {
                  case Se.CONNECT:
                    e.data && e.data.sid
                      ? this.onconnect(e.data.sid, e.data.pid)
                      : this.emitReserved(
                          "connect_error",
                          new Error(
                            "It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"
                          )
                        );
                    break;
                  case Se.EVENT:
                  case Se.BINARY_EVENT:
                    this.onevent(e);
                    break;
                  case Se.ACK:
                  case Se.BINARY_ACK:
                    this.onack(e);
                    break;
                  case Se.DISCONNECT:
                    this.ondisconnect();
                    break;
                  case Se.CONNECT_ERROR:
                    this.destroy();
                    const t = new Error(e.data.message);
                    (t.data = e.data.data),
                      this.emitReserved("connect_error", t);
                }
            }
            onevent(e) {
              const t = e.data || [];
              null != e.id && t.push(this.ack(e.id)),
                this.connected
                  ? this.emitEvent(t)
                  : this.receiveBuffer.push(Object.freeze(t));
            }
            emitEvent(e) {
              if (this._anyListeners && this._anyListeners.length) {
                const t = this._anyListeners.slice();
                for (const r of t) r.apply(this, e);
              }
              super.emit.apply(this, e),
                this._pid &&
                  e.length &&
                  "string" == typeof e[e.length - 1] &&
                  (this._lastOffset = e[e.length - 1]);
            }
            ack(e) {
              const t = this;
              let r = !1;
              return function (...n) {
                r || ((r = !0), t.packet({ type: Se.ACK, id: e, data: n }));
              };
            }
            onack(e) {
              const t = this.acks[e.id];
              "function" == typeof t &&
                (delete this.acks[e.id],
                t.withError && e.data.unshift(null),
                t.apply(this, e.data));
            }
            onconnect(e, t) {
              (this.id = e),
                (this.recovered = t && this._pid === t),
                (this._pid = t),
                (this.connected = !0),
                this.emitBuffered(),
                this.emitReserved("connect"),
                this._drainQueue(!0);
            }
            emitBuffered() {
              this.receiveBuffer.forEach((e) => this.emitEvent(e)),
                (this.receiveBuffer = []),
                this.sendBuffer.forEach((e) => {
                  this.notifyOutgoingListeners(e), this.packet(e);
                }),
                (this.sendBuffer = []);
            }
            ondisconnect() {
              this.destroy(), this.onclose("io server disconnect");
            }
            destroy() {
              this.subs &&
                (this.subs.forEach((e) => e()), (this.subs = void 0)),
                this.io._destroy(this);
            }
            disconnect() {
              return (
                this.connected && this.packet({ type: Se.DISCONNECT }),
                this.destroy(),
                this.connected && this.onclose("io client disconnect"),
                this
              );
            }
            close() {
              return this.disconnect();
            }
            compress(e) {
              return (this.flags.compress = e), this;
            }
            get volatile() {
              return (this.flags.volatile = !0), this;
            }
            timeout(e) {
              return (this.flags.timeout = e), this;
            }
            onAny(e) {
              return (
                (this._anyListeners = this._anyListeners || []),
                this._anyListeners.push(e),
                this
              );
            }
            prependAny(e) {
              return (
                (this._anyListeners = this._anyListeners || []),
                this._anyListeners.unshift(e),
                this
              );
            }
            offAny(e) {
              if (!this._anyListeners) return this;
              if (e) {
                const t = this._anyListeners;
                for (let r = 0; r < t.length; r++)
                  if (e === t[r]) return t.splice(r, 1), this;
              } else this._anyListeners = [];
              return this;
            }
            listenersAny() {
              return this._anyListeners || [];
            }
            onAnyOutgoing(e) {
              return (
                (this._anyOutgoingListeners = this._anyOutgoingListeners || []),
                this._anyOutgoingListeners.push(e),
                this
              );
            }
            prependAnyOutgoing(e) {
              return (
                (this._anyOutgoingListeners = this._anyOutgoingListeners || []),
                this._anyOutgoingListeners.unshift(e),
                this
              );
            }
            offAnyOutgoing(e) {
              if (!this._anyOutgoingListeners) return this;
              if (e) {
                const t = this._anyOutgoingListeners;
                for (let r = 0; r < t.length; r++)
                  if (e === t[r]) return t.splice(r, 1), this;
              } else this._anyOutgoingListeners = [];
              return this;
            }
            listenersAnyOutgoing() {
              return this._anyOutgoingListeners || [];
            }
            notifyOutgoingListeners(e) {
              if (
                this._anyOutgoingListeners &&
                this._anyOutgoingListeners.length
              ) {
                const t = this._anyOutgoingListeners.slice();
                for (const r of t) r.apply(this, e.data);
              }
            }
          }
          function xe(e) {
            (e = e || {}),
              (this.ms = e.min || 100),
              (this.max = e.max || 1e4),
              (this.factor = e.factor || 2),
              (this.jitter = e.jitter > 0 && e.jitter <= 1 ? e.jitter : 0),
              (this.attempts = 0);
          }
          (xe.prototype.duration = function () {
            var e = this.ms * Math.pow(this.factor, this.attempts++);
            if (this.jitter) {
              var t = Math.random(),
                r = Math.floor(t * this.jitter * e);
              e = 1 & Math.floor(10 * t) ? e + r : e - r;
            }
            return 0 | Math.min(e, this.max);
          }),
            (xe.prototype.reset = function () {
              this.attempts = 0;
            }),
            (xe.prototype.setMin = function (e) {
              this.ms = e;
            }),
            (xe.prototype.setMax = function (e) {
              this.max = e;
            }),
            (xe.prototype.setJitter = function (e) {
              this.jitter = e;
            });
          class De extends A {
            constructor(e, t) {
              var r;
              super(),
                (this.nsps = {}),
                (this.subs = []),
                e && "object" == typeof e && ((t = e), (e = void 0)),
                ((t = t || {}).path = t.path || "/socket.io"),
                (this.opts = t),
                F(this, t),
                this.reconnection(!1 !== t.reconnection),
                this.reconnectionAttempts(t.reconnectionAttempts || 1 / 0),
                this.reconnectionDelay(t.reconnectionDelay || 1e3),
                this.reconnectionDelayMax(t.reconnectionDelayMax || 5e3),
                this.randomizationFactor(
                  null !== (r = t.randomizationFactor) && void 0 !== r ? r : 0.5
                ),
                (this.backoff = new xe({
                  min: this.reconnectionDelay(),
                  max: this.reconnectionDelayMax(),
                  jitter: this.randomizationFactor(),
                })),
                this.timeout(null == t.timeout ? 2e4 : t.timeout),
                (this._readyState = "closed"),
                (this.uri = e);
              const s = t.parser || n;
              (this.encoder = new s.Encoder()),
                (this.decoder = new s.Decoder()),
                (this._autoConnect = !1 !== t.autoConnect),
                this._autoConnect && this.open();
            }
            reconnection(e) {
              return arguments.length
                ? ((this._reconnection = !!e),
                  e || (this.skipReconnect = !0),
                  this)
                : this._reconnection;
            }
            reconnectionAttempts(e) {
              return void 0 === e
                ? this._reconnectionAttempts
                : ((this._reconnectionAttempts = e), this);
            }
            reconnectionDelay(e) {
              var t;
              return void 0 === e
                ? this._reconnectionDelay
                : ((this._reconnectionDelay = e),
                  null === (t = this.backoff) || void 0 === t || t.setMin(e),
                  this);
            }
            randomizationFactor(e) {
              var t;
              return void 0 === e
                ? this._randomizationFactor
                : ((this._randomizationFactor = e),
                  null === (t = this.backoff) || void 0 === t || t.setJitter(e),
                  this);
            }
            reconnectionDelayMax(e) {
              var t;
              return void 0 === e
                ? this._reconnectionDelayMax
                : ((this._reconnectionDelayMax = e),
                  null === (t = this.backoff) || void 0 === t || t.setMax(e),
                  this);
            }
            timeout(e) {
              return arguments.length
                ? ((this._timeout = e), this)
                : this._timeout;
            }
            maybeReconnectOnOpen() {
              !this._reconnecting &&
                this._reconnection &&
                0 === this.backoff.attempts &&
                this.reconnect();
            }
            open(e) {
              if (~this._readyState.indexOf("open")) return this;
              this.engine = new de(this.uri, this.opts);
              const t = this.engine,
                r = this;
              (this._readyState = "opening"), (this.skipReconnect = !1);
              const n = Te(t, "open", function () {
                  r.onopen(), e && e();
                }),
                s = (t) => {
                  this.cleanup(),
                    (this._readyState = "closed"),
                    this.emitReserved("error", t),
                    e ? e(t) : this.maybeReconnectOnOpen();
                },
                i = Te(t, "error", s);
              if (!1 !== this._timeout) {
                const e = this._timeout,
                  r = this.setTimeoutFn(() => {
                    n(), s(new Error("timeout")), t.close();
                  }, e);
                this.opts.autoUnref && r.unref(),
                  this.subs.push(() => {
                    this.clearTimeoutFn(r);
                  });
              }
              return this.subs.push(n), this.subs.push(i), this;
            }
            connect(e) {
              return this.open(e);
            }
            onopen() {
              this.cleanup(),
                (this._readyState = "open"),
                this.emitReserved("open");
              const e = this.engine;
              this.subs.push(
                Te(e, "ping", this.onping.bind(this)),
                Te(e, "data", this.ondata.bind(this)),
                Te(e, "error", this.onerror.bind(this)),
                Te(e, "close", this.onclose.bind(this)),
                Te(this.decoder, "decoded", this.ondecoded.bind(this))
              );
            }
            onping() {
              this.emitReserved("ping");
            }
            ondata(e) {
              try {
                this.decoder.add(e);
              } catch (e) {
                this.onclose("parse error", e);
              }
            }
            ondecoded(e) {
              M(() => {
                this.emitReserved("packet", e);
              }, this.setTimeoutFn);
            }
            onerror(e) {
              this.emitReserved("error", e);
            }
            socket(e, t) {
              let r = this.nsps[e];
              return (
                r
                  ? this._autoConnect && !r.active && r.connect()
                  : ((r = new Oe(this, e, t)), (this.nsps[e] = r)),
                r
              );
            }
            _destroy(e) {
              const t = Object.keys(this.nsps);
              for (const e of t) {
                if (this.nsps[e].active) return;
              }
              this._close();
            }
            _packet(e) {
              const t = this.encoder.encode(e);
              for (let r = 0; r < t.length; r++)
                this.engine.write(t[r], e.options);
            }
            cleanup() {
              this.subs.forEach((e) => e()),
                (this.subs.length = 0),
                this.decoder.destroy();
            }
            _close() {
              (this.skipReconnect = !0),
                (this._reconnecting = !1),
                this.onclose("forced close");
            }
            disconnect() {
              return this._close();
            }
            onclose(e, t) {
              var r;
              this.cleanup(),
                null === (r = this.engine) || void 0 === r || r.close(),
                this.backoff.reset(),
                (this._readyState = "closed"),
                this.emitReserved("close", e, t),
                this._reconnection && !this.skipReconnect && this.reconnect();
            }
            reconnect() {
              if (this._reconnecting || this.skipReconnect) return this;
              const e = this;
              if (this.backoff.attempts >= this._reconnectionAttempts)
                this.backoff.reset(),
                  this.emitReserved("reconnect_failed"),
                  (this._reconnecting = !1);
              else {
                const t = this.backoff.duration();
                this._reconnecting = !0;
                const r = this.setTimeoutFn(() => {
                  e.skipReconnect ||
                    (this.emitReserved("reconnect_attempt", e.backoff.attempts),
                    e.skipReconnect ||
                      e.open((t) => {
                        t
                          ? ((e._reconnecting = !1),
                            e.reconnect(),
                            this.emitReserved("reconnect_error", t))
                          : e.onreconnect();
                      }));
                }, t);
                this.opts.autoUnref && r.unref(),
                  this.subs.push(() => {
                    this.clearTimeoutFn(r);
                  });
              }
            }
            onreconnect() {
              const e = this.backoff.attempts;
              (this._reconnecting = !1),
                this.backoff.reset(),
                this.emitReserved("reconnect", e);
            }
          }
          const Ie = {};
          function Ae(e, t) {
            "object" == typeof e && ((t = e), (e = void 0));
            const r = (function (e, t = "", r) {
                let n = e;
                (r = r || ("undefined" != typeof location && location)),
                  null == e && (e = r.protocol + "//" + r.host),
                  "string" == typeof e &&
                    ("/" === e.charAt(0) &&
                      (e = "/" === e.charAt(1) ? r.protocol + e : r.host + e),
                    /^(https?|wss?):\/\//.test(e) ||
                      (e =
                        void 0 !== r ? r.protocol + "//" + e : "https://" + e),
                    (n = se(e))),
                  n.port ||
                    (/^(http|ws)$/.test(n.protocol)
                      ? (n.port = "80")
                      : /^(http|ws)s$/.test(n.protocol) && (n.port = "443")),
                  (n.path = n.path || "/");
                const s =
                  -1 !== n.host.indexOf(":") ? "[" + n.host + "]" : n.host;
                return (
                  (n.id = n.protocol + "://" + s + ":" + n.port + t),
                  (n.href =
                    n.protocol +
                    "://" +
                    s +
                    (r && r.port === n.port ? "" : ":" + n.port)),
                  n
                );
              })(e, (t = t || {}).path || "/socket.io"),
              n = r.source,
              s = r.id,
              i = r.path,
              a = Ie[s] && i in Ie[s].nsps;
            let o;
            return (
              t.forceNew || t["force new connection"] || !1 === t.multiplex || a
                ? (o = new De(n, t))
                : (Ie[s] || (Ie[s] = new De(n, t)), (o = Ie[s])),
              r.query && !t.query && (t.query = r.queryKey),
              o.socket(r.path, t)
            );
          }
          Object.assign(Ae, { Manager: De, Socket: Oe, io: Ae, connect: Ae });
          var Me = r(76),
            Le = r(7833),
            Ne = r.n(Le),
            je = "mediasoup-demo",
            Be = (function () {
              return (0, c.A)(
                function e(t) {
                  (0, o.A)(this, e),
                    t
                      ? ((this._debug = Ne()("".concat(je, ":").concat(t))),
                        (this._warn = Ne()("".concat(je, ":WARN:").concat(t))),
                        (this._error = Ne()(
                          "".concat(je, ":ERROR:").concat(t)
                        )))
                      : ((this._debug = Ne()(je)),
                        (this._warn = Ne()("".concat(je, ":WARN"))),
                        (this._error = Ne()("".concat(je, ":ERROR")))),
                    Ne().disable(),
                    (this._debug.log = console.info.bind(console)),
                    (this._warn.log = console.warn.bind(console)),
                    (this._error.log = console.error.bind(console));
                },
                [
                  {
                    key: "debug",
                    get: function () {
                      return this._debug;
                    },
                  },
                  {
                    key: "warn",
                    get: function () {
                      return this._warn;
                    },
                  },
                  {
                    key: "error",
                    get: function () {
                      return this._error;
                    },
                  },
                ]
              );
            })(),
            Fe = r(1396),
            Ue = Fe.enc.Latin1.parse(
              "6gf9Oz5Y(6fOWPP@3XPv0Mwp51yfJ0HiZW^0*!9NdUuZ*VdKmRC@f))&^!Iriw)q"
            ),
            We = Fe.enc.Latin1.parse("BHrabik^$W^y*HL@A*$4YKj(");
          function qe(e) {
            return Ve.apply(this, arguments);
          }
          function Ve() {
            return (Ve = (0, a.A)(
              u().mark(function e(t) {
                var r, n, s, i, a, o, c, d, l, p, h, m, f, g, v;
                return u().wrap(function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (
                          (r = t.roomId),
                          (n = t.secret),
                          (s = t.signalingBaseUrl),
                          (i = "call-api.videosdk.live"),
                          (a = []),
                          (o = null),
                          (c = {}),
                          (d = {}),
                          (l = {}),
                          (p = null),
                          (h = null),
                          (m = null),
                          (e.next = 12),
                          fetch(
                            "https://".concat(
                              s,
                              "/infra/v1/meetings/init-config"
                            ),
                            {
                              method: "POST",
                              headers: {
                                Authorization: n,
                                "Content-Type": "application/json",
                              },
                              body: JSON.stringify({ roomId: r }),
                            }
                          )
                            .then(function (e) {
                              return e.json();
                            })
                            .catch(function (e) {
                              return {};
                            })
                        );
                      case 12:
                        return (
                          (f = e.sent),
                          (g = f.data) &&
                            ((i = g.baseUrl),
                            (v = g.observability),
                            (a = He(g.iceServers)),
                            (o = v.jwt),
                            (c = v.traces),
                            (d = v.logs),
                            (l = v.metaData),
                            (p = g.signalingUrl),
                            (m = g.socketPath),
                            (h = g.socketUrl)),
                          e.abrupt("return", {
                            baseUrl: i,
                            iceServers: a,
                            observabilityJwt: o,
                            traces: c,
                            logs: d,
                            metaData: l,
                            signalingUrl: p,
                            socketPath: m,
                            socketUrl: h,
                          })
                        );
                      case 16:
                      case "end":
                        return e.stop();
                    }
                }, e);
              })
            )).apply(this, arguments);
          }
          function He(e) {
            try {
              var t = Fe.AES.decrypt(e, Ue, {
                iv: We,
                mode: Fe.mode.CBC,
                padding: Fe.pad.ZeroPadding,
              }).toString(Fe.enc.Utf8);
              return JSON.parse(t);
            } catch (e) {
              return [];
            }
          }
          var ze = r(2215),
            Ge = r.n(ze),
            Ke = "mediasoup-demo.user",
            $e = "mediasoup-demo.devices";
          function Je(e) {
            var t = e.displayName;
            Ge().set(Ke, { displayName: t });
          }
          function Qe() {
            return Ge().getJSON($e);
          }
          var Ye = r(2211),
            Xe = r.n(Ye),
            Ze = function (e) {
              return { type: "SET_ROOM_STATE", payload: { state: e } };
            },
            et = function (e) {
              return {
                type: "SET_ROOM_ACTIVE_SPEAKER",
                payload: { peerId: e },
              };
            },
            tt = function (e) {
              return { type: "SET_ROOM_STATS_PEER_ID", payload: { peerId: e } };
            },
            rt = function (e) {
              return {
                type: "SET_MEDIA_CAPABILITIES",
                payload: {
                  canSendMic: e.canSendMic,
                  canSendWebcam: e.canSendWebcam,
                },
              };
            },
            nt = function (e) {
              return { type: "SET_DISPLAY_NAME", payload: { displayName: e } };
            },
            st = function (e) {
              return { type: "SET_AUDIO_ONLY_STATE", payload: { enabled: e } };
            },
            it = function (e) {
              return {
                type: "SET_AUDIO_ONLY_IN_PROGRESS",
                payload: { flag: e },
              };
            },
            at = function (e) {
              return { type: "SET_AUDIO_MUTED_STATE", payload: { enabled: e } };
            },
            ot = function (e) {
              return {
                type: "SET_RESTART_ICE_IN_PROGRESS",
                payload: { flag: e },
              };
            },
            ct = function (e) {
              return { type: "ADD_PRODUCER", payload: { producer: e } };
            },
            dt = function (e) {
              return { type: "REMOVE_PRODUCER", payload: { producerId: e } };
            },
            lt = function (e, t) {
              return {
                type: "SET_PRODUCER_TRACK",
                payload: { producerId: e, track: t },
              };
            },
            ut = function (e, t) {
              return {
                type: "SET_PRODUCER_SCORE",
                payload: { producerId: e, score: t },
              };
            },
            pt = function (e) {
              return {
                type: "ADD_DATA_PRODUCER",
                payload: { dataProducer: e },
              };
            },
            ht = function (e) {
              return { type: "SET_WEBCAM_IN_PROGRESS", payload: { flag: e } };
            },
            mt = function (e) {
              return { type: "SET_SHARE_IN_PROGRESS", payload: { flag: e } };
            },
            ft = function (e) {
              return { type: "ADD_PEER", payload: { peer: e } };
            },
            gt = function (e) {
              return { type: "REMOVE_PEER", payload: { peerId: e } };
            },
            vt = function (e, t) {
              return {
                type: "SET_PEER_DISPLAY_NAME",
                payload: { displayName: e, peerId: t },
              };
            },
            _t = function (e, t) {
              return {
                type: "ADD_CONSUMER",
                payload: { consumer: e, peerId: t },
              };
            },
            yt = function (e, t) {
              return {
                type: "REMOVE_CONSUMER",
                payload: { consumerId: e, peerId: t },
              };
            },
            bt = function (e, t) {
              return {
                type: "SET_CONSUMER_PAUSED",
                payload: { consumerId: e, originator: t },
              };
            },
            wt = function (e, t) {
              return {
                type: "SET_CONSUMER_RESUMED",
                payload: { consumerId: e, originator: t },
              };
            },
            St = function (e, t, r) {
              return {
                type: "SET_CONSUMER_CURRENT_LAYERS",
                payload: { consumerId: e, spatialLayer: t, temporalLayer: r },
              };
            },
            Rt = function (e, t, r) {
              return {
                type: "SET_CONSUMER_PREFERRED_LAYERS",
                payload: { consumerId: e, spatialLayer: t, temporalLayer: r },
              };
            },
            kt = function (e, t) {
              return {
                type: "SET_CONSUMER_PRIORITY",
                payload: { consumerId: e, priority: t },
              };
            },
            Et = function (e, t) {
              return {
                type: "SET_CONSUMER_SCORE",
                payload: { consumerId: e, score: t },
              };
            },
            Ct = function (e, t) {
              return {
                type: "ADD_DATA_CONSUMER",
                payload: { dataConsumer: e, peerId: t },
              };
            },
            Tt = function (e, t) {
              return {
                type: "REMOVE_DATA_CONSUMER",
                payload: { dataConsumerId: e, peerId: t },
              };
            },
            Pt = function (e) {
              var t = e.type,
                r = void 0 === t ? "info" : t,
                n = e.text,
                s = e.title,
                i = e.timeout;
              if (!i)
                switch (r) {
                  case "info":
                    i = 3e3;
                    break;
                  case "error":
                    i = 5e3;
                }
              var a = {
                id: Xe()({ length: 6 }).toLowerCase(),
                type: r,
                title: s,
                text: n,
                timeout: i,
              };
              return function (e) {
                e(
                  (function (e) {
                    return {
                      type: "ADD_NOTIFICATION",
                      payload: { notification: e },
                    };
                  })(a)
                ),
                  setTimeout(function () {
                    e({
                      type: "REMOVE_NOTIFICATION",
                      payload: { notificationId: a.id },
                    });
                  }, i);
              };
            },
            Ot = r(7007),
            xt = r(1803),
            Dt = r(9027),
            It = r(7080),
            At = "CONNECTING",
            Mt = "CONNECTED",
            Lt = "RECONNECTING",
            Nt = "DISCONNECTED",
            jt = r(5414),
            Bt = r(2107),
            Ft = r(5071),
            Ut = r(5458),
            Wt = Array(32);
          function qt() {
            for (var e = 0; e < 16; e++)
              (Wt[e] = Math.floor(16 * Math.random()) + 48),
                Wt[e] >= 58 && (Wt[e] += 39);
            return String.fromCharCode.apply(null, Wt.slice(0, 16));
          }
          function Vt() {
            var e = (1e6 * new Date().getTime()).toString().padEnd(19, "0");
            return Number(e);
          }
          function Ht(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function zt(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? Ht(Object(r), !0).forEach(function (t) {
                    (0, d.A)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : Ht(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Gt = (function () {
            return (0, c.A)(
              function e(t) {
                var r = this,
                  n = t.roomId,
                  s = t.peerId,
                  i = t.sdkName,
                  a = t.observabilityJwt,
                  c = t.metaData,
                  d = t.traces;
                (0, o.A)(this, e),
                  (this._traceId = (function () {
                    for (var e = 0; e < 32; e++)
                      (Wt[e] = Math.floor(16 * Math.random()) + 48),
                        Wt[e] >= 58 && (Wt[e] += 39);
                    return String.fromCharCode.apply(null, Wt.slice(0, 32));
                  })()),
                  (this._rootSpanId = qt()),
                  (this._observabilityJwt = a),
                  (this._tracesEnabled = d.enabled),
                  (this._tracesEndpoint = d.endPoint);
                var l = (function (e) {
                  for (
                    var t = "0123456789abcdefghijklmnopqrstuvwxyz",
                      r = "",
                      n = e;
                    n > 0;
                    n--
                  )
                    r += t[Math.floor(36 * Math.random())];
                  return r;
                })(8);
                (this._spans = []),
                  (this._traceJSON = {
                    resourceSpans: [
                      {
                        resource: {
                          attributes: [
                            {
                              key: "service.name",
                              value: { stringValue: "videosdk-otel" },
                            },
                            {
                              key: "telemetry.sdk.language",
                              value: { stringValue: "webjs" },
                            },
                            {
                              key: "telemetry.sdk.name",
                              value: { stringValue: "opentelemetry" },
                            },
                            {
                              key: "telemetry.sdk.version",
                              value: { stringValue: "1.14.0" },
                            },
                            {
                              key: "sdk-version",
                              value: { stringValue: "0.2.2" },
                            },
                          ],
                          droppedAttributesCount: 0,
                        },
                        scopeSpans: [{ scope: { name: l }, spans: [] }],
                      },
                    ],
                  }),
                  this._tracesEnabled &&
                    (this.addRootSpan(n, s, i, c),
                    setInterval(function () {
                      r.processQueue();
                    }, 4e3));
              },
              [
                {
                  key: "addRootSpan",
                  value: function (e, t, r, n) {
                    var s = {
                      traceId: this._traceId,
                      spanId: this._rootSpanId,
                      name: "room_"
                        .concat(e, "_peer_")
                        .concat(t, "_sdk_")
                        .concat(r),
                      kind: 1,
                      startTimeUnixNano: Vt(),
                      endTimeUnixNano: Vt(),
                      attributes: [
                        { key: "roomId", value: { stringValue: e } },
                        { key: "peerId", value: { stringValue: t } },
                        { key: "sdkName", value: { stringValue: r } },
                        { key: "userId", value: { stringValue: n.userId } },
                        { key: "email", value: { stringValue: n.email } },
                      ],
                      droppedAttributesCount: 0,
                      events: [],
                      droppedEventsCount: 0,
                      status: { code: 0 },
                      links: [],
                      droppedLinksCount: 0,
                    };
                    this._spans.push(s);
                  },
                },
                {
                  key: "addSpanToTrace",
                  value: function (e) {
                    this._spans.push(e);
                  },
                },
                {
                  key: "trace",
                  value: function (e) {
                    var t = e.spanName,
                      r = e.attributes,
                      n = void 0 === r ? {} : r,
                      i = e.span,
                      a = void 0 === i ? void 0 : i;
                    if (this._tracesEnabled) {
                      var o = qt(),
                        c = Vt(),
                        d = {
                          traceId: this._traceId,
                          spanId: o,
                          parentSpanId: a || this._rootSpanId,
                          name: t,
                          kind: 1,
                          startTimeUnixNano: c,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0,
                        };
                      return (
                        Object.keys(n).length > 0 &&
                          (d.attributes = Object.entries(n).map(function (e) {
                            var t = (0, s.A)(e, 2);
                            return { key: t[0], value: { stringValue: t[1] } };
                          })),
                        this.addSpanToTrace(d),
                        o
                      );
                    }
                  },
                },
                {
                  key: "traceAutoComplete",
                  value: function (e) {
                    var t = e.spanName,
                      r = e.attributes,
                      n = void 0 === r ? {} : r,
                      i = e.status,
                      a = void 0 === i ? 1 : i,
                      o = e.span,
                      c = void 0 === o ? void 0 : o,
                      d = e.message,
                      l = void 0 === d ? "SUCCESS" : d;
                    if (this._tracesEnabled) {
                      var u = qt(),
                        p = Vt(),
                        h = Vt(),
                        m = {
                          traceId: this._traceId,
                          spanId: u,
                          parentSpanId: c || this._rootSpanId,
                          name: t,
                          kind: 1,
                          startTimeUnixNano: p,
                          endTimeUnixNano: h,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0,
                          status: { code: a, message: l },
                        };
                      Object.keys(n).length > 0 &&
                        (m.attributes = Object.entries(n).map(function (e) {
                          var t = (0, s.A)(e, 2);
                          return { key: t[0], value: { stringValue: t[1] } };
                        })),
                        this.addSpanToTrace(m);
                    }
                  },
                },
                {
                  key: "completeSpan",
                  value: function (e) {
                    var t = e.span,
                      r = e.status,
                      n = e.message,
                      i = e.attributes,
                      a = void 0 === i ? {} : i;
                    if (this._tracesEnabled) {
                      var o = Vt();
                      this._spans = this._spans.map(function (e) {
                        if (e.spanId !== t) return e;
                        var i = Object.entries(a).map(function (e) {
                          var t = (0, s.A)(e, 2);
                          return { key: t[0], value: { stringValue: t[1] } };
                        });
                        return (
                          (e.attributes = e.attributes
                            ? [].concat((0, Ut.A)(e.attributes), (0, Ut.A)(i))
                            : i),
                          zt(
                            zt({}, e),
                            {},
                            {
                              status: { code: r, message: n },
                              endTimeUnixNano: o,
                            }
                          )
                        );
                      });
                    }
                  },
                },
                {
                  key: "processQueue",
                  value: function () {
                    var e = this;
                    if (this._spans.length > 0) {
                      (this._traceJSON.resourceSpans[0].scopeSpans[0].spans =
                        this._spans),
                        (this._spans = []);
                      var t = {
                        method: "POST",
                        headers: {
                          Authorization: this._observabilityJwt,
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify(this._traceJSON),
                      };
                      fetch(this._tracesEndpoint, t)
                        .then(
                          (function () {
                            var t = (0, a.A)(
                              u().mark(function t(r) {
                                return u().wrap(function (t) {
                                  for (;;)
                                    switch ((t.prev = t.next)) {
                                      case 0:
                                        return (
                                          (e._traceJSON.resourceSpans[0].scopeSpans[0].spans =
                                            []),
                                          (t.next = 3),
                                          r.text()
                                        );
                                      case 3:
                                        return t.abrupt("return", t.sent);
                                      case 4:
                                      case "end":
                                        return t.stop();
                                    }
                                }, t);
                              })
                            );
                            return function (e) {
                              return t.apply(this, arguments);
                            };
                          })()
                        )
                        .then(function (e) {})
                        .catch(function (t) {
                          (e._spans =
                            e._traceJSON.resourceSpans[0].scopeSpans[0].spans),
                            console.error(
                              "There was a problem with the POST request:",
                              t
                            );
                        });
                    }
                  },
                },
              ]
            );
          })();
          function Kt(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function $t(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? Kt(Object(r), !0).forEach(function (t) {
                    (0, d.A)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : Kt(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Jt = (function () {
              return (0, c.A)(
                function e(t) {
                  var r = t.roomId,
                    n = t.peerId,
                    s = t.logs,
                    i = t.observabilityJwt,
                    a = t.deviceInfo,
                    c = t.sessionId,
                    d = t.debugMode;
                  (0, o.A)(this, e);
                  var l = a.browserUserAgent,
                    u = a.deviceUserAgent,
                    p = a.platform;
                  (this._peerId = n),
                    (this._roomId = r),
                    (this._logs = s),
                    (this._observabilityJwt = i),
                    (this._deviceInfo = a),
                    (this._sessionId = c),
                    (this._debugMode = d),
                    (this.browserOrDeviceInfo = l
                      ? {
                          browserName: l.browser.name,
                          browserVersion: l.browser.version,
                          osName: l.os.name,
                          osVersion: l.os.version,
                          platform: p,
                        }
                      : u
                      ? $t({ platform: p }, u)
                      : null);
                },
                [
                  {
                    key: "pushLogs",
                    value:
                      ((e = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a, o, c, d;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r = t.logType),
                                      (n = t.logText),
                                      (s = t.attributes),
                                      (i = t.dashboardLog),
                                      (a = void 0 !== i && i),
                                      (o = this._logs),
                                      (c = o.enabled),
                                      (d = o.endPoint),
                                      !c)
                                    ) {
                                      e.next = 8;
                                      break;
                                    }
                                    return (
                                      (e.next = 5),
                                      fetch(d, {
                                        method: "POST",
                                        headers: {
                                          Authorization: this._observabilityJwt,
                                          "Content-Type": "application/json",
                                        },
                                        body: JSON.stringify({
                                          logType: r,
                                          logText: n,
                                          attributes: $t(
                                            $t({}, s),
                                            {},
                                            {
                                              roomId: this._roomId,
                                              peerId: this._peerId,
                                              SDK: "".concat(
                                                this._deviceInfo.sdkType,
                                                "-sdk"
                                              ),
                                              SDK_VERSION:
                                                this._deviceInfo.sdkVersion,
                                              sessionId: this._sessionId,
                                            },
                                            this.browserOrDeviceInfo
                                          ),
                                          debugMode: this._debugMode,
                                          dashboardLog: a,
                                        }),
                                      })
                                        .then(function (e) {
                                          return e.json();
                                        })
                                        .catch(function (e) {
                                          return console.log("error", e), {};
                                        })
                                    );
                                  case 5:
                                    return e.abrupt("return", e.sent);
                                  case 8:
                                    return e.abrupt("return", null);
                                  case 9:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (t) {
                        return e.apply(this, arguments);
                      }),
                  },
                ]
              );
              var e;
            })(),
            Qt = r(4973),
            Yt = r(388),
            Xt = r(3954),
            Zt = r(5501),
            er = r(3662);
          function tr() {
            try {
              var e = !Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function () {})
              );
            } catch (e) {}
            return (tr = function () {
              return !!e;
            })();
          }
          function rr(e) {
            var t = "function" == typeof Map ? new Map() : void 0;
            return (
              (rr = function (e) {
                if (
                  null === e ||
                  !(function (e) {
                    try {
                      return (
                        -1 !==
                        Function.toString.call(e).indexOf("[native code]")
                      );
                    } catch (t) {
                      return "function" == typeof e;
                    }
                  })(e)
                )
                  return e;
                if ("function" != typeof e)
                  throw new TypeError(
                    "Super expression must either be null or a function"
                  );
                if (void 0 !== t) {
                  if (t.has(e)) return t.get(e);
                  t.set(e, r);
                }
                function r() {
                  return (function (e, t, r) {
                    if (tr()) return Reflect.construct.apply(null, arguments);
                    var n = [null];
                    n.push.apply(n, t);
                    var s = new (e.bind.apply(e, n))();
                    return r && (0, er.A)(s, r.prototype), s;
                  })(e, arguments, (0, Xt.A)(this).constructor);
                }
                return (
                  (r.prototype = Object.create(e.prototype, {
                    constructor: {
                      value: r,
                      enumerable: !1,
                      writable: !0,
                      configurable: !0,
                    },
                  })),
                  (0, er.A)(r, e)
                );
              }),
              rr(e)
            );
          }
          function nr(e, t, r) {
            return (
              (t = (0, Xt.A)(t)),
              (0, Yt.A)(
                e,
                sr()
                  ? Reflect.construct(t, r || [], (0, Xt.A)(e).constructor)
                  : t.apply(e, r)
              )
            );
          }
          function sr() {
            try {
              var e = !Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function () {})
              );
            } catch (e) {}
            return (sr = function () {
              return !!e;
            })();
          }
          var ir,
            ar = (function (e) {
              function t(e, r) {
                var n;
                return (
                  (0, o.A)(this, t),
                  (n = nr(this, t, [r || "an error has occured"])),
                  (0, d.A)(n, "code", void 0),
                  (n.name = "VideoSdkError"),
                  (n.code = e),
                  n
                );
              }
              return (0, Zt.A)(t, e), (0, c.A)(t);
            })(rr(Error));
          !(function (e) {
            (e[(e.InvalidKey = 0)] = "InvalidKey"),
              (e[(e.MissingKey = 1)] = "MissingKey"),
              (e[(e.InternalError = 2)] = "InternalError");
          })(ir || (ir = {}));
          var or = (function (e) {
              function t(e) {
                var r;
                return (
                  (0, o.A)(this, t),
                  ((r = nr(this, t, [
                    21,
                    null != e ? e : "device is unsupported",
                  ])).name = "DeviceUnsupportedError"),
                  r
                );
              }
              return (0, Zt.A)(t, e), (0, c.A)(t);
            })(ar),
            cr = r(1806),
            dr = r(6746),
            lr = r(8278);
          function ur(e, t) {
            return e ? ("audio" == t ? "shareAudio" : "share") : t;
          }
          function pr(e, t) {
            var r =
              ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
              e["@@iterator"];
            if (!r) {
              if (
                Array.isArray(e) ||
                (r = (function (e, t) {
                  if (e) {
                    if ("string" == typeof e) return hr(e, t);
                    var r = {}.toString.call(e).slice(8, -1);
                    return (
                      "Object" === r &&
                        e.constructor &&
                        (r = e.constructor.name),
                      "Map" === r || "Set" === r
                        ? Array.from(e)
                        : "Arguments" === r ||
                          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                        ? hr(e, t)
                        : void 0
                    );
                  }
                })(e)) ||
                (t && e && "number" == typeof e.length)
              ) {
                r && (e = r);
                var n = 0,
                  s = function () {};
                return {
                  s,
                  n: function () {
                    return n >= e.length
                      ? { done: !0 }
                      : { done: !1, value: e[n++] };
                  },
                  e: function (e) {
                    throw e;
                  },
                  f: s,
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var i,
              a = !0,
              o = !1;
            return {
              s: function () {
                r = r.call(e);
              },
              n: function () {
                var e = r.next();
                return (a = e.done), e;
              },
              e: function (e) {
                (o = !0), (i = e);
              },
              f: function () {
                try {
                  a || null == r.return || r.return();
                } finally {
                  if (o) throw i;
                }
              },
            };
          }
          function hr(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          function mr() {
            try {
              var e = !Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function () {})
              );
            } catch (e) {}
            return (mr = function () {
              return !!e;
            })();
          }
          var fr = (function (e) {
            function t(e) {
              var r, n, s, i;
              return (
                (0, o.A)(this, t),
                (n = this),
                (s = t),
                (s = (0, Xt.A)(s)),
                ((r = (0, Yt.A)(
                  n,
                  mr()
                    ? Reflect.construct(s, i || [], (0, Xt.A)(n).constructor)
                    : s.apply(n, i)
                )).onWorkerMessage = function (e) {
                  var t,
                    n = e.data,
                    s = n.kind,
                    i = n.data;
                  switch (s) {
                    case "error":
                      console.error(i.error.message),
                        r.emit(dr.KS.EncryptionError, i.error);
                      break;
                    case "initAck":
                      i.enabled &&
                        r.keyProvider.getKeys().forEach(function (e) {
                          r.postKey(e);
                        });
                      break;
                    case "enable":
                      if (
                        (i.enabled &&
                          r.keyProvider.getKeys().forEach(function (e) {
                            r.postKey(e);
                          }),
                        r.encryptionEnabled !== i.enabled &&
                          i.participantIdentity === r.room._peerId)
                      )
                        r.emit(
                          dr.KS.ParticipantEncryptionStatusChanged,
                          i.enabled,
                          r.room.localParticipant
                        ),
                          (r.encryptionEnabled = i.enabled);
                      else if (i.participantIdentity) {
                        var a =
                          null === (t = r.room) || void 0 === t
                            ? void 0
                            : t.getParticipantByIdentity(i.participantIdentity);
                        if (!a)
                          throw TypeError(
                            "couldn't set encryption status, participant not found".concat(
                              i.participantIdentity
                            )
                          );
                        r.emit(
                          dr.KS.ParticipantEncryptionStatusChanged,
                          i.enabled,
                          a
                        );
                      }
                      break;
                    case "ratchetKey":
                      r.keyProvider.emit(
                        dr.fo.KeyRatcheted,
                        i.material,
                        i.keyIndex
                      );
                      break;
                    case "e2eeStateChange":
                      r.emit(dr.KS.E2EEStateChange, i);
                      break;
                    default:
                      console.log("unknown message kind", e);
                  }
                }),
                (r.onWorkerError = function (e) {
                  var t;
                  console.error("Worker encountered an error:", e),
                    console.error("Error message:", e.message),
                    console.error("Error filename:", e.filename),
                    console.error("Error line number:", e.lineno),
                    console.error(
                      "Error stack:",
                      null === (t = e.error) || void 0 === t ? void 0 : t.stack
                    );
                }),
                (r.keyProvider = e.keyProvider),
                (r.worker = e.worker),
                (r.encryptionEnabled = !1),
                r
              );
            }
            return (
              (0, Zt.A)(t, e),
              (0, c.A)(t, [
                {
                  key: "setup",
                  value: function (e) {
                    if (!(0, lr.Ag)())
                      throw new or(
                        "tried to setup end-to-end encryption on an unsupported browser"
                      );
                    if ((console.info("setting up e2ee"), e !== this.room)) {
                      (this.room = e),
                        this.setupEventListeners(e, this.keyProvider),
                        this.handleE2EEManagerEvents();
                      var t = {
                        kind: "init",
                        data: {
                          keyProviderOptions: this.keyProvider.getOptions(),
                        },
                      };
                      console.log("msg", t),
                        this.worker &&
                          (console.info("initializing worker", {
                            worker: this.worker,
                          }),
                          (this.worker.onmessage = this.onWorkerMessage),
                          (this.worker.onerror = this.onWorkerError),
                          this.worker.postMessage(t));
                    }
                  },
                },
                {
                  key: "setParticipantCryptorEnabled",
                  value: function (e, t) {
                    console.debug(
                      "set e2ee to ".concat(e, " for participant ").concat(t)
                    ),
                      this.postEnable(e, t);
                  },
                },
                {
                  key: "setSifTrailer",
                  value: function (e) {
                    e && 0 !== e.length
                      ? this.postSifTrailer(e)
                      : console.warn(
                          "ignoring server sent trailer as it's empty"
                        );
                  },
                },
                {
                  key: "setupEventListeners",
                  value: function (e, t) {
                    var r = this;
                    t.on(dr.fo.SetKey, function (e) {
                      console.log("### keyInfo", e), r.postKey(e);
                    }).on(dr.fo.RatchetRequest, function (e, t) {
                      return r.postRatchetRequest(e, t);
                    });
                  },
                },
                {
                  key: "postRatchetRequest",
                  value: function (e, t) {
                    if (!this.worker)
                      throw Error("could not ratchet key, worker is missing");
                    var r = {
                      kind: "ratchetRequest",
                      data: { participantIdentity: e, keyIndex: t },
                    };
                    this.worker.postMessage(r);
                  },
                },
                {
                  key: "postKey",
                  value: function (e) {
                    var t = e.key,
                      r = e.participantIdentity,
                      n = e.keyIndex;
                    if (!this.worker)
                      throw Error("could not set key, worker is missing");
                    var s = {
                      kind: "setKey",
                      data: {
                        participantIdentity: r,
                        isPublisher: r === this.room._peerId,
                        key: t,
                        keyIndex: n,
                      },
                    };
                    this.worker.postMessage(s);
                  },
                },
                {
                  key: "postEnable",
                  value: function (e, t) {
                    if (!this.worker)
                      throw new ReferenceError(
                        "failed to enable e2ee, worker is not ready"
                      );
                    var r = {
                      kind: "enable",
                      data: { enabled: e, participantIdentity: t },
                    };
                    this.worker.postMessage(r);
                  },
                },
                {
                  key: "postRTPMap",
                  value: function (e) {
                    var t;
                    if (!this.worker)
                      throw TypeError(
                        "could not post rtp map, worker is missing"
                      );
                    if (
                      !(null === (t = this.room) || void 0 === t
                        ? void 0
                        : t._peerId)
                    )
                      throw TypeError(
                        "could not post rtp map, local participant identity is missing"
                      );
                    var r = {
                      kind: "setRTPMap",
                      data: { map: e, participantIdentity: this.room._peerId },
                    };
                    this.worker.postMessage(r);
                  },
                },
                {
                  key: "postSifTrailer",
                  value: function (e) {
                    if (!this.worker)
                      throw Error(
                        "could not post SIF trailer, worker is missing"
                      );
                    var t = { kind: "setSifTrailer", data: { trailer: e } };
                    this.worker.postMessage(t);
                  },
                },
                {
                  key: "setupE2EEReceiver",
                  value: function (e, t) {
                    var r;
                    this.handleReceiver(
                      e,
                      e.rtpReceiver,
                      e.track.id,
                      t,
                      this.extractCodec(e.rtpParameters.codecs),
                      ur(
                        null === (r = e.appData) || void 0 === r
                          ? void 0
                          : r.share,
                        e.kind
                      )
                    );
                  },
                },
                {
                  key: "setupE2EESender",
                  value: function (e) {
                    var t;
                    e
                      ? this.handleSender(
                          e.rtpSender,
                          e.track.id,
                          this.extractCodec(e.rtpParameters.codecs),
                          ur(
                            null === (t = e.appData) || void 0 === t
                              ? void 0
                              : t.share,
                            e.kind
                          ),
                          this.room._peerId
                        )
                      : console.error(
                          "Producer is required to setup E2EE sender"
                        );
                  },
                },
                {
                  key: "handleReceiver",
                  value:
                    ((r = (0, a.A)(
                      u().mark(function e(t, r, n, s, i, a) {
                        var o, c, d, l, p, h;
                        return u().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (this.worker) {
                                    e.next = 2;
                                    break;
                                  }
                                  return e.abrupt("return");
                                case 2:
                                  if (!(0, lr.Wm)()) {
                                    e.next = 7;
                                    break;
                                  }
                                  (o = {
                                    kind: "decode",
                                    participantIdentity: s,
                                    trackId: t.track.id,
                                    codec: i,
                                  }),
                                    (r.transform = new RTCRtpScriptTransform(
                                      this.worker,
                                      o
                                    )),
                                    (e.next = 18);
                                  break;
                                case 7:
                                  if (!(cr.$Q in r) || !i) {
                                    e.next = 11;
                                    break;
                                  }
                                  return (
                                    (d = {
                                      kind: "updateCodec",
                                      data: {
                                        trackId: n,
                                        codec: i,
                                        participantIdentity: s,
                                      },
                                    }),
                                    this.worker.postMessage(d),
                                    e.abrupt("return")
                                  );
                                case 11:
                                  if (
                                    ((l = r.writableStream),
                                    (p = r.readableStream),
                                    l && p)
                                  ) {
                                    e.next = 16;
                                    break;
                                  }
                                  return (
                                    console.error(
                                      "no writable or readable stream"
                                    ),
                                    e.abrupt("return")
                                  );
                                case 16:
                                  (h = {
                                    kind: "decode",
                                    data: {
                                      readableStream: p,
                                      writableStream: l,
                                      trackId: n,
                                      codec: i,
                                      participantIdentity: s,
                                      mediaKind: a,
                                      peerId:
                                        null === (c = t.appData) || void 0 === c
                                          ? void 0
                                          : c.peerId,
                                    },
                                  }),
                                    this.worker.postMessage(h, [p, l]);
                                case 18:
                                  r[cr.$Q] = !0;
                                case 19:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e, t, n, s, i, a) {
                      return r.apply(this, arguments);
                    }),
                },
                {
                  key: "handleSender",
                  value: function (e, t, r, n, s) {
                    var i;
                    if (!(cr.$Q in e) && this.worker) {
                      if (
                        !(null === (i = this.room) || void 0 === i
                          ? void 0
                          : i._peerId) ||
                        "" === this.room._peerId
                      )
                        throw TypeError(
                          "local identity needs to be known in order to set up encrypted sender"
                        );
                      if ((0, lr.Wm)()) {
                        console.info("### initialize script transform");
                        var a = {
                          kind: "encode",
                          participantIdentity: this.room._peerId,
                          trackId: t,
                          codec: r,
                          mediaKind: n,
                          peerId: s,
                        };
                        e.transform = new RTCRtpScriptTransform(this.worker, a);
                      } else
                        try {
                          var o = e.senderStreams;
                          if (o) {
                            var c = {
                              kind: "encode",
                              data: {
                                readableStream: o.readable,
                                writableStream: o.writable,
                                codec: r,
                                trackId: t,
                                participantIdentity: this.room._peerId,
                                mediaKind: n,
                                peerId: s,
                              },
                            };
                            this.worker.postMessage(c, [
                              o.readable,
                              o.writable,
                            ]);
                          } else console.error("Error no sender streams found");
                        } catch (e) {
                          console.log("Error in handle sender ", e);
                        }
                      e[cr.$Q] = !0;
                    } else console.error("### sender already set up");
                  },
                },
                {
                  key: "handleE2EEManagerEvents",
                  value: function () {
                    var e = this;
                    this.on("NEW_CONSUMER", function (t) {
                      var r = t.consumer,
                        n = t.peerId;
                      console.log("NEW_CONSUMER", r), e.setupE2EEReceiver(r, n);
                    }),
                      this.on("NEW_PRODUCER", function (t) {
                        e.setupE2EESender(t);
                      });
                  },
                },
                {
                  key: "extractCodec",
                  value: function (e) {
                    var t,
                      r = pr(e);
                    try {
                      for (r.s(); !(t = r.n()).done; ) {
                        var n = t.value,
                          s = n.mimeType.split("/")[1].toLowerCase();
                        if ("audio" === this.kind) {
                          if (cr.Ts.includes(s)) {
                            n = s;
                            break;
                          }
                        } else if (cr.ue.includes(s)) {
                          n = s;
                          break;
                        }
                      }
                    } catch (e) {
                      r.e(e);
                    } finally {
                      r.f();
                    }
                    return "";
                  },
                },
              ])
            );
            var r;
          })(Ot.EventEmitter);
          function gr() {
            return vr.apply(this, arguments);
          }
          function vr() {
            return (vr = (0, a.A)(
              u().mark(function e() {
                var t, r, n, s;
                return u().wrap(function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (
                          (e.next = 2),
                          fetch("https://cdn.videosdk.live/e2ee/bundle.js")
                        );
                      case 2:
                        if ((t = e.sent).ok) {
                          e.next = 5;
                          break;
                        }
                        throw new Error(
                          "Failed to load worker script: ".concat(t.statusText)
                        );
                      case 5:
                        return (e.next = 7), t.text();
                      case 7:
                        return (
                          (r = e.sent),
                          (n = new Blob([r], {
                            type: "application/javascript",
                          })),
                          (s = URL.createObjectURL(n)),
                          e.abrupt("return", new Worker(s))
                        );
                      case 11:
                      case "end":
                        return e.stop();
                    }
                }, e);
              })
            )).apply(this, arguments);
          }
          var _r = r(9633);
          function yr(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function br(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? yr(Object(r), !0).forEach(function (t) {
                    (0, d.A)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : yr(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          function wr(e, t) {
            var r =
              ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
              e["@@iterator"];
            if (!r) {
              if (
                Array.isArray(e) ||
                (r = (function (e, t) {
                  if (e) {
                    if ("string" == typeof e) return Sr(e, t);
                    var r = {}.toString.call(e).slice(8, -1);
                    return (
                      "Object" === r &&
                        e.constructor &&
                        (r = e.constructor.name),
                      "Map" === r || "Set" === r
                        ? Array.from(e)
                        : "Arguments" === r ||
                          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                        ? Sr(e, t)
                        : void 0
                    );
                  }
                })(e)) ||
                (t && e && "number" == typeof e.length)
              ) {
                r && (e = r);
                var n = 0,
                  s = function () {};
                return {
                  s,
                  n: function () {
                    return n >= e.length
                      ? { done: !0 }
                      : { done: !1, value: e[n++] };
                  },
                  e: function (e) {
                    throw e;
                  },
                  f: s,
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var i,
              a = !0,
              o = !1;
            return {
              s: function () {
                r = r.call(e);
              },
              n: function () {
                var e = r.next();
                return (a = e.done), e;
              },
              e: function (e) {
                (o = !0), (i = e);
              },
              f: function () {
                try {
                  a || null == r.return || r.return();
                } finally {
                  if (o) throw i;
                }
              },
            };
          }
          function Sr(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          function Rr(e, t) {
            (function (e, t) {
              if (t.has(e))
                throw new TypeError(
                  "Cannot initialize the same private elements twice on an object"
                );
            })(e, t),
              t.add(e);
          }
          var kr,
            Er = {
              sd: {
                low: { s: 0, t: 2 },
                med: { s: 0, t: 2 },
                high: { s: 1, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 },
              },
              hd: {
                low: { s: 0, t: 2 },
                med: { s: 1, t: 2 },
                high: { s: 2, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 },
              },
            },
            Cr = {
              qvga: { width: { ideal: 320 }, height: { ideal: 240 } },
              vga: { width: { ideal: 640 }, height: { ideal: 480 } },
              sd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 },
              },
              hd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 },
              },
            },
            Tr = {
              sd: [
                { scaleResolutionDownBy: 6 },
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
              ],
              hd: [
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
                { scaleResolutionDownBy: 1 },
              ],
            },
            Pr = [{ scalabilityMode: "S3T3_KEY" }],
            Or = [{ dtx: !0, maxFramerate: 30 }],
            xr = [{ scalabilityMode: "S3T3", dtx: !0 }],
            Dr = new Be("RoomClient"),
            Ir = new WeakSet(),
            Ar = (function () {
              return (0, c.A)(
                function e(t) {
                  var r,
                    n,
                    s = t.roomId,
                    i = t.peerId,
                    a = t.secret,
                    c = t.displayName,
                    l = t.device,
                    u = t.handlerName,
                    p = t.useSimulcast,
                    h = t.forceTcp,
                    m = t.mode,
                    f = t.forceH264,
                    g = t.forceVP9,
                    v = t.svc,
                    _ = t.datachannel,
                    y = t.externalVideo,
                    b = t.micEnabled,
                    w = t.webcamEnabled,
                    S = t.maxResolution,
                    R = t.useSpartialLayerAnalytics,
                    k = t._deviceInfo,
                    E = t.customCameraVideoTrack,
                    C = t.customMicrophoneAudioTrack,
                    T = t.autoConsume,
                    P = t.preferredProtocol,
                    O = t.signalingBaseUrl,
                    x = t.metaData,
                    D = t.defaultCameraIndex,
                    I = t.debugMode,
                    A = t.keyProvider;
                  switch (
                    ((0, o.A)(this, e),
                    Rr(this, Ir),
                    (0, d.A)(this, "e2eeManager", null),
                    Dr.debug(
                      'constructor() [roomId:"%s", peerId:"%s", displayName:"%s", device:%s]',
                      s,
                      i,
                      c,
                      l.flag
                    ),
                    (this.useSpartialLayerAnalytics = R || !1),
                    (this._deviceInfo = k),
                    (this._eventEmitter = new Ot.EventEmitter()),
                    (this._closed = !1),
                    (this._displayName = c),
                    (this._device = l),
                    (this._forceTcp = h),
                    (this._preferredProtocol = P),
                    m)
                  ) {
                    case Bt.nI.CONFERENCE:
                    case Bt.nI.SEND_AND_RECV:
                      (r = !0), (n = !0);
                      break;
                    case Bt.nI.RECV_ONLY:
                      (r = !1), (n = !0);
                      break;
                    default:
                      (r = !1), (n = !1);
                  }
                  if (
                    ((this._mode = m),
                    (this._produce = r),
                    (this._consume = n),
                    (this._useDataChannel = _),
                    (this._forceH264 = Boolean(f)),
                    (this._forceVP9 = Boolean(g)),
                    (this._micEnabled = Boolean(b)),
                    (this._webcamEnabled = Boolean(w)),
                    (this._externalVideo = null),
                    (this._externalVideoStream = null),
                    (this._nextDataChannelTestNumber = 0),
                    y &&
                      ((this._externalVideo = document.createElement("video")),
                      (this._externalVideo.controls = !0),
                      (this._externalVideo.loop = !0),
                      this._externalVideo.setAttribute("playsinline", ""),
                      (this._externalVideo.src = y),
                      this._externalVideo.play().catch(function (e) {
                        return Dr.warn("externalVideo.play() failed:%o", e);
                      })),
                    (this._handlerName = u),
                    (this._useSimulcast = p),
                    (this._socketUrl = ""),
                    (this._secret = a),
                    (this._peerId = i),
                    (this._roomId = s),
                    (this._baseUrl = ""),
                    (this._webSocket = null),
                    (this._mediasoupDevice = null),
                    (this._sendTransport = null),
                    (this._recvTransport = null),
                    (this._micProducer = null),
                    (this._webcamProducer = null),
                    (this._shareProducer = null),
                    (this._shareAudioProducer = null),
                    (this._chatDataProducer = null),
                    (this._botDataProducer = null),
                    (this._consumers = new Map()),
                    (this._dataConsumers = new Map()),
                    (this._mics = new Map()),
                    (this._mic = { device: null }),
                    (this._webcams = new Map()),
                    (this._webcam = { device: null, resolution: S || "hd" }),
                    (this._pinnedParticipants = new Map()),
                    v &&
                      ((Pr[0].scalabilityMode = "".concat(v, "_KEY")),
                      (xr[0].scalabilityMode = v)),
                    (this.customCameraVideoTrack = E),
                    (this.customMicrophoneAudioTrack = C),
                    (this._autoConsume = T),
                    (this._iceServers = []),
                    (this._metrics = new jt.VideoSDKMetrics({
                      refreshEvery: 1e3,
                      startAfter: 1e3,
                      verbose: !1,
                    })),
                    (this._stats = {}),
                    (this._latestStats = {}),
                    (this._isWebsocketAlive = !1),
                    (this._pingWebsocketInterval = null),
                    (this._pingInternetInterval = null),
                    (this._pingWebsocketFailedCounter = 0),
                    (this._pongInternetCounter = 0),
                    (this._transportState = ""),
                    (this._openTelemetry = null),
                    (this._videosdkLogs = null),
                    (this._signalingBaseUrl = O || "api.videosdk.live"),
                    (this._metaData = x),
                    (this._defaultCameraIndex = D),
                    (this._debugMode = Boolean(I)),
                    (this._meetingConnectionState = null),
                    A)
                  ) {
                    if (!(A instanceof _r.l))
                      throw new Error(
                        "keyProvider should be an instance of ExternalE2EEKeyProvider"
                      );
                    (function (e, t, r) {
                      if ("function" == typeof e ? e === t : e.has(t))
                        return arguments.length < 3 ? t : r;
                      throw new TypeError(
                        "Private element is not present on this object"
                      );
                    })(Ir, this, Mr).call(this, A);
                  }
                },
                [
                  {
                    key: "on",
                    value: function (e, t) {
                      this._eventEmitter.on(e, t);
                    },
                  },
                  {
                    key: "softClose",
                    value: function () {
                      var e,
                        t =
                          null === (e = this._openTelemetry) || void 0 === e
                            ? void 0
                            : e.trace({ name: "softClose() Start " });
                      try {
                        var r, n, s;
                        this._eventEmitter.emit(
                          "REMOVE_PARTICIPANTS_FOR_SWITCH_MEETING"
                        );
                        var i,
                          a =
                            null === (r = this._openTelemetry) || void 0 === r
                              ? void 0
                              : r.trace({
                                  name: "Consumer Cleanup",
                                  parentSpan: t,
                                  attributes: {
                                    "videosdk.consumers.count":
                                      this._consumers.size || 0,
                                  },
                                }),
                          o = wr(this._consumers.values());
                        try {
                          for (o.s(); !(i = o.n()).done; ) {
                            i.value.close();
                          }
                        } catch (e) {
                          o.e(e);
                        } finally {
                          o.f();
                        }
                        null === (n = this._openTelemetry) ||
                          void 0 === n ||
                          n.completeSpan({
                            span: a,
                            status: 1,
                            message: "Closed ".concat(
                              this._consumers.size,
                              " consumers successfully"
                            ),
                          }),
                          null === (s = this._openTelemetry) ||
                            void 0 === s ||
                            s.completeSpan({
                              span: t,
                              status: 1,
                              message: "Soft close completed successfully",
                            });
                      } catch (e) {
                        var c;
                        null === (c = this._openTelemetry) ||
                          void 0 === c ||
                          c.completeSpan({
                            span: t,
                            status: 2,
                            message: "Soft close failed: ".concat(e.message),
                          }),
                          console.error(e);
                      }
                    },
                  },
                  {
                    key: "close",
                    value: function (e) {
                      var t,
                        r,
                        n,
                        s,
                        i,
                        a = e.sendLeft,
                        o = void 0 === a || a;
                      o &&
                        (null === (i = this._openTelemetry) ||
                          void 0 === i ||
                          i.traceAutoComplete({
                            spanName: "Meeting is in CLOSING State",
                            status: 1,
                          }));
                      if (!this._closed) {
                        (this._closed = !0),
                          this._pingWebsocketInterval &&
                            clearInterval(this._pingWebsocketInterval),
                          (this._pingWebsocketInterval = null),
                          this._pingInternetInterval &&
                            clearInterval(this._pingInternetInterval),
                          (this._pingInternetInterval = null),
                          this._webSocket.close(),
                          this._metrics.running &&
                            this._metrics.stopAllProbes(),
                          Dr.debug("close()");
                        var c =
                          null === (t = this._openTelemetry) || void 0 === t
                            ? void 0
                            : t.trace({ spanName: "Closing Trasnport" });
                        this._sendTransport && this._sendTransport.close(),
                          this._recvTransport && this._recvTransport.close(),
                          null === (r = this._openTelemetry) ||
                            void 0 === r ||
                            r.completeSpan({
                              span: c,
                              status: 1,
                              message: "Closed Trasnport",
                            }),
                          kr.dispatch(Ze("closed")),
                          o && this.emitMeetingStateChange(Nt),
                          null === (n = this._openTelemetry) ||
                            void 0 === n ||
                            n.traceAutoComplete({
                              spanName: "Meeting is in CLOSED State",
                              status: 1,
                            }),
                          o && this._eventEmitter.emit("MEETING_LEFT"),
                          null === (s = this._openTelemetry) ||
                            void 0 === s ||
                            s.traceAutoComplete({
                              spanName: "Emitted MEETING_LEFT Event",
                              status: 1,
                            });
                      }
                    },
                  },
                  {
                    key: "join",
                    value:
                      ((sr = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r,
                            n,
                            s,
                            i,
                            o,
                            c,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g = this;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2),
                                      qe({
                                        roomId: this._roomId,
                                        secret: this._secret,
                                        signalingBaseUrl:
                                          this._signalingBaseUrl,
                                      })
                                    );
                                  case 2:
                                    (n = e.sent),
                                      (s = n.baseUrl),
                                      (i = n.iceServers),
                                      (o = n.logs),
                                      (c = n.observabilityJwt),
                                      (l = n.traces),
                                      (p = n.metaData),
                                      (h = n.signalingUrl),
                                      (m = n.socketPath),
                                      (f = n.socketUrl),
                                      (this._baseUrl = s),
                                      (this._socketUrl = "wss://"
                                        .concat(f || this._baseUrl, "/?roomId=")
                                        .concat(this._roomId, "&peerId=")
                                        .concat(this._peerId, "&secret=")
                                        .concat(this._secret, "&mode=")
                                        .concat(this._mode, "&lib=socket")),
                                      (this._iceServers = i),
                                      (this._tracesEnabled = l.enabled),
                                      (this._openTelemetry = new Gt(
                                        (0, d.A)(
                                          {
                                            roomId: this._roomId,
                                            peerId: this._peerId,
                                            sdkName: "".concat(
                                              this._deviceInfo.sdkType,
                                              "-sdk"
                                            ),
                                            traces: l,
                                            logs: o,
                                            observabilityJwt: c,
                                            metaData: p,
                                          },
                                          "traces",
                                          l
                                        )
                                      )),
                                      (this._joinSpan =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "Join() Calling",
                                              attributes: {
                                                DeviceInfo: JSON.stringify(
                                                  this._deviceInfo
                                                ),
                                                mode: this._mode,
                                                displayName: this._displayName,
                                                multiStream: this._useSimulcast,
                                                micEnabled: this._micEnabled,
                                                webcamEnabled:
                                                  this._webcamEnabled,
                                                CustomVideoTrack:
                                                  !!this.customCameraVideoTrack,
                                                CustomMicTrack:
                                                  !!this
                                                    .customMicrophoneAudioTrack,
                                                signalingUrl:
                                                  h ||
                                                  "signalingUrl not specify",
                                              },
                                            })),
                                      (this._webSocket = Ae(this._socketUrl, {
                                        transports: ["websocket"],
                                        reconnectionAttempts: 10,
                                        reconnectionDelay: 5e3,
                                        reconnection: !0,
                                        path: "".concat(
                                          null != m ? m : "",
                                          "/socket.io"
                                        ),
                                      })),
                                      this.emitMeetingStateChange(At),
                                      kr.dispatch(Ze("connecting")),
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName:
                                            "Meeting is in CONNECTING State",
                                          span: this._joinSpan,
                                          status: 1,
                                        }),
                                      this._webSocket.on(
                                        "connect",
                                        function () {}
                                      ),
                                      this._webSocket.on(
                                        "connectionSuccess",
                                        function () {
                                          var e;
                                          (g._isWebsocketAlive = !0),
                                            (g._closed = !1),
                                            g._mode ===
                                              (Bt.nI.RECV_ONLY ||
                                                Bt.nI.SIGNALLING_ONLY) &&
                                              g.emitMeetingStateChange(Mt),
                                            null === (e = g._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "Meeting is in CONNECTED State",
                                                span: g._joinSpan,
                                                status: 1,
                                              }),
                                            g.requestEntry();
                                        }
                                      ),
                                      this._webSocket.on(
                                        "disconnect",
                                        function (e) {}
                                      ),
                                      this._webSocket.io.on(
                                        "reconnect_failed",
                                        function () {
                                          g._closed ||
                                            g.close({ sendLeft: !0 });
                                        }
                                      ),
                                      this._webSocket.on(
                                        "connect_error",
                                        function (e) {
                                          var t, r, n, s, i;
                                          g._webSocket.active &&
                                          g._webSocket.io._reconnecting
                                            ? (null ===
                                                (t = g._openTelemetry) ||
                                                void 0 === t ||
                                                t.traceAutoComplete({
                                                  spanName:
                                                    "Meeting is in RECONNECTING State",
                                                  span: g._joinSpan,
                                                  status: 1,
                                                }),
                                              kr.dispatch(
                                                Pt({
                                                  type: "error",
                                                  text: "WebSocket Reconnecting",
                                                })
                                              ),
                                              g.emitMeetingStateChange(Lt),
                                              g._sendTransport &&
                                                (null ===
                                                  (s = g._sendTransport) ||
                                                  void 0 === s ||
                                                  s.close(),
                                                (g._sendTransport = null)),
                                              g._recvTransport &&
                                                (null ===
                                                  (i = g._recvTransport) ||
                                                  void 0 === i ||
                                                  i.close(),
                                                (g._recvTransport = null)),
                                              null ===
                                                (r =
                                                  g.customMicrophoneAudioTrack) ||
                                                void 0 === r ||
                                                r
                                                  .getTracks()
                                                  .forEach(function (e) {
                                                    e.stop();
                                                  }),
                                              (g.customMicrophoneAudioTrack =
                                                null),
                                              null ===
                                                (n =
                                                  g.customCameraVideoTrack) ||
                                                void 0 === n ||
                                                n
                                                  .getTracks()
                                                  .forEach(function (e) {
                                                    e.stop();
                                                  }),
                                              (g.customCameraVideoTrack = null))
                                            : console.log(
                                                "Error while trying to reconnect",
                                                e.message
                                              );
                                        }
                                      ),
                                      this._webSocket.on("close", function () {
                                        g._closed || g.close({ sendLeft: !0 });
                                      }),
                                      this._webSocket.on(
                                        "newConsumer",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r) {
                                              var n,
                                                s,
                                                i,
                                                a,
                                                o,
                                                c,
                                                d,
                                                l,
                                                p,
                                                h,
                                                m,
                                                f,
                                                v,
                                                _,
                                                y,
                                                b,
                                                w,
                                                S,
                                                R,
                                                k,
                                                E,
                                                C,
                                                T,
                                                P,
                                                O,
                                                x;
                                              return u().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        if (
                                                          ((i =
                                                            null ===
                                                              (n =
                                                                g._openTelemetry) ||
                                                            void 0 === n
                                                              ? void 0
                                                              : n.trace({
                                                                  spanName:
                                                                    "Websocket REQ: newConsumer",
                                                                  attributes: {
                                                                    request:
                                                                      JSON.stringify(
                                                                        t
                                                                      ),
                                                                  },
                                                                })),
                                                          g._consume)
                                                        ) {
                                                          e.next = 5;
                                                          break;
                                                        }
                                                        return (
                                                          r({
                                                            errorCode: 403,
                                                            message:
                                                              "I do not want to consume",
                                                            method:
                                                              "newConsumer",
                                                          }),
                                                          null ===
                                                            (a =
                                                              g._openTelemetry) ||
                                                            void 0 === a ||
                                                            a.completeSpan({
                                                              span: i,
                                                              status: 2,
                                                              message:
                                                                "I do not want to consume",
                                                            }),
                                                          e.abrupt("return")
                                                        );
                                                      case 5:
                                                        return (
                                                          (o = t.peerId),
                                                          (c = t.producerId),
                                                          (d = t.id),
                                                          (l = t.kind),
                                                          (p = t.rtpParameters),
                                                          (h = t.type),
                                                          (m = t.appData),
                                                          (f =
                                                            t.producerPaused),
                                                          (v =
                                                            null ===
                                                              (s =
                                                                g._openTelemetry) ||
                                                            void 0 === s
                                                              ? void 0
                                                              : s.trace({
                                                                  spanName:
                                                                    "Creating Consumer",
                                                                  span: i,
                                                                })),
                                                          (e.prev = 7),
                                                          (e.next = 10),
                                                          g._recvTransport.consume(
                                                            {
                                                              id: d,
                                                              producerId: c,
                                                              kind: l,
                                                              rtpParameters: p,
                                                              appData: br(
                                                                br({}, m),
                                                                {},
                                                                { peerId: o }
                                                              ),
                                                              onRtpReceiver:
                                                                function (e) {
                                                                  var t =
                                                                      e.writableStream,
                                                                    r =
                                                                      e.readableStream;
                                                                  if (
                                                                    !t ||
                                                                    !r
                                                                  ) {
                                                                    var n =
                                                                      e.createEncodedStreams();
                                                                    (e.writableStream =
                                                                      n.writable),
                                                                      (t =
                                                                        n.writable),
                                                                      (e.readableStream =
                                                                        n.readable),
                                                                      (r =
                                                                        n.readable);
                                                                  }
                                                                },
                                                            }
                                                          )
                                                        );
                                                      case 10:
                                                        (S = e.sent),
                                                          (R =
                                                            Me.parseScalabilityMode(
                                                              S.rtpParameters
                                                                .encodings[0]
                                                                .scalabilityMode
                                                            )),
                                                          (k = R.spatialLayers),
                                                          (E =
                                                            R.temporalLayers),
                                                          (S.spatialLayers = k),
                                                          (S.temporalLayers =
                                                            E),
                                                          (S.currentSpatialLayers =
                                                            k - 1),
                                                          (S.currentTemporalLayers =
                                                            E - 1),
                                                          g._consumers.set(
                                                            S.id,
                                                            S
                                                          ),
                                                          S.on(
                                                            "transportclose",
                                                            function () {
                                                              g._consumers.delete(
                                                                S.id
                                                              );
                                                              var e = yt(
                                                                S.id,
                                                                o
                                                              );
                                                              kr.dispatch(e),
                                                                g._eventEmitter.emit(
                                                                  e.type,
                                                                  e.payload
                                                                );
                                                            }
                                                          ),
                                                          null ===
                                                            (_ =
                                                              g._openTelemetry) ||
                                                            void 0 === _ ||
                                                            _.completeSpan({
                                                              span: v,
                                                              status: 1,
                                                              message:
                                                                "Consumer Created",
                                                            }),
                                                          (v =
                                                            null ===
                                                              (y =
                                                                g._openTelemetry) ||
                                                            void 0 === y
                                                              ? void 0
                                                              : y.trace({
                                                                  spanName:
                                                                    "Sending Stream Enabled Event",
                                                                  span: i,
                                                                })),
                                                          (C = _t(
                                                            {
                                                              id: S.id,
                                                              type: h,
                                                              locallyPaused: !1,
                                                              remotelyPaused: f,
                                                              rtpParameters:
                                                                S.rtpParameters,
                                                              spatialLayers: k,
                                                              temporalLayers: E,
                                                              currentSpatialLayer:
                                                                k - 1,
                                                              currentTemporalLayer:
                                                                E - 1,
                                                              preferredSpatialLayer:
                                                                k - 1,
                                                              preferredTemporalLayer:
                                                                E - 1,
                                                              priority: 1,
                                                              codec:
                                                                S.rtpParameters.codecs[0].mimeType.split(
                                                                  "/"
                                                                )[1],
                                                              track: S.track,
                                                              appData: m,
                                                              instance: S,
                                                            },
                                                            o
                                                          )),
                                                          kr.dispatch(C),
                                                          g._eventEmitter.emit(
                                                            C.type,
                                                            C.payload
                                                          ),
                                                          r(),
                                                          "video" === S.kind &&
                                                            kr.getState().me
                                                              .audioOnly &&
                                                            g._pauseConsumer(S),
                                                          null ===
                                                            (b =
                                                              g._openTelemetry) ||
                                                            void 0 === b ||
                                                            b.completeSpan({
                                                              span: v,
                                                              status: 1,
                                                              message:
                                                                "Event Send Successfully",
                                                            }),
                                                          null ===
                                                            (w =
                                                              g._openTelemetry) ||
                                                            void 0 === w ||
                                                            w.completeSpan({
                                                              span: i,
                                                              status: 1,
                                                              message:
                                                                "New Consumer Created Successfully",
                                                              attributes: {
                                                                "consumer.consumerId":
                                                                  S.id,
                                                              },
                                                            }),
                                                          "video" == S.kind &&
                                                            S.appData.share &&
                                                            (null ===
                                                              (T =
                                                                g._openTelemetry) ||
                                                              void 0 === T ||
                                                              T.traceAutoComplete(
                                                                {
                                                                  spanName:
                                                                    "Presenter Changed",
                                                                  span: i,
                                                                  attributes: {
                                                                    "peer.id":
                                                                      o,
                                                                  },
                                                                }
                                                              )),
                                                          g.e2eeManager &&
                                                            g.e2eeManager.emit(
                                                              "NEW_CONSUMER",
                                                              {
                                                                consumer: S,
                                                                peerId:
                                                                  g._peerId,
                                                              }
                                                            ),
                                                          (e.next = 38);
                                                        break;
                                                      case 31:
                                                        throw (
                                                          ((e.prev = 31),
                                                          (e.t0 = e.catch(7)),
                                                          null ===
                                                            (P =
                                                              g._openTelemetry) ||
                                                            void 0 === P ||
                                                            P.completeSpan({
                                                              span: v,
                                                              status: 2,
                                                              message:
                                                                "Error creating a Consumer: ".concat(
                                                                  e.t0
                                                                ),
                                                            }),
                                                          null ===
                                                            (O =
                                                              g._openTelemetry) ||
                                                            void 0 === O ||
                                                            O.completeSpan({
                                                              span: i,
                                                              status: 2,
                                                              message:
                                                                "Error creating a Consumer: ".concat(
                                                                  e.t0
                                                                ),
                                                            }),
                                                          kr.dispatch(
                                                            Pt({
                                                              type: "error",
                                                              text: "Error creating a Consumer: ".concat(
                                                                e.t0
                                                              ),
                                                            })
                                                          ),
                                                          null ===
                                                            (x =
                                                              g._videosdkLogs) ||
                                                            void 0 === x ||
                                                            x.pushLogs({
                                                              logText:
                                                                "Error creating a Consumer",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t0.message,
                                                              },
                                                            }),
                                                          e.t0)
                                                        );
                                                      case 38:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [[7, 31]]
                                              );
                                            })
                                          );
                                          return function (t, r) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._webSocket.on(
                                        "newDataConsumer",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r) {
                                              var n, s, i, a, o, c, d, l;
                                              return u().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        if (g._consume) {
                                                          e.next = 3;
                                                          break;
                                                        }
                                                        return (
                                                          r({
                                                            errorCode: 403,
                                                            message:
                                                              "I do not want to data consume",
                                                            method:
                                                              "newConsumer",
                                                          }),
                                                          e.abrupt("return")
                                                        );
                                                      case 3:
                                                        if (g._useDataChannel) {
                                                          e.next = 6;
                                                          break;
                                                        }
                                                        return (
                                                          r({
                                                            errorCode: 403,
                                                            message:
                                                              "I do not want DataChannels",
                                                            method:
                                                              "newConsumer",
                                                          }),
                                                          e.abrupt("return")
                                                        );
                                                      case 6:
                                                        return (
                                                          (n = t.peerId),
                                                          (s =
                                                            t.dataProducerId),
                                                          (i = t.id),
                                                          (a =
                                                            t.sctpStreamParameters),
                                                          (o = t.label),
                                                          (c = t.protocol),
                                                          (d = t.appData),
                                                          (e.prev = 7),
                                                          (e.next = 10),
                                                          g._recvTransport.consumeData(
                                                            {
                                                              id: i,
                                                              dataProducerId: s,
                                                              sctpStreamParameters:
                                                                a,
                                                              label: o,
                                                              protocol: c,
                                                              appData: br(
                                                                br({}, d),
                                                                {},
                                                                { peerId: n }
                                                              ),
                                                            }
                                                          )
                                                        );
                                                      case 10:
                                                        (l = e.sent),
                                                          g._dataConsumers.set(
                                                            l.id,
                                                            l
                                                          ),
                                                          l.on(
                                                            "transportclose",
                                                            function () {
                                                              g._dataConsumers.delete(
                                                                l.id
                                                              );
                                                            }
                                                          ),
                                                          l.on(
                                                            "open",
                                                            function () {
                                                              Dr.debug(
                                                                'DataConsumer "open" event'
                                                              );
                                                            }
                                                          ),
                                                          l.on(
                                                            "close",
                                                            function () {
                                                              Dr.warn(
                                                                'DataConsumer "close" event'
                                                              ),
                                                                g._dataConsumers.delete(
                                                                  l.id
                                                                ),
                                                                kr.dispatch(
                                                                  Pt({
                                                                    type: "error",
                                                                    text: "DataConsumer closed",
                                                                  })
                                                                );
                                                            }
                                                          ),
                                                          l.on(
                                                            "error",
                                                            function (e) {
                                                              Dr.error(
                                                                'DataConsumer "error" event:%o',
                                                                e
                                                              ),
                                                                kr.dispatch(
                                                                  Pt({
                                                                    type: "error",
                                                                    text: "DataConsumer error: ".concat(
                                                                      e
                                                                    ),
                                                                  })
                                                                );
                                                            }
                                                          ),
                                                          l.on(
                                                            "message",
                                                            function (e) {
                                                              if (
                                                                (Dr.debug(
                                                                  'DataConsumer "message" event [streamId:%d]',
                                                                  l
                                                                    .sctpStreamParameters
                                                                    .streamId
                                                                ),
                                                                (window.DC_MESSAGE =
                                                                  e),
                                                                e instanceof
                                                                  ArrayBuffer)
                                                              ) {
                                                                var t =
                                                                  new DataView(
                                                                    e
                                                                  ).getUint32();
                                                                return t ==
                                                                  Math.pow(
                                                                    2,
                                                                    32
                                                                  ) -
                                                                    1
                                                                  ? (Dr.warn(
                                                                      "dataChannelTest finished!"
                                                                    ),
                                                                    void (g._nextDataChannelTestNumber = 0))
                                                                  : (t >
                                                                      g._nextDataChannelTestNumber &&
                                                                      Dr.warn(
                                                                        "dataChannelTest: %s packets missing",
                                                                        t -
                                                                          g._nextDataChannelTestNumber
                                                                      ),
                                                                    void (g._nextDataChannelTestNumber =
                                                                      t + 1));
                                                              }
                                                              if (
                                                                "string" ==
                                                                typeof e
                                                              )
                                                                switch (
                                                                  l.label
                                                                ) {
                                                                  case "chat":
                                                                    var r =
                                                                        kr.getState()
                                                                          .peers,
                                                                      n =
                                                                        Object.keys(
                                                                          r
                                                                        )
                                                                          .map(
                                                                            function (
                                                                              e
                                                                            ) {
                                                                              return r[
                                                                                e
                                                                              ];
                                                                            }
                                                                          )
                                                                          .find(
                                                                            function (
                                                                              e
                                                                            ) {
                                                                              return e.dataConsumers.includes(
                                                                                l.id
                                                                              );
                                                                            }
                                                                          );
                                                                    if (!n) {
                                                                      Dr.warn(
                                                                        'DataConsumer "message" from unknown peer'
                                                                      );
                                                                      break;
                                                                    }
                                                                    kr.dispatch(
                                                                      Pt({
                                                                        title:
                                                                          "".concat(
                                                                            n.displayName,
                                                                            " says:"
                                                                          ),
                                                                        text: e,
                                                                        timeout: 5e3,
                                                                      })
                                                                    ),
                                                                      g._eventEmitter.emit(
                                                                        "CHAT_MESSAGE",
                                                                        {
                                                                          text: e,
                                                                          senderId:
                                                                            n.id,
                                                                          timestamp:
                                                                            new Date().getTime(),
                                                                        }
                                                                      );
                                                                    break;
                                                                  case "bot":
                                                                    kr.dispatch(
                                                                      Pt({
                                                                        title:
                                                                          "Message from Bot:",
                                                                        text: e,
                                                                        timeout: 5e3,
                                                                      })
                                                                    );
                                                                }
                                                              else
                                                                Dr.warn(
                                                                  'ignoring DataConsumer "message" (not a string)'
                                                                );
                                                            }
                                                          ),
                                                          (window.DC = l),
                                                          kr.dispatch(
                                                            Ct(
                                                              {
                                                                id: l.id,
                                                                sctpStreamParameters:
                                                                  l.sctpStreamParameters,
                                                                label: l.label,
                                                                protocol:
                                                                  l.protocol,
                                                              },
                                                              n
                                                            )
                                                          ),
                                                          r(),
                                                          (e.next = 26);
                                                        break;
                                                      case 22:
                                                        (e.prev = 22),
                                                          (e.t0 = e.catch(7)),
                                                          Dr.error(
                                                            '"newDataConsumer" request failed:%o',
                                                            e.t0
                                                          ),
                                                          kr.dispatch(
                                                            Pt({
                                                              type: "error",
                                                              text: "Error creating a DataConsumer: ".concat(
                                                                e.t0
                                                              ),
                                                            })
                                                          );
                                                      case 26:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [[7, 22]]
                                              );
                                            })
                                          );
                                          return function (t, r) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._webSocket.on(
                                        "enableMic",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r) {
                                              var n, s, i;
                                              return u().wrap(function (e) {
                                                for (;;)
                                                  switch ((e.prev = e.next)) {
                                                    case 0:
                                                      try {
                                                        (s = t.peerId),
                                                          null ===
                                                            (n =
                                                              g._openTelemetry) ||
                                                            void 0 === n ||
                                                            n.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitting MIC_REQUESTED & Websocket REQ: enableMic for ".concat(
                                                                    s
                                                                  ),
                                                                status: 1,
                                                              }
                                                            ),
                                                          g._eventEmitter.emit(
                                                            "MIC_REQUESTED",
                                                            { peerId: s }
                                                          ),
                                                          r();
                                                      } catch (e) {
                                                        Dr.error(
                                                          '"enableMic" request failed:%o',
                                                          e
                                                        ),
                                                          null ===
                                                            (i =
                                                              g._videosdkLogs) ||
                                                            void 0 === i ||
                                                            i.pushLogs({
                                                              logText:
                                                                "Error enableMic request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.message,
                                                              },
                                                            }),
                                                          g._emitError({
                                                            code: 3027,
                                                            message: e.message,
                                                          });
                                                      }
                                                    case 1:
                                                    case "end":
                                                      return e.stop();
                                                  }
                                              }, e);
                                            })
                                          );
                                          return function (t, r) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._webSocket.on(
                                        "disableMic",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r) {
                                              var n, s, i, a, o;
                                              return u().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        return (
                                                          (e.prev = 0),
                                                          (n =
                                                            null ===
                                                              (s =
                                                                g._openTelemetry) ||
                                                            void 0 === s
                                                              ? void 0
                                                              : s.trace({
                                                                  spanName:
                                                                    "Websocket REQ: disableMic",
                                                                })),
                                                          (e.next = 4),
                                                          g.disableMic(!1, n)
                                                        );
                                                      case 4:
                                                        null ===
                                                          (i =
                                                            g._openTelemetry) ||
                                                          void 0 === i ||
                                                          i.completeSpan({
                                                            span: n,
                                                            status: 1,
                                                            message:
                                                              "Request Completed",
                                                          }),
                                                          r(),
                                                          (e.next = 13);
                                                        break;
                                                      case 8:
                                                        (e.prev = 8),
                                                          (e.t0 = e.catch(0)),
                                                          null ===
                                                            (a =
                                                              g._openTelemetry) ||
                                                            void 0 === a ||
                                                            a.completeSpan({
                                                              span: n,
                                                              status: 2,
                                                              message:
                                                                "disableMic request failed ".concat(
                                                                  e.t0
                                                                ),
                                                            }),
                                                          null ===
                                                            (o =
                                                              g._videosdkLogs) ||
                                                            void 0 === o ||
                                                            o.pushLogs({
                                                              logText:
                                                                "Error disableMic request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t0.message,
                                                              },
                                                            }),
                                                          g._emitError({
                                                            code: 3028,
                                                            message:
                                                              e.t0.message,
                                                          });
                                                      case 13:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [[0, 8]]
                                              );
                                            })
                                          );
                                          return function (t, r) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._webSocket.on(
                                        "enableWebcam",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r) {
                                              var n, s, i;
                                              return u().wrap(function (e) {
                                                for (;;)
                                                  switch ((e.prev = e.next)) {
                                                    case 0:
                                                      try {
                                                        (s = t.peerId),
                                                          null ===
                                                            (n =
                                                              g._openTelemetry) ||
                                                            void 0 === n ||
                                                            n.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitting WEBCAM_REQUESTED & Websocket REQ: enableWebcam for ".concat(
                                                                    s
                                                                  ),
                                                                status: 1,
                                                              }
                                                            ),
                                                          g._eventEmitter.emit(
                                                            "WEBCAM_REQUESTED",
                                                            { peerId: s }
                                                          ),
                                                          r();
                                                      } catch (e) {
                                                        Dr.error(
                                                          '"enableWebcam" request failed:%o',
                                                          e
                                                        ),
                                                          null ===
                                                            (i =
                                                              g._videosdkLogs) ||
                                                            void 0 === i ||
                                                            i.pushLogs({
                                                              logText:
                                                                "Error enableWebcam request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.message,
                                                              },
                                                            }),
                                                          g._emitError({
                                                            code: 3029,
                                                            message: e.message,
                                                          });
                                                      }
                                                    case 1:
                                                    case "end":
                                                      return e.stop();
                                                  }
                                              }, e);
                                            })
                                          );
                                          return function (t, r) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._webSocket.on(
                                        "disableWebcam",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r) {
                                              var n, s, i, a, o;
                                              return u().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        return (
                                                          (e.prev = 0),
                                                          (n =
                                                            null ===
                                                              (s =
                                                                g._openTelemetry) ||
                                                            void 0 === s
                                                              ? void 0
                                                              : s.trace({
                                                                  spanName:
                                                                    "Websocket REQ: disableWebcam",
                                                                })),
                                                          (e.next = 4),
                                                          g.disableWebcam(n)
                                                        );
                                                      case 4:
                                                        null ===
                                                          (i =
                                                            g._openTelemetry) ||
                                                          void 0 === i ||
                                                          i.completeSpan({
                                                            span: n,
                                                            status: 1,
                                                            message:
                                                              "Request Completed",
                                                          }),
                                                          r(),
                                                          (e.next = 13);
                                                        break;
                                                      case 8:
                                                        (e.prev = 8),
                                                          (e.t0 = e.catch(0)),
                                                          null ===
                                                            (a =
                                                              g._openTelemetry) ||
                                                            void 0 === a ||
                                                            a.completeSpan({
                                                              span: n,
                                                              status: 2,
                                                              message:
                                                                "disableWebcam request failed ".concat(
                                                                  e.t0
                                                                ),
                                                            }),
                                                          null ===
                                                            (o =
                                                              g._videosdkLogs) ||
                                                            void 0 === o ||
                                                            o.pushLogs({
                                                              logText:
                                                                "Error disableWebcam request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t0.message,
                                                              },
                                                            }),
                                                          g._emitError({
                                                            code: 3030,
                                                            message:
                                                              e.t0.message,
                                                          });
                                                      case 13:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [[0, 8]]
                                              );
                                            })
                                          );
                                          return function (t, r) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._webSocket.on(
                                        "pinStateChanged",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r) {
                                              var n, s, i, a, o, c, d, l, p;
                                              return u().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        (e.prev = 0),
                                                          (a = t.peerId),
                                                          (o = t.state),
                                                          (c = t.pinnedBy),
                                                          (n =
                                                            null ===
                                                              (s =
                                                                g._openTelemetry) ||
                                                            void 0 === s
                                                              ? void 0
                                                              : s.trace({
                                                                  spanName:
                                                                    "Websocket REQ: pinStateChanged",
                                                                  attributes: {
                                                                    requestData:
                                                                      JSON.stringify(
                                                                        {
                                                                          peerId:
                                                                            a,
                                                                          state:
                                                                            o,
                                                                          pinnedBy:
                                                                            c,
                                                                        }
                                                                      ),
                                                                  },
                                                                })),
                                                          g._pinnedParticipants.has(
                                                            a
                                                          ) ||
                                                            g._pinnedParticipants.set(
                                                              a,
                                                              {
                                                                cam: !1,
                                                                share: !1,
                                                              }
                                                            ),
                                                          (d =
                                                            g._pinnedParticipants.get(
                                                              a
                                                            )),
                                                          null != o.cam &&
                                                            (d.cam = o.cam),
                                                          null != o.share &&
                                                            (d.share = o.share),
                                                          g._pinnedParticipants.set(
                                                            a,
                                                            d
                                                          ),
                                                          g._eventEmitter.emit(
                                                            "PIN_STATE_CHANGED",
                                                            {
                                                              peerId: a,
                                                              state: o,
                                                              pinnedBy: c,
                                                            }
                                                          ),
                                                          0 == d.share &&
                                                            0 == d.cam &&
                                                            g._pinnedParticipants.delete(
                                                              a
                                                            ),
                                                          null ===
                                                            (i =
                                                              g._openTelemetry) ||
                                                            void 0 === i ||
                                                            i.completeSpan({
                                                              span: n,
                                                              status: 1,
                                                              message:
                                                                "Request Completed",
                                                              attributes: {
                                                                _pinnedParticipants:
                                                                  JSON.stringify(
                                                                    g._pinnedParticipants
                                                                  ),
                                                              },
                                                            }),
                                                          r(),
                                                          (e.next = 19);
                                                        break;
                                                      case 14:
                                                        throw (
                                                          ((e.prev = 14),
                                                          (e.t0 = e.catch(0)),
                                                          null ===
                                                            (l =
                                                              g._openTelemetry) ||
                                                            void 0 === l ||
                                                            l.completeSpan({
                                                              span: n,
                                                              status: 2,
                                                              message:
                                                                "pinStateChanged request failed",
                                                            }),
                                                          null ===
                                                            (p =
                                                              g._videosdkLogs) ||
                                                            void 0 === p ||
                                                            p.pushLogs({
                                                              logText:
                                                                "Error pinStateChanged request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t0.message,
                                                              },
                                                            }),
                                                          e.t0)
                                                        );
                                                      case 19:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [[0, 14]]
                                              );
                                            })
                                          );
                                          return function (t, r) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._webSocket.on(
                                        "switchRoom",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r) {
                                              return u().wrap(function (e) {
                                                for (;;)
                                                  switch ((e.prev = e.next)) {
                                                    case 0:
                                                      g._eventEmitter.emit(
                                                        "SWITCH_ROOM",
                                                        t
                                                      ),
                                                        r();
                                                    case 2:
                                                    case "end":
                                                      return e.stop();
                                                  }
                                              }, e);
                                            })
                                          );
                                          return function (t, r) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._webSocket.on(
                                        "statsData",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r) {
                                              return u().wrap(function (e) {
                                                for (;;)
                                                  switch ((e.prev = e.next)) {
                                                    case 0:
                                                      r({
                                                        peerId: g._peerId,
                                                        statsData: g._stats,
                                                      }),
                                                        (g._stats = {});
                                                    case 2:
                                                    case "end":
                                                      return e.stop();
                                                  }
                                              }, e);
                                            })
                                          );
                                          return function (t, r) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._webSocket.on(
                                        "notification",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t) {
                                              var r,
                                                n,
                                                s,
                                                i,
                                                a,
                                                d,
                                                l,
                                                p,
                                                h,
                                                m,
                                                f,
                                                v,
                                                _,
                                                y,
                                                b,
                                                w,
                                                S,
                                                R,
                                                k,
                                                E,
                                                C,
                                                T,
                                                P,
                                                O,
                                                x,
                                                D,
                                                I,
                                                A,
                                                M,
                                                L,
                                                N,
                                                j,
                                                B,
                                                F,
                                                U,
                                                W,
                                                q,
                                                V,
                                                H,
                                                z,
                                                G,
                                                K,
                                                $,
                                                J,
                                                Q,
                                                Y,
                                                X,
                                                Z,
                                                ee,
                                                te,
                                                re,
                                                ne,
                                                se,
                                                ie,
                                                ae,
                                                oe,
                                                ce,
                                                de,
                                                le,
                                                ue,
                                                pe,
                                                he,
                                                me,
                                                fe,
                                                ge,
                                                ve,
                                                _e,
                                                ye,
                                                be,
                                                we,
                                                Se,
                                                Re,
                                                ke,
                                                Ee,
                                                Ce,
                                                Te,
                                                Pe,
                                                Oe,
                                                xe;
                                              return u().wrap(function (e) {
                                                for (;;)
                                                  switch ((e.prev = e.next)) {
                                                    case 0:
                                                      (n =
                                                        null !== (r = t.data) &&
                                                        void 0 !== r
                                                          ? r
                                                          : t),
                                                        Dr.debug(
                                                          'proto "notification" event [method:%s, data:%o]',
                                                          t.method,
                                                          n
                                                        ),
                                                        (e.t0 = t.method),
                                                        (e.next =
                                                          "error" === e.t0
                                                            ? 5
                                                            : "participantMediaStateChanged" ===
                                                              e.t0
                                                            ? 10
                                                            : "producerScore" ===
                                                              e.t0
                                                            ? 11
                                                            : "entryRequested" ===
                                                              e.t0
                                                            ? 14
                                                            : "entryResponded" ===
                                                              e.t0
                                                            ? 18
                                                            : "newPeer" === e.t0
                                                            ? 34
                                                            : "peerClosed" ===
                                                              e.t0
                                                            ? 41
                                                            : "peerDisplayNameChanged" ===
                                                              e.t0
                                                            ? 47
                                                            : "consumerClosed" ===
                                                              e.t0
                                                            ? 51
                                                            : "consumerPaused" ===
                                                              e.t0
                                                            ? 63
                                                            : "consumerResumed" ===
                                                              e.t0
                                                            ? 71
                                                            : "consumerLayersChanged" ===
                                                              e.t0
                                                            ? 79
                                                            : "consumerScore" ===
                                                              e.t0
                                                            ? 90
                                                            : "dataConsumerClosed" ===
                                                              e.t0
                                                            ? 93
                                                            : "activeSpeaker" ===
                                                              e.t0
                                                            ? 102
                                                            : "consumerResumedSubManager" ===
                                                              e.t0
                                                            ? 107
                                                            : "consumerPausedSubManager" ===
                                                              e.t0
                                                            ? 109
                                                            : "transcriptionStateChanged" ===
                                                              e.t0
                                                            ? 111
                                                            : "transcriptionText" ===
                                                              e.t0
                                                            ? 114
                                                            : "recordingStateChanged" ===
                                                              e.t0
                                                            ? 116
                                                            : "recordingStarted" ===
                                                              e.t0
                                                            ? 119
                                                            : "recordingStopped" ===
                                                              e.t0
                                                            ? 121
                                                            : "livestreamStateChanged" ===
                                                              e.t0
                                                            ? 123
                                                            : "livestreamStarted" ===
                                                              e.t0
                                                            ? 126
                                                            : "livestreamStopped" ===
                                                              e.t0
                                                            ? 128
                                                            : "hlsStateChanged" ===
                                                              e.t0
                                                            ? 130
                                                            : "hlsPlayableStateChanged" ===
                                                              e.t0
                                                            ? 133
                                                            : "hlsStarted" ===
                                                              e.t0
                                                            ? 135
                                                            : "hlsStopped" ===
                                                              e.t0
                                                            ? 138
                                                            : "whiteboardStarted" ===
                                                              e.t0
                                                            ? 140
                                                            : "whiteboardStopped" ===
                                                              e.t0
                                                            ? 143
                                                            : "addCharacter" ===
                                                              e.t0
                                                            ? 145
                                                            : "removeCharacter" ===
                                                              e.t0
                                                            ? 151
                                                            : "characterStateChanged" ===
                                                              e.t0
                                                            ? 157
                                                            : "characterMessage" ===
                                                              e.t0
                                                            ? 160
                                                            : "userMessage" ===
                                                              e.t0
                                                            ? 162
                                                            : "characterData" ===
                                                              e.t0
                                                            ? 164
                                                            : "videoStatusChanged" ===
                                                              e.t0
                                                            ? 166
                                                            : "videoSeeked" ===
                                                              e.t0
                                                            ? 168
                                                            : "connectionOpen" ===
                                                              e.t0
                                                            ? 171
                                                            : "connectionClose" ===
                                                              e.t0
                                                            ? 173
                                                            : "connectionChatMessage" ===
                                                              e.t0
                                                            ? 175
                                                            : "connectionParticipantJoined" ===
                                                              e.t0
                                                            ? 177
                                                            : "connectionParticipantLeft" ===
                                                              e.t0
                                                            ? 179
                                                            : "pubsubMessage" ===
                                                              e.t0
                                                            ? 181
                                                            : "peerModeChanged" ===
                                                              e.t0
                                                            ? 183
                                                            : "restartIce" ===
                                                              e.t0
                                                            ? 186
                                                            : 190);
                                                      break;
                                                    case 5:
                                                      return (
                                                        (a = n),
                                                        g._eventEmitter.emit(
                                                          "ERROR",
                                                          a
                                                        ),
                                                        null ===
                                                          (s =
                                                            g._videosdkLogs) ||
                                                          void 0 === s ||
                                                          s.pushLogs({
                                                            logText:
                                                              "Error in Meeting Session",
                                                            logType: "ERROR",
                                                            attributes: {
                                                              error: a.message,
                                                            },
                                                          }),
                                                        null ===
                                                          (i =
                                                            g._openTelemetry) ||
                                                          void 0 === i ||
                                                          i.traceAutoComplete({
                                                            spanName:
                                                              "Emitted `ERROR` Event",
                                                            attributes: {
                                                              error: a.message,
                                                            },
                                                            status: 2,
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 10:
                                                      try {
                                                        (d = n.peerId),
                                                          (l = n.kind),
                                                          (p = n.newState),
                                                          g._eventEmitter.emit(
                                                            "PARTICIPANT_MEDIA_STATE_CHANGED",
                                                            {
                                                              peerId: d,
                                                              kind: l,
                                                              newState: p,
                                                            }
                                                          ),
                                                          "video" == l &&
                                                            (null ===
                                                              (h =
                                                                g._openTelemetry) ||
                                                              void 0 === h ||
                                                              h.traceAutoComplete(
                                                                {
                                                                  spanName: ""
                                                                    .concat(
                                                                      d,
                                                                      " has "
                                                                    )
                                                                    .concat(
                                                                      p
                                                                        ? "enable"
                                                                        : "disable",
                                                                      " "
                                                                    )
                                                                    .concat(l),
                                                                  status: 1,
                                                                }
                                                              ));
                                                      } catch (e) {
                                                        Dr.error(
                                                          '"newProducer" request failed:%o',
                                                          e
                                                        ),
                                                          null ===
                                                            (m =
                                                              g._videosdkLogs) ||
                                                            void 0 === m ||
                                                            m.pushLogs({
                                                              logText:
                                                                "Error newProducer request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.message,
                                                              },
                                                            });
                                                      }
                                                    case 11:
                                                      return (
                                                        (f = n.producerId),
                                                        (v = n.score),
                                                        kr.dispatch(ut(f, v)),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 14:
                                                      return (
                                                        (y = n.id),
                                                        (b = n.name),
                                                        (w =
                                                          null ===
                                                            (_ =
                                                              g._openTelemetry) ||
                                                          void 0 === _
                                                            ? void 0
                                                            : _.trace({
                                                                spanName:
                                                                  "Websocket Noti: entryRequested",
                                                                span: g._joinSpan,
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    {
                                                                      id: y,
                                                                      name: b,
                                                                    }
                                                                  ),
                                                                },
                                                              })),
                                                        y !== g._peerId
                                                          ? (g._eventEmitter.emit(
                                                              "ENTRY_REQUESTED",
                                                              { id: y, name: b }
                                                            ),
                                                            null ===
                                                              (S =
                                                                g._openTelemetry) ||
                                                              void 0 === S ||
                                                              S.completeSpan({
                                                                span: w,
                                                                status: 1,
                                                                message:
                                                                  "EntryResponded Recieved",
                                                              }))
                                                          : null ===
                                                              (R =
                                                                g._openTelemetry) ||
                                                            void 0 === R ||
                                                            R.completeSpan({
                                                              span: w,
                                                              status: 2,
                                                              message:
                                                                "Entry Request Failed",
                                                            }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 18:
                                                      if (
                                                        ((C = n.id),
                                                        (T = n.decision),
                                                        (P = n.sessionId),
                                                        (O = n.switchingRoomId),
                                                        (x =
                                                          null ===
                                                            (k =
                                                              g._openTelemetry) ||
                                                          void 0 === k
                                                            ? void 0
                                                            : k.trace({
                                                                name: "Entry Response Handling",
                                                                attributes: {
                                                                  "peer.id": C,
                                                                  "entry.decision":
                                                                    T,
                                                                  switching_room:
                                                                    !!O,
                                                                },
                                                              })),
                                                        C === g._peerId &&
                                                          "allowed" === T)
                                                      ) {
                                                        e.next = 24;
                                                        break;
                                                      }
                                                      return (
                                                        null ===
                                                          (D =
                                                            g._openTelemetry) ||
                                                          void 0 === D ||
                                                          D.completeSpan({
                                                            span: g._joinSpan,
                                                            status: 2,
                                                            message:
                                                              "Join Request Denied",
                                                          }),
                                                        null ===
                                                          (I =
                                                            g._openTelemetry) ||
                                                          void 0 === I ||
                                                          I.completeSpan({
                                                            span: x,
                                                            status: 2,
                                                            message:
                                                              "Entry denied for peer",
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 24:
                                                      if (
                                                        (g._eventEmitter.emit(
                                                          "ENTRY_RESPONDED",
                                                          { id: C, decision: T }
                                                        ),
                                                        !O)
                                                      ) {
                                                        e.next = 30;
                                                        break;
                                                      }
                                                      return (
                                                        null ===
                                                          (A =
                                                            g._openTelemetry) ||
                                                          void 0 === A ||
                                                          A.completeSpan({
                                                            span: x,
                                                            status: 1,
                                                            message:
                                                              "Switching room initiated",
                                                          }),
                                                        g.softClose(),
                                                        g.switchingRoom(O),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 30:
                                                      return (
                                                        (g._videosdkLogs =
                                                          new Jt({
                                                            roomId: g._roomId,
                                                            peerId: g._peerId,
                                                            logs: o,
                                                            observabilityJwt: c,
                                                            deviceInfo:
                                                              g._deviceInfo,
                                                            sessionId: P,
                                                            debugMode:
                                                              g._debugMode,
                                                          })),
                                                        g.joinRoom(),
                                                        null ===
                                                          (E =
                                                            g._openTelemetry) ||
                                                          void 0 === E ||
                                                          E.completeSpan({
                                                            span: x,
                                                            status: 1,
                                                            message:
                                                              "Entry response handled successfully",
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 34:
                                                      (L = ft(
                                                        br(
                                                          br({}, (M = n)),
                                                          {},
                                                          {
                                                            consumers: [],
                                                            dataConsumers: [],
                                                          }
                                                        )
                                                      )),
                                                        kr.dispatch(L),
                                                        g._eventEmitter.emit(
                                                          L.type,
                                                          L.payload
                                                        ),
                                                        kr.dispatch(
                                                          Pt({
                                                            text: "".concat(
                                                              M.displayName,
                                                              " has joined the room"
                                                            ),
                                                          })
                                                        );
                                                      try {
                                                        null ===
                                                          (N =
                                                            g._openTelemetry) ||
                                                          void 0 === N ||
                                                          N.traceAutoComplete({
                                                            spanName:
                                                              "Websocket Noti: newPeer ".concat(
                                                                M.displayName
                                                              ),
                                                            attributes: {
                                                              peerData:
                                                                JSON.stringify(
                                                                  M
                                                                ),
                                                            },
                                                          });
                                                      } catch (e) {
                                                        null ===
                                                          (j =
                                                            g._videosdkLogs) ||
                                                          void 0 === j ||
                                                          j.pushLogs({
                                                            logText:
                                                              "Error Websocket Noti: newPeer",
                                                            logType: "ERROR",
                                                            attributes: {
                                                              error: e.message,
                                                            },
                                                          }),
                                                          console.error(e);
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        191
                                                      );
                                                    case 41:
                                                      return (
                                                        (F = n.peerId),
                                                        (U = gt(F)),
                                                        kr.dispatch(U),
                                                        g._eventEmitter.emit(
                                                          U.type,
                                                          U.payload
                                                        ),
                                                        null ===
                                                          (B =
                                                            g._openTelemetry) ||
                                                          void 0 === B ||
                                                          B.traceAutoComplete({
                                                            spanName:
                                                              "Websocket Noti: peerClosed for ".concat(
                                                                F
                                                              ),
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 47:
                                                      return (
                                                        (W = n.peerId),
                                                        (q = n.displayName),
                                                        (V = n.oldDisplayName),
                                                        kr.dispatch(vt(q, W)),
                                                        kr.dispatch(
                                                          Pt({
                                                            text: ""
                                                              .concat(
                                                                V,
                                                                " is now "
                                                              )
                                                              .concat(q),
                                                          })
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 51:
                                                      if (
                                                        ((z = n.consumerId),
                                                        (G =
                                                          g._consumers.get(z)))
                                                      ) {
                                                        e.next = 55;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        191
                                                      );
                                                    case 55:
                                                      return (
                                                        G.close(),
                                                        g._consumers.delete(z),
                                                        (K = G.appData.peerId),
                                                        ($ = yt(z, K)),
                                                        kr.dispatch($),
                                                        g._eventEmitter.emit(
                                                          $.type,
                                                          $.payload
                                                        ),
                                                        null ===
                                                          (H =
                                                            g._openTelemetry) ||
                                                          void 0 === H ||
                                                          H.traceAutoComplete({
                                                            spanName:
                                                              "Websocket Noti: consumerClosed for id ".concat(
                                                                z
                                                              ),
                                                            attributes: {
                                                              consumerData:
                                                                JSON.stringify(
                                                                  G
                                                                ),
                                                            },
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 63:
                                                      if (
                                                        ((J = n.consumerId),
                                                        (Q =
                                                          g._consumers.get(J)))
                                                      ) {
                                                        e.next = 67;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        191
                                                      );
                                                    case 67:
                                                      return (
                                                        Q.pause(),
                                                        kr.dispatch(
                                                          bt(J, "remote")
                                                        ),
                                                        g._eventEmitter.emit(
                                                          "CONSUMER_PAUSED",
                                                          {
                                                            consumerId: J,
                                                            peerId:
                                                              Q.appData.peerId,
                                                          }
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 71:
                                                      if (
                                                        ((Y = n.consumerId),
                                                        (X =
                                                          g._consumers.get(Y)))
                                                      ) {
                                                        e.next = 75;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        191
                                                      );
                                                    case 75:
                                                      return (
                                                        X.resume(),
                                                        kr.dispatch(
                                                          wt(Y, "remote")
                                                        ),
                                                        g._eventEmitter.emit(
                                                          "CONSUMER_RESUMED",
                                                          {
                                                            consumerId: Y,
                                                            peerId:
                                                              X.appData.peerId,
                                                          }
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 79:
                                                      if (
                                                        ((ee = n.consumerId),
                                                        (te = n.spatialLayer),
                                                        (re = n.temporalLayer),
                                                        ((ne =
                                                          g._consumers.get(
                                                            ee
                                                          )).currentSpatialLayer =
                                                          te),
                                                        (ne.currentTemporalLayer =
                                                          re),
                                                        ne)
                                                      ) {
                                                        e.next = 85;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        191
                                                      );
                                                    case 85:
                                                      return (
                                                        (null ===
                                                          (Z = ne.appData) ||
                                                        void 0 === Z ||
                                                        null ===
                                                          (Z = Z.encodings) ||
                                                        void 0 === Z
                                                          ? void 0
                                                          : Z.length) > 1 &&
                                                          g._eventEmitter.emit(
                                                            "VIDEO_QUALITY_CHANGED",
                                                            {
                                                              peerId:
                                                                ne.appData
                                                                  .peerId,
                                                              prevQuality:
                                                                ne.spatialLayers -
                                                                  1 -
                                                                  ne.currentSpatialLayer ==
                                                                0
                                                                  ? "HIGH"
                                                                  : ne.spatialLayers -
                                                                      1 -
                                                                      ne.currentSpatialLayer ==
                                                                    1
                                                                  ? "MEDIUM"
                                                                  : "LOW",
                                                              currentQuality:
                                                                ne.spatialLayers -
                                                                  1 -
                                                                  te ==
                                                                0
                                                                  ? "HIGH"
                                                                  : ne.spatialLayers -
                                                                      1 -
                                                                      te ==
                                                                    1
                                                                  ? "MEDIUM"
                                                                  : "LOW",
                                                            }
                                                          ),
                                                        (ne.currentSpatialLayer =
                                                          te),
                                                        (ne.currentTemporalLayer =
                                                          re),
                                                        kr.dispatch(
                                                          St(ee, te, re)
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 90:
                                                      return (
                                                        (se = n.consumerId),
                                                        (ie = n.score),
                                                        kr.dispatch(Et(se, ie)),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 93:
                                                      if (
                                                        ((ae =
                                                          n.dataConsumerId),
                                                        (oe =
                                                          g._dataConsumers.get(
                                                            ae
                                                          )))
                                                      ) {
                                                        e.next = 97;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        191
                                                      );
                                                    case 97:
                                                      return (
                                                        oe.close(),
                                                        g._dataConsumers.delete(
                                                          ae
                                                        ),
                                                        (ce =
                                                          oe.appData.peerId),
                                                        kr.dispatch(Tt(ae, ce)),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 102:
                                                      return (
                                                        (de = n.peerId),
                                                        (le = et(de)),
                                                        kr.dispatch(le),
                                                        g._eventEmitter.emit(
                                                          le.type,
                                                          le.payload
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 107:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "SUB_MANAGER_RESUMED",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 109:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "SUB_MANAGER_PAUSED",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 111:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "TRANSCRIPTION_STATE_CHANGED",
                                                          n
                                                        ),
                                                        null ===
                                                          (ue =
                                                            g._openTelemetry) ||
                                                          void 0 === ue ||
                                                          ue.traceAutoComplete({
                                                            spanName:
                                                              "Emitted TRANSCRIPTION_STATE_CHANGED, status : ".concat(
                                                                n.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                n
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 114:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "TRANSCRIPTION_TEXT",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 116:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "RECORDING_STATE_CHANGED",
                                                          n
                                                        ),
                                                        null ===
                                                          (pe =
                                                            g._openTelemetry) ||
                                                          void 0 === pe ||
                                                          pe.traceAutoComplete({
                                                            spanName:
                                                              "Emitted RECORDING_STATE_CHANGED, status : ".concat(
                                                                n.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                n
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 119:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "RECORDING_STARTED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 121:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "RECORDING_STOPPED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 123:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "LIVESTREAM_STATE_CHANGED",
                                                          n
                                                        ),
                                                        null ===
                                                          (he =
                                                            g._openTelemetry) ||
                                                          void 0 === he ||
                                                          he.traceAutoComplete({
                                                            spanName:
                                                              "Emitted LIVESTREAM_STATE_CHANGED, status : ".concat(
                                                                n.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                n
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 126:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "LIVESTREAM_STARTED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 128:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "LIVESTREAM_STOPPED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 130:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "HLS_STATE_CHANGED",
                                                          n
                                                        ),
                                                        null ===
                                                          (me =
                                                            g._openTelemetry) ||
                                                          void 0 === me ||
                                                          me.traceAutoComplete({
                                                            spanName:
                                                              "Emitted HLS_STATE_CHANGED, status : ".concat(
                                                                n.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                n
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 133:
                                                      return (
                                                        n.isPlayable &&
                                                          (g._eventEmitter.emit(
                                                            "HLS_STATE_CHANGED",
                                                            br(
                                                              br({}, n),
                                                              {},
                                                              {
                                                                status:
                                                                  Ft.V
                                                                    .HLS_PLAYABLE,
                                                              }
                                                            )
                                                          ),
                                                          null ===
                                                            (fe =
                                                              g._openTelemetry) ||
                                                            void 0 === fe ||
                                                            fe.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Websocket Noti: hlsPlayableStateChanged",
                                                                status: 1,
                                                              }
                                                            )),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 135:
                                                      return (
                                                        (ge = n.downstreamUrl),
                                                        g._eventEmitter.emit(
                                                          "HLS_STARTED",
                                                          ge
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 138:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "HLS_STOPPED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 140:
                                                      return (
                                                        (ve = n.state),
                                                        (_e = n.url),
                                                        ve
                                                          ? g._eventEmitter.emit(
                                                              "WHITEBOARD_STARTED",
                                                              { state: ve }
                                                            )
                                                          : _e &&
                                                            g._eventEmitter.emit(
                                                              "WHITEBOARD_STARTED",
                                                              { url: _e }
                                                            ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 143:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "WHITEBOARD_STOPPED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 145:
                                                      return (
                                                        (be = ft(
                                                          br(
                                                            br({}, n),
                                                            {},
                                                            {
                                                              consumers: [],
                                                              dataConsumers: [],
                                                            }
                                                          )
                                                        )),
                                                        kr.dispatch(be),
                                                        g._eventEmitter.emit(
                                                          "ADD_CHARACTER",
                                                          n
                                                        ),
                                                        null ===
                                                          (ye =
                                                            g._openTelemetry) ||
                                                          void 0 === ye ||
                                                          ye.traceAutoComplete({
                                                            spanName:
                                                              "Emitted ADD_CHARACTER : ".concat(
                                                                n
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                n
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 151:
                                                      return (
                                                        (Se = n.id),
                                                        (Re = gt(Se)),
                                                        kr.dispatch(Re),
                                                        g._eventEmitter.emit(
                                                          "REMOVE_CHARACTER",
                                                          n
                                                        ),
                                                        null ===
                                                          (we =
                                                            g._openTelemetry) ||
                                                          void 0 === we ||
                                                          we.traceAutoComplete({
                                                            spanName:
                                                              "Emitted REMOVE_CHARACTER : ".concat(
                                                                n
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                n
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 157:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "CHARACTER_STATE_CHANGED",
                                                          n
                                                        ),
                                                        null ===
                                                          (ke =
                                                            g._openTelemetry) ||
                                                          void 0 === ke ||
                                                          ke.traceAutoComplete({
                                                            spanName:
                                                              "Emitted CHARACTER_STATE_CHANGED, status : ".concat(
                                                                n.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                n
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 160:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "CHARACTER_MESSAGE",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 162:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "USER_MESSAGE",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 164:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "CHARACTER_DATA",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 166:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "VIDEO_STATE_CHANGED",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 168:
                                                      return (
                                                        (Ee = n.currentTime),
                                                        g._eventEmitter.emit(
                                                          "VIDEO_SEEKED",
                                                          { currentTime: Ee }
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 171:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "CONNECTION_OPEN",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 173:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "CONNECTION_CLOSE",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 175:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "CONNECTION_CHAT_MESSAGE",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 177:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "CONNECTION_PARTICIPANT_JOIN",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 179:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "CONNECTION_PARTICIPANT_LEFT",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 181:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "PUBSUB_MESSAGE",
                                                          n
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 183:
                                                      return (
                                                        g._eventEmitter.emit(
                                                          "PEER_MODE_CHANGED",
                                                          n
                                                        ),
                                                        null ===
                                                          (Ce =
                                                            g._openTelemetry) ||
                                                          void 0 === Ce ||
                                                          Ce.traceAutoComplete({
                                                            spanName:
                                                              "Emitted PEER_MODE_CHANGED",
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                n
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 186:
                                                      return (
                                                        (Pe = n.transportId),
                                                        (Oe = n.iceParameters),
                                                        (xe =
                                                          null ===
                                                            (Te =
                                                              g._openTelemetry) ||
                                                          void 0 === Te
                                                            ? void 0
                                                            : Te.trace({
                                                                spanName:
                                                                  "Websocket Noti: restartIce for transportId :".concat(
                                                                    Pe
                                                                  ),
                                                                attributes: {
                                                                  iceParameters:
                                                                    JSON.stringify(
                                                                      Oe
                                                                    ),
                                                                },
                                                              })),
                                                        g.handleRemoteRestartIce(
                                                          {
                                                            transportId: Pe,
                                                            iceParameters: Oe,
                                                            internalSpan: xe,
                                                          }
                                                        ),
                                                        e.abrupt("break", 191)
                                                      );
                                                    case 190:
                                                      Dr.error(
                                                        'unknown Websocket notification.method "%s"',
                                                        t.method
                                                      );
                                                    case 191:
                                                    case "end":
                                                      return e.stop();
                                                  }
                                              }, e);
                                            })
                                          );
                                          return function (t) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      );
                                  case 38:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return sr.apply(this, arguments);
                      }),
                  },
                  {
                    key: "requestEntry",
                    value:
                      ((nr = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "Requesting Entry",
                                              span: this._joinSpan,
                                            })),
                                      (e.next = 3),
                                      this._socketRequest("requestEntry", {
                                        name: this._displayName,
                                      })
                                    );
                                  case 3:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: n,
                                        status: 1,
                                        message: "Entry Requested Successfully",
                                      });
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return nr.apply(this, arguments);
                      }),
                  },
                  {
                    key: "respondEntry",
                    value:
                      ((rr = (0, a.A)(
                        u().mark(function e(t, r) {
                          var n, s, i;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (i =
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName: "Responding Entry",
                                              attributes: {
                                                peerId: t,
                                                decision: r,
                                              },
                                              span: this._joinSpan,
                                            })),
                                      (e.next = 3),
                                      this._socketRequest("respondEntry", {
                                        id: t,
                                        decision: r,
                                      })
                                    );
                                  case 3:
                                    null === (s = this._openTelemetry) ||
                                      void 0 === s ||
                                      s.completeSpan({
                                        message: "Entry Responded Successfully",
                                        span: i,
                                        status: 1,
                                      });
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t) {
                        return rr.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startTranscription",
                    value:
                      ((tr = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("startTranscription()"),
                                      (s =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "startTranscription() Start",
                                              attributes: {
                                                config: t
                                                  ? JSON.stringify(t)
                                                  : "config Not Specify",
                                              },
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest(
                                        "startTranscription",
                                        { config: t }
                                      )
                                    );
                                  case 5:
                                    e.next = 13;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "startTranscription() | failed:%o",
                                        e.t0
                                      ),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: s,
                                          status: 2,
                                          message:
                                            "startTranscription() failed",
                                        }),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error startTranscription() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4031,
                                        message: e.t0.message,
                                      });
                                  case 13:
                                    null === (n = this._openTelemetry) ||
                                      void 0 === n ||
                                      n.completeSpan({
                                        span: s,
                                        status: 1,
                                        message: "startTranscription() End",
                                      });
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return tr.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopTranscription",
                    value:
                      ((er = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n, s, i;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("stopTranscription()"),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "stopTranscription() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest(
                                        "stopTranscription",
                                        {}
                                      )
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message: "stopTranscription() failed",
                                        }),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText:
                                            "Error stopTranscription() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4032,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: n,
                                        status: 1,
                                        message: "stopTranscription() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return er.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pauseAllConsumers",
                    value:
                      ((Zt = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a, o, c, d, l, p;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (s =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "pauseAllConsumers() Start",
                                              attributes: {
                                                kind: t || "Kind not specified",
                                              },
                                            })),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._socketRequest("pauseAllConsumers", {
                                        kind: void 0 === t ? "all" : t,
                                      })
                                    );
                                  case 4:
                                    if (
                                      ((a = e.sent),
                                      (o = !1),
                                      !(
                                        (null == a ||
                                        null === (i = a.consumersWithIssues) ||
                                        void 0 === i
                                          ? void 0
                                          : i.length) > 0
                                      ))
                                    ) {
                                      e.next = 13;
                                      break;
                                    }
                                    return (
                                      (e.next = 9),
                                      this._socketRequest("pauseAllConsumers", {
                                        kind: void 0 === t ? "all" : t,
                                      })
                                    );
                                  case 9:
                                    0 ===
                                      (null == (d = e.sent) ||
                                      null === (c = d.consumersWithIssues) ||
                                      void 0 === c
                                        ? void 0
                                        : c.length) && (o = !0),
                                      (e.next = 14);
                                    break;
                                  case 13:
                                    o = !0;
                                  case 14:
                                    o &&
                                      this._eventEmitter.emit(
                                        "ALL_CONSUMERS_PAUSED",
                                        { kind: t }
                                      ),
                                      (e.next = 22);
                                    break;
                                  case 17:
                                    (e.prev = 17),
                                      (e.t0 = e.catch(1)),
                                      Dr.error(
                                        "pauseAllConsumers() | failed:%o",
                                        e.t0
                                      ),
                                      null === (l = this._openTelemetry) ||
                                        void 0 === l ||
                                        l.completeSpan({
                                          span: s,
                                          status: 2,
                                          message: "pauseAllConsumers() failed",
                                        }),
                                      null === (p = this._videosdkLogs) ||
                                        void 0 === p ||
                                        p.pushLogs({
                                          logText:
                                            "Error pauseAllConsumers() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 22:
                                    null === (n = this._openTelemetry) ||
                                      void 0 === n ||
                                      n.completeSpan({
                                        span: s,
                                        status: 1,
                                        message: "pauseAllConsumers() End",
                                      });
                                  case 23:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 17]]
                          );
                        })
                      )),
                      function (e) {
                        return Zt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "resumeAllConsumers",
                    value:
                      ((Xt = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a, o, c, d, l, p;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (s =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "resumeAllConsumers() Start",
                                              attributes: {
                                                kind: t || "Kind not specified",
                                              },
                                            })),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._socketRequest(
                                        "resumeAllConsumers",
                                        { kind: void 0 === t ? "all" : t }
                                      )
                                    );
                                  case 4:
                                    if (
                                      ((a = e.sent),
                                      (o = !1),
                                      !(
                                        (null == a ||
                                        null === (i = a.consumersWithIssues) ||
                                        void 0 === i
                                          ? void 0
                                          : i.length) > 0
                                      ))
                                    ) {
                                      e.next = 13;
                                      break;
                                    }
                                    return (
                                      (e.next = 9),
                                      this._socketRequest(
                                        "resumeAllConsumers",
                                        { kind: void 0 === t ? "all" : t }
                                      )
                                    );
                                  case 9:
                                    0 ===
                                      (null == (d = e.sent) ||
                                      null === (c = d.consumersWithIssues) ||
                                      void 0 === c
                                        ? void 0
                                        : c.length) && (o = !0),
                                      (e.next = 14);
                                    break;
                                  case 13:
                                    o = !0;
                                  case 14:
                                    o &&
                                      this._eventEmitter.emit(
                                        "ALL_CONSUMERS_RESUMED",
                                        { kind: t }
                                      ),
                                      (e.next = 22);
                                    break;
                                  case 17:
                                    (e.prev = 17),
                                      (e.t0 = e.catch(1)),
                                      Dr.error(
                                        "resumeAllConsumers() | failed:%o",
                                        e.t0
                                      ),
                                      null === (l = this._openTelemetry) ||
                                        void 0 === l ||
                                        l.completeSpan({
                                          span: s,
                                          status: 2,
                                          message:
                                            "resumeAllConsumers() failed",
                                        }),
                                      null === (p = this._videosdkLogs) ||
                                        void 0 === p ||
                                        p.pushLogs({
                                          logText:
                                            "Error resumeAllConsumers() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 22:
                                    null === (n = this._openTelemetry) ||
                                      void 0 === n ||
                                      n.completeSpan({
                                        span: s,
                                        status: 1,
                                        message: "resumeAllConsumers() End",
                                      });
                                  case 23:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 17]]
                          );
                        })
                      )),
                      function (e) {
                        return Xt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startRecording",
                    value:
                      ((Yt = (0, a.A)(
                        u().mark(function e(t, r, n, s) {
                          var i, a, o, c, d;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("startRecording()"),
                                      (o =
                                        null === (i = this._openTelemetry) ||
                                        void 0 === i
                                          ? void 0
                                          : i.trace({
                                              spanName:
                                                "startRecording() Start",
                                              attributes: {
                                                webhookUrl:
                                                  t || "webhookUrl Not Specify",
                                                awsDirPath:
                                                  r || "awsDirPath Not Specify",
                                                config: n
                                                  ? JSON.stringify(n)
                                                  : "config Not Specify",
                                                transcription: s
                                                  ? JSON.stringify(s)
                                                  : "transcription Not Specify",
                                              },
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("startRecording", {
                                        webhookUrl: t,
                                        awsDirPath: r,
                                        config: n,
                                        transcription: s,
                                      })
                                    );
                                  case 5:
                                    e.next = 13;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "startRecording() | failed:%o",
                                        e.t0
                                      ),
                                      null === (c = this._openTelemetry) ||
                                        void 0 === c ||
                                        c.completeSpan({
                                          span: o,
                                          status: 2,
                                          message: "startRecording() failed",
                                        }),
                                      null === (d = this._videosdkLogs) ||
                                        void 0 === d ||
                                        d.pushLogs({
                                          logText:
                                            "Error startRecording() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4011,
                                        message: e.t0.message,
                                      });
                                  case 13:
                                    null === (a = this._openTelemetry) ||
                                      void 0 === a ||
                                      a.completeSpan({
                                        span: o,
                                        status: 1,
                                        message: "startRecording() End",
                                      });
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e, t, r, n) {
                        return Yt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopRecording",
                    value:
                      (($t = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n, s, i;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      Dr.debug("stopRecording()"),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "stopRecording() Start",
                                            })),
                                      (e.prev = 4),
                                      (e.next = 7),
                                      this._socketRequest("stopRecording", {})
                                    );
                                  case 7:
                                    e.next = 14;
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(4)),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message: "stopRecording() failed",
                                        }),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText:
                                            "Error stopRecording() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4012,
                                        message: e.t0.message,
                                      });
                                  case 14:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: n,
                                        status: 1,
                                        message: "stopRecording() End",
                                      });
                                  case 15:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 9]]
                          );
                        })
                      )),
                      function () {
                        return $t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startLivestream",
                    value:
                      ((Kt = (0, a.A)(
                        u().mark(function e(t, r) {
                          var n, s, i, a, o;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("startLivestream()"),
                                      (i =
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName:
                                                "startLivestream() Start",
                                              attributes: {
                                                outputs: t
                                                  ? JSON.stringify(t)
                                                  : "outputs Not Specify",
                                                config: r
                                                  ? JSON.stringify(r)
                                                  : "config Not Specify",
                                              },
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("startLivestream", {
                                        outputs: t,
                                        config: r,
                                      })
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          span: i,
                                          status: 1,
                                          message: "startLivestream() End",
                                        }),
                                      null === (o = this._videosdkLogs) ||
                                        void 0 === o ||
                                        o.pushLogs({
                                          logText:
                                            "Error startLivestream() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4013,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (s = this._openTelemetry) ||
                                      void 0 === s ||
                                      s.completeSpan({
                                        span: i,
                                        status: 1,
                                        message: "startLivestream() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e, t) {
                        return Kt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopLivestream",
                    value:
                      ((zt = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n, s, i;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("stopLivestream()"),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "stopLivestream() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("stopLivestream", {})
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText:
                                            "Error stopLivestream() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error stopLivestream() failed",
                                        }),
                                      this._emitError({
                                        code: 4014,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: n,
                                        status: 1,
                                        message: "stopLivestream() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return zt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startHls",
                    value:
                      ((Ht = (0, a.A)(
                        u().mark(function e(t, r) {
                          var n, s, i, a, o;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t = t || {}),
                                      (r = r || {}),
                                      Dr.debug("startHls()"),
                                      (i =
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName: "startHls() Start",
                                              attributes: {
                                                config: t
                                                  ? JSON.stringify(t)
                                                  : "config Not Specify",
                                                transcription: r
                                                  ? JSON.stringify(r)
                                                  : "transcription Not Specify",
                                              },
                                            })),
                                      (e.prev = 4),
                                      (e.next = 7),
                                      this._socketRequest("startHls", {
                                        config: t,
                                        transcription: r,
                                      })
                                    );
                                  case 7:
                                    e.next = 15;
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(4)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText: "Error startHls() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.completeSpan({
                                          span: i,
                                          status: 2,
                                          message: "Error startHls() failed",
                                        }),
                                      this._emitError({
                                        code: 4016,
                                        message: e.t0.message,
                                      }),
                                      Dr.error("startHls() | failed:%o", e.t0);
                                  case 15:
                                    null === (s = this._openTelemetry) ||
                                      void 0 === s ||
                                      s.completeSpan({
                                        span: i,
                                        status: 1,
                                        message: "startHlsSpan() End",
                                      });
                                  case 16:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 9]]
                          );
                        })
                      )),
                      function (e, t) {
                        return Ht.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopHls",
                    value:
                      ((Vt = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n, s, i;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("stopHls()"),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "stopHls() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("stopHls", {})
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText: "Error stopHls() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: n,
                                          status: 2,
                                          message: "Error stopHls() failed",
                                        }),
                                      this._emitError({
                                        code: 4017,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: n,
                                        status: 1,
                                        message: "stopHls() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return Vt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startWhiteboard",
                    value:
                      ((qt = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n, s;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("startWhiteboard()"),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "startWhiteboard() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("startWhiteboard", {
                                        version: "v2",
                                      })
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "startWhiteboard() | failed:%o",
                                        e.t0
                                      ),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error startWhiteboard() failed",
                                        }),
                                      this._emitError({
                                        code: 3021,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: n,
                                        status: 1,
                                        message: "startWhiteboard() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return qt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopWhiteboard",
                    value:
                      ((Wt = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n, s;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("stopWhiteboard()"),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "stopWhiteboard() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("stopWhiteboard", {})
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "stopWhiteboard() | failed:%o",
                                        e.t0
                                      ),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error stopWhiteboard() failed",
                                        }),
                                      this._emitError({
                                        code: 3022,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: n,
                                        status: 1,
                                        message: "stopWhiteboard() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return Wt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "joinCharacter",
                    value:
                      ((Ut = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("joinCharacter()"),
                                      (s =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "joinCharacter() Start",
                                              attributes: {
                                                config: t
                                                  ? JSON.stringify(t)
                                                  : "config Not Specify",
                                              },
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("joinCharacter", {
                                        config: t,
                                      })
                                    );
                                  case 5:
                                    return e.abrupt("return", e.sent);
                                  case 8:
                                    (e.prev = 8),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "joinCharacter() | failed:%o",
                                        e.t0
                                      ),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: s,
                                          status: 2,
                                          message: "joinCharacter() failed",
                                        }),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error joinCharacter() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4033,
                                        message: e.t0.message,
                                      });
                                  case 14:
                                    return (
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          span: s,
                                          status: 1,
                                          message: "joinCharacter() End",
                                        }),
                                      e.abrupt("return", !1)
                                    );
                                  case 16:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 8]]
                          );
                        })
                      )),
                      function (e) {
                        return Ut.apply(this, arguments);
                      }),
                  },
                  {
                    key: "switchTo",
                    value:
                      ((Xe = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a, o, c, d;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (n = t.meetingId),
                                      (s = t.participantId),
                                      (i = t.token),
                                      (a =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "switchTo() Start",
                                              attributes: {
                                                "peer.id": s,
                                                meetingId: n,
                                              },
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("switchToMeeting", {
                                        meetingId: n,
                                        participantId: s,
                                        secret: i || this._secret,
                                      })
                                    );
                                  case 5:
                                    null === (o = this._openTelemetry) ||
                                      void 0 === o ||
                                      o.completeSpan({
                                        span: a,
                                        status: 1,
                                        message: "switchTo() Success",
                                      }),
                                      (e.next = 12);
                                    break;
                                  case 8:
                                    (e.prev = 8),
                                      (e.t0 = e.catch(2)),
                                      null === (c = this._openTelemetry) ||
                                        void 0 === c ||
                                        c.completeSpan({
                                          span: a,
                                          status: 2,
                                          message: "switchTo() failed",
                                        }),
                                      null === (d = this._videosdkLogs) ||
                                        void 0 === d ||
                                        d.pushLogs({
                                          logText: "Error switchTo() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 8]]
                          );
                        })
                      )),
                      function (e) {
                        return Xe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "removeCharacter",
                    value:
                      ((Ye = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("removeCharacter()"),
                                      (s =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "removeCharacter() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("leaveCharacter", {
                                        config: t,
                                      })
                                    );
                                  case 5:
                                    e.next = 14;
                                    break;
                                  case 7:
                                    return (
                                      (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "removeCharacter() | failed:%o",
                                        e.t0
                                      ),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: s,
                                          status: 2,
                                          message: "removeCharacter() failed",
                                        }),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error removeCharacter() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4034,
                                        message: e.t0.message,
                                      }),
                                      e.abrupt("return", !1)
                                    );
                                  case 14:
                                    return (
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          span: s,
                                          status: 1,
                                          message: "removeCharacter() End",
                                        }),
                                      e.abrupt("return", !0)
                                    );
                                  case 16:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Ye.apply(this, arguments);
                      }),
                  },
                  {
                    key: "sendCharacterMessage",
                    value:
                      (($e = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.interactionId),
                                      (n = t.text),
                                      Dr.debug("sendCharacterMessage()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest(
                                        "sendCharacterMessage",
                                        { interactionId: r, text: n }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "sendCharacterMessage() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 4035,
                                        message: e.t0.message,
                                      });
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return $e.apply(this, arguments);
                      }),
                  },
                  {
                    key: "interruptCharacter",
                    value:
                      ((Ke = (0, a.A)(
                        u().mark(function e(t) {
                          var r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.interactionId),
                                      Dr.debug("interruptCharacter()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest(
                                        "interruptCharacter",
                                        { interactionId: r }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "interruptCharacter() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 4036,
                                        message: e.t0.message,
                                      });
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Ke.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pinStateChange",
                    value:
                      ((Ge = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (n = t.peerId),
                                      (s = t.state),
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName:
                                            "Pin state Change for ".concat(n),
                                          attributes: {
                                            state: s ? JSON.stringify(s) : null,
                                          },
                                          status: 1,
                                        }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("pinStateChanged", {
                                        peerId: n,
                                        state: s,
                                      })
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText:
                                            "Error pinStateChange() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error("pinStateChange() | failed");
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Ge.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startVideo",
                    value:
                      ((ze = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (n = t.link),
                                      Dr.debug("startVideo()"),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: "startVideo() Calling",
                                          logType: "INFO",
                                        }),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._socketRequest("startVideo", {
                                        link: n,
                                      })
                                    );
                                  case 6:
                                    e.next = 13;
                                    break;
                                  case 8:
                                    (e.prev = 8),
                                      (e.t0 = e.catch(3)),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText: "Error startVideo() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "startVideo() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 3023,
                                        message: e.t0.message,
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 8]]
                          );
                        })
                      )),
                      function (e) {
                        return ze.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopVideo",
                    value:
                      ((He = (0, a.A)(
                        u().mark(function e() {
                          var t, r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("stopVideo()"),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText: "stopVideo() Calling",
                                          logType: "INFO",
                                        }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("stopVideo", {})
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: "Error stopVideo() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error("stopVideo() | failed:%o", e.t0),
                                      this._emitError({
                                        code: 3024,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return He.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pauseVideo",
                    value:
                      ((Ve = (0, a.A)(
                        u().mark(function e(t) {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("pauseVideo()"),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._socketRequest("pauseVideo", {
                                        currentTime: t,
                                      })
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(1)),
                                      Dr.error(
                                        "pauseVideo() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 3025,
                                        message: e.t0.message,
                                      });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 6]]
                          );
                        })
                      )),
                      function (e) {
                        return Ve.apply(this, arguments);
                      }),
                  },
                  {
                    key: "resumeVideo",
                    value:
                      ((We = (0, a.A)(
                        u().mark(function e() {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("resumeVideo()"),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._socketRequest("resumeVideo", {})
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(1)),
                                      Dr.error(
                                        "resumeVideo() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 3026,
                                        message: e.t0.message,
                                      });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 6]]
                          );
                        })
                      )),
                      function () {
                        return We.apply(this, arguments);
                      }),
                  },
                  {
                    key: "seekVideo",
                    value:
                      ((Ue = (0, a.A)(
                        u().mark(function e(t) {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("seekVideo()"),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._socketRequest("seekVideo", {
                                        currentTime: t,
                                      })
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(1)),
                                      Dr.error("seekVideo() | failed:%o", e.t0),
                                      this._emitError({
                                        code: 3031,
                                        message: e.t0.message,
                                      });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 6]]
                          );
                        })
                      )),
                      function (e) {
                        return Ue.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enablePeerMic",
                    value:
                      ((Fe = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Enabling peer ".concat(
                                            t,
                                            " Mic"
                                          ),
                                          status: 1,
                                        }),
                                      Dr.debug("enablePeerMic()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("enablePeerMic", {
                                        peerId: t,
                                      })
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error enablePeerMic() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "enablePeerMic() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Fe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableAdaptiveSubscription",
                    value:
                      ((Be = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.prev = 0),
                                      (e.next = 3),
                                      this._socketRequest(
                                        "enableAdaptiveSubscription"
                                      )
                                    );
                                  case 3:
                                    e.next = 8;
                                    break;
                                  case 5:
                                    (e.prev = 5),
                                      (e.t0 = e.catch(0)),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error enableAdaptiveSubscription() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 8:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[0, 5]]
                          );
                        })
                      )),
                      function () {
                        return Be.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableAdaptiveSubscription",
                    value:
                      ((je = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.prev = 0),
                                      (e.next = 3),
                                      this._socketRequest(
                                        "disableAdaptiveSubscription"
                                      )
                                    );
                                  case 3:
                                    e.next = 8;
                                    break;
                                  case 5:
                                    (e.prev = 5),
                                      (e.t0 = e.catch(0)),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error disableAdaptiveSubscription() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 8:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[0, 5]]
                          );
                        })
                      )),
                      function () {
                        return je.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disablePeerMic",
                    value:
                      ((Ne = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Disabling peer ".concat(
                                            t,
                                            " Mic"
                                          ),
                                          status: 1,
                                        }),
                                      Dr.debug("disablePeerMic()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("disablePeerMic", {
                                        peerId: t,
                                      })
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error disablePeerMic() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "disablePeerMic() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Ne.apply(this, arguments);
                      }),
                  },
                  {
                    key: "consumeWebcamStreams",
                    value:
                      ((Le = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      Dr.debug("consumeWebcamStreams()"),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "consumeWebcamStreams() Calling",
                                          logType: "INFO",
                                          attributes: { peerId: t },
                                        }),
                                      (e.prev = 4),
                                      (e.next = 7),
                                      this._socketRequest(
                                        "consumeVideoStreams",
                                        { peerId: t }
                                      )
                                    );
                                  case 7:
                                    e.next = 13;
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(4)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error consumeWebcamStreams() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "consumeWebcamStreams() | failed:%o",
                                        e.t0
                                      );
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return Le.apply(this, arguments);
                      }),
                  },
                  {
                    key: "consumeMicStreams",
                    value:
                      ((Ie = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("consumeMicStreams()"),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "consumeMicStreams() Calling",
                                          logType: "INFO",
                                          attributes: { peerId: t },
                                        }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest(
                                        "consumeAudioStreams",
                                        { peerId: t }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error consumeMicStreams() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "consumeMicStreams() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Ie.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopConsumingMicStreams",
                    value:
                      ((De = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      Dr.debug("stopConsumingAudioStreams()"),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._socketRequest(
                                        "stopConsumingAudioStreams",
                                        { peerId: t }
                                      )
                                    );
                                  case 6:
                                    null === (r = this._videosdkLogs) ||
                                      void 0 === r ||
                                      r.pushLogs({
                                        logText:
                                          "stopConsumingAudioStreams() Calling",
                                        logType: "INFO",
                                        attributes: { peerId: t },
                                      }),
                                      (e.next = 13);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(3)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error stopConsumingMicStreams() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "stopConsumingMicStreams() | failed:%o",
                                        e.t0
                                      );
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return De.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopConsumingWebcamStreams",
                    value:
                      ((xe = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("stopConsumingWebcamStreams()"),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "stopConsumingWebcamStreams() Calling",
                                          logType: "INFO",
                                          attributes: { peerId: t },
                                        }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest(
                                        "stopConsumingVideoStreams",
                                        { peerId: t }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error stopConsumingWebcamStreams() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "stopConsumingWebcamStreams() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return xe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeMode",
                    value:
                      ((Oe = (0, a.A)(
                        u().mark(function e(t) {
                          var r,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g,
                            v,
                            _,
                            y,
                            b,
                            w = this;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((n =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "changeMode() Calling with mode: ".concat(
                                                  t
                                                ),
                                            })),
                                      (s = this._mode),
                                      (e.prev = 2),
                                      s !== t)
                                    ) {
                                      e.next = 7;
                                      break;
                                    }
                                    throw (
                                      (null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: n,
                                          status: 2,
                                          message: "changeMode() Ending",
                                        }),
                                      null === (o = this._videosdkLogs) ||
                                        void 0 === o ||
                                        o.pushLogs({
                                          logText: "You are already in ".concat(
                                            t,
                                            " mode"
                                          ),
                                          logType: "INFO",
                                        }),
                                      new Error(
                                        "You are already in ".concat(t, " mode")
                                      ))
                                    );
                                  case 7:
                                    if (
                                      ((c = (function () {
                                        var e = (0, a.A)(
                                          u().mark(function e(t, r) {
                                            return u().wrap(function (e) {
                                              for (;;)
                                                switch ((e.prev = e.next)) {
                                                  case 0:
                                                    return (
                                                      (e.next = 2),
                                                      w._socketRequest(
                                                        "createWebRtcTransport",
                                                        {
                                                          preferredProtocol:
                                                            w._preferredProtocol,
                                                          producing: t,
                                                          consuming: r,
                                                          sctpCapabilities:
                                                            w._useDataChannel
                                                              ? w
                                                                  ._mediasoupDevice
                                                                  .sctpCapabilities
                                                              : void 0,
                                                        }
                                                      )
                                                    );
                                                  case 2:
                                                    return e.abrupt(
                                                      "return",
                                                      e.sent
                                                    );
                                                  case 3:
                                                  case "end":
                                                    return e.stop();
                                                }
                                            }, e);
                                          })
                                        );
                                        return function (t, r) {
                                          return e.apply(this, arguments);
                                        };
                                      })()),
                                      !(0, Bt.kR)(t))
                                    ) {
                                      e.next = 36;
                                      break;
                                    }
                                    return (
                                      (this._consume = !0),
                                      (this._produce = !0),
                                      (this._mode = t),
                                      (this._mediasoupDevice = new Me.Device({
                                        handlerName: this._handlerName,
                                      })),
                                      (e.next = 15),
                                      this._socketRequest(
                                        "getRouterRtpCapabilities"
                                      )
                                    );
                                  case 15:
                                    return (
                                      (l = e.sent),
                                      "react-native" !==
                                        this._deviceInfo.sdkType &&
                                        navigator.userAgent.includes(
                                          "Firefox"
                                        ) &&
                                        (l.headerExtensions =
                                          null === (p = l.headerExtensions) ||
                                          void 0 === p
                                            ? void 0
                                            : p.filter(function (e) {
                                                return (
                                                  "urn:3gpp:video-orientation" !=
                                                  e.uri
                                                );
                                              })),
                                      (e.next = 19),
                                      this._mediasoupDevice.load({
                                        routerRtpCapabilities: l,
                                      })
                                    );
                                  case 19:
                                    if (!this._produce) {
                                      e.next = 24;
                                      break;
                                    }
                                    return (e.next = 22), c(!0, !1);
                                  case 22:
                                    (h = e.sent),
                                      this.createProducerTransport(h, n);
                                  case 24:
                                    if (
                                      s === Bt.nI.RECV_ONLY ||
                                      !this._consume
                                    ) {
                                      e.next = 29;
                                      break;
                                    }
                                    return (e.next = 27), c(!1, !0);
                                  case 27:
                                    (m = e.sent),
                                      this.createConsumerTransport(m, n);
                                  case 29:
                                    return (
                                      null === (d = this._openTelemetry) ||
                                        void 0 === d ||
                                        d.traceAutoComplete({
                                          spanName:
                                            "Sending changeMode request to server",
                                          span: n,
                                          status: 1,
                                        }),
                                      (e.next = 32),
                                      this._socketRequest("changeMode", {
                                        mode: t,
                                      })
                                    );
                                  case 32:
                                    this._produce &&
                                      (kr.dispatch(
                                        rt({
                                          canSendMic:
                                            this._mediasoupDevice.canProduce(
                                              "audio"
                                            ),
                                          canSendWebcam:
                                            this._mediasoupDevice.canProduce(
                                              "video"
                                            ),
                                        })
                                      ),
                                      this._micEnabled &&
                                        this.enableMic(
                                          this.customMicrophoneAudioTrack
                                        ),
                                      this._webcamEnabled &&
                                        this.enableWebcam(
                                          this.customCameraVideoTrack,
                                          n
                                        )),
                                      window.SHOW_INFO &&
                                        ((f = kr.getState()),
                                        (g = f.me),
                                        kr.dispatch(tt(g.id))),
                                      (e.next = 62);
                                    break;
                                  case 36:
                                    if (
                                      !(0, Bt.kR)(s) ||
                                      t !== Bt.nI.RECV_ONLY
                                    ) {
                                      e.next = 44;
                                      break;
                                    }
                                    return (
                                      (this._produce = !1),
                                      (this._mode = t),
                                      this._closeProducersAndTransport(),
                                      (e.next = 42),
                                      this._socketRequest("changeMode", {
                                        mode: t,
                                      })
                                    );
                                  case 42:
                                    e.next = 62;
                                    break;
                                  case 44:
                                    if (
                                      !(0, Bt.wZ)(s) ||
                                      t !== Bt.nI.RECV_ONLY
                                    ) {
                                      e.next = 54;
                                      break;
                                    }
                                    return (
                                      (this._consume = !0),
                                      (this._mode = t),
                                      (e.next = 49),
                                      this._setupWebrtcTransport(n)
                                    );
                                  case 49:
                                    return (
                                      (e.next = 51),
                                      this._socketRequest("changeMode", {
                                        mode: t,
                                      })
                                    );
                                  case 51:
                                    window.SHOW_INFO &&
                                      ((v = kr.getState()),
                                      (_ = v.me),
                                      kr.dispatch(tt(_.id))),
                                      (e.next = 62);
                                    break;
                                  case 54:
                                    if (!(0, Bt.wZ)(t)) {
                                      e.next = 62;
                                      break;
                                    }
                                    return (
                                      (e.next = 57),
                                      this._socketRequest("changeMode", {
                                        mode: t,
                                      })
                                    );
                                  case 57:
                                    (this._consume = !1),
                                      (this._produce = !1),
                                      (this._mode = t),
                                      this._dataConsumers.clear(),
                                      this._closeTransports();
                                  case 62:
                                    e.next = 68;
                                    break;
                                  case 64:
                                    (e.prev = 64),
                                      (e.t0 = e.catch(2)),
                                      null === (y = this._videosdkLogs) ||
                                        void 0 === y ||
                                        y.pushLogs({
                                          logText: "Error changeMode(".concat(
                                            t,
                                            ") | failed"
                                          ),
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (b = this._openTelemetry) ||
                                        void 0 === b ||
                                        b.completeSpan({
                                          span: n,
                                          status: 2,
                                          message: "changeMode(".concat(
                                            t,
                                            ") | failed"
                                          ),
                                        });
                                  case 68:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 64]]
                          );
                        })
                      )),
                      function (e) {
                        return Oe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_closeProducersAndTransport",
                    value: function () {
                      var e;
                      this._webcamProducer &&
                        (this._webcamProducer.close(),
                        (this._webcamProducer = null)),
                        this._micProducer &&
                          (this._micProducer.close(),
                          (this._micProducer = null)),
                        this._shareProducer &&
                          (this._shareProducer.close(),
                          (this._shareProducer = null)),
                        this._shareAudioProducer &&
                          (this._shareAudioProducer.close(),
                          (this._shareAudioProducer = null)),
                        null === (e = this._sendTransport) ||
                          void 0 === e ||
                          e.close(),
                        (this._sendTransport = null);
                    },
                  },
                  {
                    key: "_closeTransports",
                    value: function () {
                      var e, t;
                      this._sendTransport &&
                        (null === (e = this._sendTransport) ||
                          void 0 === e ||
                          e.close(),
                        (this._sendTransport = null));
                      this._recvTransport &&
                        (null === (t = this._recvTransport) ||
                          void 0 === t ||
                          t.close(),
                        (this._recvTransport = null));
                    },
                  },
                  {
                    key: "_setupWebrtcTransport",
                    value:
                      ((Pe = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (this._mediasoupDevice = new Me.Device({
                                        handlerName: this._handlerName,
                                      })),
                                      (e.next = 3),
                                      this._socketRequest(
                                        "getRouterRtpCapabilities"
                                      )
                                    );
                                  case 3:
                                    return (
                                      (r = e.sent),
                                      "react-native" !==
                                        this._deviceInfo.sdkType &&
                                        navigator.userAgent.includes(
                                          "Firefox"
                                        ) &&
                                        (r.headerExtensions =
                                          null === (n = r.headerExtensions) ||
                                          void 0 === n
                                            ? void 0
                                            : n.filter(function (e) {
                                                return (
                                                  "urn:3gpp:video-orientation" !=
                                                  e.uri
                                                );
                                              })),
                                      (e.next = 7),
                                      this._mediasoupDevice.load({
                                        routerRtpCapabilities: r,
                                      })
                                    );
                                  case 7:
                                    return (
                                      (e.next = 9),
                                      this._socketRequest(
                                        "createWebRtcTransport",
                                        {
                                          preferredProtocol:
                                            this._preferredProtocol,
                                          producing: !1,
                                          consuming: !0,
                                          sctpCapabilities: this._useDataChannel
                                            ? this._mediasoupDevice
                                                .sctpCapabilities
                                            : void 0,
                                        }
                                      )
                                    );
                                  case 9:
                                    (s = e.sent),
                                      this.createConsumerTransport(s, t);
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return Pe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enablePeerWebcam",
                    value:
                      ((Te = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Enabling peer ".concat(
                                            t,
                                            " Webcam"
                                          ),
                                          status: 1,
                                        }),
                                      Dr.debug("enablePeerWebcam()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("enablePeerWebcam", {
                                        peerId: t,
                                      })
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error enablePeerWebcam | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "enablePeerWebcam() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Te.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disablePeerWebcam",
                    value:
                      ((Ce = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Disabling peer ".concat(
                                            t,
                                            " Webcam"
                                          ),
                                          status: 1,
                                        }),
                                      Dr.debug("disablePeerWebcam()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("disablePeerWebcam", {
                                        peerId: t,
                                      })
                                    );
                                  case 5:
                                    e.next = 10;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error disablePeerWebcam | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Ce.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getMicStats",
                    value: function (e) {
                      var t = this;
                      if (this._micProducer) {
                        var r = 0;
                        e.onStatsCollected = function (e) {
                          var n;
                          (t._stats.producerStats ||
                            (t._stats.producerStats = {}),
                          t._stats.producerStats.audio ||
                            (t._stats.producerStats.audio = []),
                          t._micProducer) &&
                            (t._latestStats[
                              null === (n = t._micProducer) || void 0 === n
                                ? void 0
                                : n.id
                            ] = []);
                          e.audio.forEach(function (e) {
                            var r;
                            t._micProducer &&
                              t._latestStats[
                                null === (r = t._micProducer) || void 0 === r
                                  ? void 0
                                  : r.id
                              ].push(e);
                          }),
                            r % 5 == 0 &&
                              null != t._micProducer &&
                              t._stats.producerStats.audio.push(
                                br(
                                  { timestamp: new Date() },
                                  t._latestStats[t._micProducer.id]
                                    ? t._latestStats[t._micProducer.id][0]
                                    : {}
                                )
                              ),
                            r++;
                        };
                      }
                    },
                  },
                  {
                    key: "enableMic",
                    value:
                      ((Ee = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r,
                            n,
                            s,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g,
                            v,
                            _,
                            y,
                            b,
                            w,
                            S,
                            R,
                            k,
                            E,
                            C,
                            T,
                            P,
                            O,
                            x,
                            D,
                            I,
                            A,
                            M,
                            L,
                            N,
                            j,
                            B,
                            F,
                            U,
                            W,
                            q,
                            V,
                            H,
                            z,
                            G,
                            K,
                            $,
                            J,
                            Q,
                            Y,
                            X,
                            Z,
                            ee,
                            te,
                            re,
                            ne,
                            se,
                            ie,
                            ae,
                            oe,
                            ce,
                            de,
                            le,
                            ue,
                            pe,
                            he,
                            me,
                            fe,
                            ge,
                            ve,
                            _e,
                            ye = this,
                            be = arguments;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((a =
                                        be.length > 0 && void 0 !== be[0]
                                          ? be[0]
                                          : void 0),
                                      (o =
                                        be.length > 1 && void 0 !== be[1]
                                          ? be[1]
                                          : void 0),
                                      (c =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "enableMic() Calling ".concat(
                                                  a
                                                    ? "With Custom Audio Track"
                                                    : "Without Custom Audio Track "
                                                ),
                                              attributes: {
                                                customAudioConfig: a
                                                  ? JSON.stringify(a)
                                                  : "Not Specify Custom Track",
                                              },
                                              span: o || null,
                                            })),
                                      Dr.debug("enableMic()"),
                                      (this._micEnabled = !0),
                                      !this._micProducer)
                                    ) {
                                      e.next = 28;
                                      break;
                                    }
                                    if (
                                      ((p =
                                        null === (d = this._openTelemetry) ||
                                        void 0 === d
                                          ? void 0
                                          : d.trace({
                                              spanName: "Mic Producer found",
                                              span: c,
                                            })),
                                      a &&
                                        (null === (h = this._openTelemetry) ||
                                          void 0 === h ||
                                          h.traceAutoComplete({
                                            spanName:
                                              "Stopping customAudioTrack",
                                            span: c,
                                            status: 1,
                                          }),
                                        a.getTracks().forEach(function (e) {
                                          e.stop();
                                        })),
                                      null === (l = this._openTelemetry) ||
                                        void 0 === l ||
                                        l.completeSpan({
                                          span: p,
                                          status: 1,
                                          message: "Resuming Mic Producer",
                                        }),
                                      this._micProducer.resume(),
                                      (m = this._micProducer),
                                      !this._sendTransport)
                                    ) {
                                      e.next = 19;
                                      break;
                                    }
                                    return (
                                      (e.next = 14),
                                      this._sendTransport.produce({
                                        track: this._micProducer.track,
                                        encodings:
                                          this._micProducer._appData.encodings,
                                        codecOptions:
                                          this._micProducer._appData
                                            .codecOptions,
                                        appData: {
                                          isEncrypted: this.isE2EEEnabled,
                                        },
                                        onRtpSender: function (e) {
                                          e.senderStreams =
                                            e.createEncodedStreams();
                                        },
                                      })
                                    );
                                  case 14:
                                    (this._micProducer = e.sent),
                                      this.e2eeManager &&
                                        this.e2eeManager.emit(
                                          "NEW_PRODUCER",
                                          this._micProducer
                                        ),
                                      this._micProducer
                                        ? ((g = ct({
                                            id: this._micProducer.id,
                                            paused: this._micProducer.paused,
                                            track: this._micProducer.track,
                                            rtpParameters:
                                              this._micProducer.rtpParameters,
                                            codec:
                                              this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                                "/"
                                              )[1],
                                            encodings: m._appData.encodings,
                                            codecOptions:
                                              m._appData.codecOptions,
                                            instance: this._micProducer,
                                            rtpSender:
                                              this._micProducer.rtpSender,
                                          })),
                                          this._micProducer.track.getConstraints()
                                            .deviceId &&
                                            (this._mic.device = this._mics.get(
                                              this._micProducer.track.getConstraints()
                                                .deviceId
                                            )),
                                          kr.dispatch(g),
                                          this._eventEmitter.emit(
                                            g.type,
                                            g.payload
                                          ),
                                          null === (f = this._openTelemetry) ||
                                            void 0 === f ||
                                            f.completeSpan({
                                              span: c,
                                              status: 1,
                                              message: "Enable Mic Successful",
                                            }))
                                        : null === (v = this._openTelemetry) ||
                                          void 0 === v ||
                                          v.completeSpan({
                                            span: c,
                                            status: 2,
                                            message:
                                              "Error in enableMic() :: micProducer null",
                                          }),
                                      (e.next = 22);
                                    break;
                                  case 19:
                                    return (
                                      null === (_ = this._videosdkLogs) ||
                                        void 0 === _ ||
                                        _.pushLogs({
                                          logText:
                                            It.q
                                              .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                              .message,
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: Transport is not setup",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      this._emitError(
                                        It.q
                                          .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 22:
                                    return (
                                      (y = this._metrics.addNewProbe(
                                        this._micProducer,
                                        { name: "mic_producer" }
                                      )),
                                      this._micProducer.observer.on(
                                        "pause",
                                        function () {
                                          null == y || y.stop(),
                                            (ye._latestStats[
                                              ye._micProducer.id
                                            ] = []),
                                            ye._metrics.removeExistingProbe(y);
                                        }
                                      ),
                                      this._micProducer.observer.on(
                                        "close",
                                        function () {
                                          null == y || y.stop(),
                                            (ye._latestStats[
                                              ye._micProducer.id
                                            ] = []),
                                            ye._metrics.removeExistingProbe(y);
                                        }
                                      ),
                                      this.getMicStats(y),
                                      y.start(),
                                      e.abrupt("return")
                                    );
                                  case 28:
                                    if (!this._mediasoupDevice) {
                                      e.next = 37;
                                      break;
                                    }
                                    if (
                                      this._mediasoupDevice.canProduce("audio")
                                    ) {
                                      e.next = 35;
                                      break;
                                    }
                                    return (
                                      (S =
                                        "react-native" ==
                                        this._deviceInfo.sdkType
                                          ? It.q.ERROR_RN_MIC_ACCESS_UNAVAILABLE
                                              .message
                                          : It.q
                                              .ERROR_MICROPHONE_ACCESS_UNAVAILABLE
                                              .message),
                                      null === (b = this._videosdkLogs) ||
                                        void 0 === b ||
                                        b.pushLogs({
                                          logText: S,
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: Microphone access unavailable",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      Dr.error(
                                        "enableMic() | cannot produce audio"
                                      ),
                                      null === (w = this._openTelemetry) ||
                                        void 0 === w ||
                                        w.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableMic() :: ".concat(
                                              S
                                            ),
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 35:
                                    e.next = 40;
                                    break;
                                  case 37:
                                    return (
                                      null === (R = this._videosdkLogs) ||
                                        void 0 === R ||
                                        R.pushLogs({
                                          logText:
                                            "Oops! Something went wrong, and we're unable to enable the mic. Please try again.",
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic(): Something went wrong.",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (k = this._openTelemetry) ||
                                        void 0 === k ||
                                        k.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableMic() :: mediasoupDevice is undefined",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 40:
                                    if (((e.prev = 40), this._externalVideo)) {
                                      e.next = 107;
                                      break;
                                    }
                                    return (
                                      Dr.debug(
                                        "enableMic() | calling getUserMedia()"
                                      ),
                                      (e.next = 45),
                                      this._updateMics(c)
                                    );
                                  case 45:
                                    if (this._mic.device) {
                                      e.next = 48;
                                      break;
                                    }
                                    throw new Error(
                                      "Whoops! No Microphone Found: We couldn't find your microphone. Is it plugged in and turned on? If so, try restarting your computer or checking your device settings. Also, ensure you're on a secure website (https://)."
                                    );
                                  case 48:
                                    try {
                                      a &&
                                        "ended" ==
                                          (E = a.getAudioTracks()[0])
                                            .readyState &&
                                        ((E = null),
                                        (A =
                                          It.q.ERROR_CUSTOM_AUDIO_TRACK_ENDED),
                                        null === (I = this._videosdkLogs) ||
                                          void 0 === I ||
                                          I.pushLogs({
                                            logText: A.message,
                                            logType: "INFO",
                                            attributes: {
                                              error:
                                                "In enableMic() :: Invalid Custom Track Passed",
                                            },
                                            dashboardLog: !0,
                                          }),
                                        this._emitError(A));
                                    } catch (e) {
                                      (L =
                                        It.q.ERROR_INVALID_CUSTOM_AUDIO_TRACK),
                                        null === (M = this._videosdkLogs) ||
                                          void 0 === M ||
                                          M.pushLogs({
                                            logText: L.message,
                                            logType: "INFO",
                                            attributes: {
                                              error:
                                                "In enableMic() :: Invalid Custom Track Passed",
                                            },
                                          }),
                                        this._emitError(L),
                                        console.log(
                                          "Invalid Custom Audio Track Passed. Reverting to default Error: ".concat(
                                            e
                                          )
                                        );
                                    }
                                    if (E) {
                                      e.next = 105;
                                      break;
                                    }
                                    return (
                                      (B =
                                        null === (N = this._openTelemetry) ||
                                        void 0 === N
                                          ? void 0
                                          : N.trace({
                                              spanName: "Creating Track",
                                              span: c,
                                            })),
                                      (e.prev = 51),
                                      (e.next = 54),
                                      navigator.mediaDevices.getUserMedia({
                                        audio: {
                                          deviceId: {
                                            ideal: this._mic.device.deviceId,
                                          },
                                          channelCount: 1,
                                          noiseSuppression: !0,
                                          echoCancellation: !0,
                                          googEchoCancellation: !0,
                                          googEchoCancellation2: !0,
                                          googAutoGainControl: !0,
                                          googAutoGainControl2: !0,
                                          googNoiseSuppression: !0,
                                          googNoiseSuppression2: !0,
                                          googHighpassFilter: !0,
                                        },
                                      })
                                    );
                                  case 54:
                                    (F = e.sent), (e.next = 103);
                                    break;
                                  case 57:
                                    if (
                                      ((e.prev = 57),
                                      (e.t0 = e.catch(51)),
                                      null === (U = this._openTelemetry) ||
                                        void 0 === U ||
                                        U.completeSpan({
                                          message:
                                            "Error in enableMic() :: ".concat(
                                              e.t0.message
                                            ),
                                          span: B,
                                          status: 2,
                                        }),
                                      "SecurityError" !== e.t0.name)
                                    ) {
                                      e.next = 68;
                                      break;
                                    }
                                    (V =
                                      It.q
                                        .ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED),
                                      (H = V.message),
                                      this._emitError(V),
                                      null === (W = this._videosdkLogs) ||
                                        void 0 === W ||
                                        W.pushLogs({
                                          logText: H,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: Microphone Permission Denied or Dismissed",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (q = this._openTelemetry) ||
                                        void 0 === q ||
                                        q.completeSpan({
                                          message:
                                            "Error in enableMic() :: occurred in creating audio track, ".concat(
                                              H
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      (e.next = 102);
                                    break;
                                  case 68:
                                    if ("DOMException" !== e.t0.name) {
                                      e.next = 76;
                                      break;
                                    }
                                    (K = It.q.ERROR_RN_MIC_NOT_FOUND),
                                      ($ = K.message),
                                      this._emitError(K),
                                      null === (z = this._videosdkLogs) ||
                                        void 0 === z ||
                                        z.pushLogs({
                                          logText: $,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: No Microphone Device Found",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (G = this._openTelemetry) ||
                                        void 0 === G ||
                                        G.completeSpan({
                                          message:
                                            "Error in enableMic() :: occurred in creating audio track, ".concat(
                                              $
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      (e.next = 102);
                                    break;
                                  case 76:
                                    if (!(e.t0 instanceof DOMException)) {
                                      e.next = 99;
                                      break;
                                    }
                                    (e.t1 = e.t0.name),
                                      (e.next =
                                        "NotAllowedError" === e.t1
                                          ? 80
                                          : "NotReadableError" === e.t1
                                          ? 83
                                          : "NotFoundError" === e.t1
                                          ? 86
                                          : 93);
                                    break;
                                  case 80:
                                    return (
                                      (J = this.handleNotAllowedError(
                                        e.t0,
                                        this._openTelemetry,
                                        this._videosdkLogs,
                                        c,
                                        "audio"
                                      )),
                                      this._emitError(J),
                                      e.abrupt("break", 97)
                                    );
                                  case 83:
                                    return (
                                      (Q = this.handleNotReadableError(
                                        e.t0,
                                        this._openTelemetry,
                                        this._videosdkLogs,
                                        c,
                                        "audio"
                                      )),
                                      this._emitError(Q),
                                      e.abrupt("break", 97)
                                    );
                                  case 86:
                                    return (
                                      (Y = It.q.ERROR_MICROPHONE_NOT_FOUND),
                                      navigator &&
                                        navigator.userAgent &&
                                        -1 !=
                                          navigator.userAgent.indexOf(
                                            "Firefox"
                                          ) &&
                                        (Y =
                                          It.q
                                            .ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS),
                                      (X = Y.message),
                                      this._emitError(Y),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: X,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: No Microphone Device Found",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          message:
                                            "Error in enableMic() :: occurred in creating audio track, ".concat(
                                              X
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      e.abrupt("break", 97)
                                    );
                                  case 93:
                                    return (
                                      (Z =
                                        "An error occurred in creating audio track, ".concat(
                                          e.t0.message
                                        )),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: ".concat(
                                                Z
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          message:
                                            "Error in enableMic() :: ".concat(
                                              Z
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      e.abrupt("break", 97)
                                    );
                                  case 97:
                                    e.next = 102;
                                    break;
                                  case 99:
                                    (re =
                                      "An error occurred in creating audio track, ".concat(
                                        e.t0.message
                                      )),
                                      null === (ee = this._videosdkLogs) ||
                                        void 0 === ee ||
                                        ee.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: ".concat(
                                                re
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (te = this._openTelemetry) ||
                                        void 0 === te ||
                                        te.completeSpan({
                                          message:
                                            "Error in enableMic() :: ".concat(
                                              re
                                            ),
                                          span: c,
                                          status: 2,
                                        });
                                  case 102:
                                    return e.abrupt("return");
                                  case 103:
                                    (E = F.getAudioTracks()[0]),
                                      null === (j = this._openTelemetry) ||
                                        void 0 === j ||
                                        j.completeSpan({
                                          message: "Audio Track Generated",
                                          span: B,
                                          status: 1,
                                        });
                                  case 105:
                                    e.next = 111;
                                    break;
                                  case 107:
                                    return (
                                      (e.next = 109),
                                      this._getExternalVideoStream()
                                    );
                                  case 109:
                                    (ne = e.sent),
                                      (E = ne.getAudioTracks()[0].clone());
                                  case 111:
                                    if (
                                      ((C =
                                        null === (T = this._openTelemetry) ||
                                        void 0 === T
                                          ? void 0
                                          : T.trace({
                                              spanName:
                                                "Generating Producer Configuration",
                                              span: c,
                                            })),
                                      (se = { opusStereo: 1, opusDtx: 1 }),
                                      a &&
                                        ((ie = a.encoderConfig
                                          ? Dt.$.audioProfiles[a.encoderConfig]
                                          : Dt.$.audioProfiles.speech_standard),
                                        (se = {
                                          opusStereo: ie.stereo ? 1 : 0,
                                          opusFec: ie.fec ? 1 : 0,
                                          opusDtx: ie.dtx ? 1 : 0,
                                          opusMaxPlaybackRate:
                                            ie.maxPlaybackRate,
                                          opusPtime: ie.packetTime,
                                        })),
                                      (oe = {
                                        encodings: (ae = [
                                          { networkPriority: "high" },
                                        ]),
                                        codecOptions: se,
                                      }),
                                      null === (P = this._openTelemetry) ||
                                        void 0 === P ||
                                        P.traceAutoComplete({
                                          spanName: "Generated AppData",
                                          span: C,
                                          attributes: {
                                            appData: JSON.stringify(oe),
                                          },
                                          status: 1,
                                        }),
                                      null === (O = this._openTelemetry) ||
                                        void 0 === O ||
                                        O.completeSpan({
                                          span: C,
                                          status: 1,
                                          message:
                                            "Producer Configuration Generated",
                                        }),
                                      (C =
                                        null === (x = this._openTelemetry) ||
                                        void 0 === x
                                          ? void 0
                                          : x.trace({
                                              spanName: "Creating Mic Producer",
                                              span: c,
                                            })),
                                      null === (D = E) ||
                                        void 0 === D ||
                                        D.addEventListener(
                                          "ended",
                                          function () {
                                            console.log("Track Ended Error");
                                            try {
                                              var e,
                                                t,
                                                r =
                                                  "react-native" ==
                                                  ye._deviceInfo.sdkType
                                                    ? It.q
                                                        .ERROR_RN_MIC_TRACK_ENDED
                                                    : It.q
                                                        .ERROR_MICROPHONE_TRACK_ENDED;
                                              null === (e = ye._videosdkLogs) ||
                                                void 0 === e ||
                                                e.pushLogs({
                                                  logText: r.message,
                                                  logType: "ERROR",
                                                  attributes: {
                                                    error:
                                                      "Error Track Ended :: ".concat(
                                                        r.message
                                                      ),
                                                  },
                                                  dashboardLog: !0,
                                                }),
                                                null ===
                                                  (t = ye._openTelemetry) ||
                                                  void 0 === t ||
                                                  t.traceAutoComplete({
                                                    spanName:
                                                      "this._micProducer trackended or Microphone disconnected!",
                                                    span: c,
                                                    message: r.message,
                                                    status: 2,
                                                  }),
                                                kr.dispatch(
                                                  Pt({
                                                    type: "error",
                                                    text: "Microphone disconnected!",
                                                  })
                                                ),
                                                ye
                                                  .disableMic(!0, c)
                                                  .catch(function () {});
                                            } catch (e) {
                                              console.error(e);
                                            }
                                          }
                                        ),
                                      !this._sendTransport)
                                    ) {
                                      e.next = 128;
                                      break;
                                    }
                                    return (
                                      (e.next = 124),
                                      this._sendTransport.produce({
                                        track: E,
                                        encodings: ae,
                                        codecOptions: se,
                                        appData: br(
                                          br({}, oe),
                                          {},
                                          { isEncrypted: this.isE2EEEnabled }
                                        ),
                                        onRtpSender: function (e) {
                                          e.senderStreams =
                                            e.createEncodedStreams();
                                        },
                                      })
                                    );
                                  case 124:
                                    (this._micProducer = e.sent),
                                      this.e2eeManager &&
                                        this.e2eeManager.emit(
                                          "NEW_PRODUCER",
                                          this._micProducer
                                        ),
                                      (e.next = 131);
                                    break;
                                  case 128:
                                    return (
                                      null === (ce = this._videosdkLogs) ||
                                        void 0 === ce ||
                                        ce.pushLogs({
                                          logText:
                                            It.q
                                              .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                              .message,
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: Transport is not setup",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      this._emitError(
                                        It.q
                                          .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 131:
                                    this._micProducer
                                      ? (E.getConstraints().deviceId &&
                                          (this._mic.device = this._mics.get(
                                            E.getConstraints().deviceId
                                          )),
                                        (ue = ct({
                                          id: this._micProducer.id,
                                          paused: this._micProducer.paused,
                                          track: this._micProducer.track,
                                          rtpParameters:
                                            this._micProducer.rtpParameters,
                                          codec:
                                            this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          encodings: ae,
                                          codecOptions: se,
                                          instance: this._micProducer,
                                          rtpSender:
                                            this._micProducer.rtpSender,
                                        })),
                                        kr.dispatch(ue),
                                        this._eventEmitter.emit(
                                          ue.type,
                                          ue.payload
                                        ),
                                        (pe = this._metrics.addNewProbe(
                                          this._micProducer,
                                          { name: "mic_producer" }
                                        )).start(),
                                        this.getMicStats(pe),
                                        this._micProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = dt(ye._micProducer.id);
                                            kr.dispatch(t),
                                              ye._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null === (e = ye._micProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              (ye._micProducer = null);
                                          }
                                        ),
                                        this._micProducer.observer.on(
                                          "pause",
                                          function () {
                                            null == pe || pe.stop(),
                                              (ye._latestStats[
                                                ye._micProducer.id
                                              ] = []),
                                              ye._metrics.removeExistingProbe(
                                                pe
                                              );
                                          }
                                        ),
                                        this._micProducer.observer.on(
                                          "close",
                                          function () {
                                            null == pe || pe.stop(),
                                              (ye._latestStats[
                                                ye._micProducer.id
                                              ] = []),
                                              ye._metrics.removeExistingProbe(
                                                pe
                                              );
                                          }
                                        ),
                                        this._micProducer.on(
                                          "trackended",
                                          function () {
                                            var e,
                                              t,
                                              r =
                                                "react-native" ==
                                                ye._deviceInfo.sdkType
                                                  ? It.q
                                                      .ERROR_RN_MIC_TRACK_ENDED
                                                  : It.q
                                                      .ERROR_MICROPHONE_TRACK_ENDED;
                                            null === (e = ye._videosdkLogs) ||
                                              void 0 === e ||
                                              e.pushLogs({
                                                logText: r.message,
                                                logType: "ERROR",
                                                attributes: {
                                                  error:
                                                    "Error in enableMic() :: ".concat(
                                                      r.message
                                                    ),
                                                },
                                                dashboardLog: !0,
                                              }),
                                              null ===
                                                (t = ye._openTelemetry) ||
                                                void 0 === t ||
                                                t.traceAutoComplete({
                                                  spanName:
                                                    "this._micProducer trackended or Microphone disconnected!",
                                                  span: c,
                                                  message: r.message,
                                                  status: 2,
                                                }),
                                              kr.dispatch(
                                                Pt({
                                                  type: "error",
                                                  text: "Microphone disconnected!",
                                                })
                                              ),
                                              ye
                                                .disableMic(!0, c)
                                                .catch(function () {});
                                          }
                                        ),
                                        null === (de = this._openTelemetry) ||
                                          void 0 === de ||
                                          de.completeSpan({
                                            span: C,
                                            status: 1,
                                            message: "Mic Producer Created",
                                          }),
                                        null === (le = this._openTelemetry) ||
                                          void 0 === le ||
                                          le.completeSpan({
                                            span: c,
                                            status: 1,
                                            message: "Enable Mic Successful",
                                          }))
                                      : (null === (he = this._videosdkLogs) ||
                                          void 0 === he ||
                                          he.pushLogs({
                                            logText:
                                              "Oops! Something went wrong, and we're unable to enable the mic. Please try again.",
                                            logType: "ERROR",
                                            attributes: {
                                              error:
                                                "Error in enableMic(): Something went wrong.",
                                            },
                                            dashboardLog: !0,
                                          }),
                                        null === (me = this._openTelemetry) ||
                                          void 0 === me ||
                                          me.completeSpan({
                                            span: C,
                                            status: 2,
                                            message:
                                              "Error in enableMic() :: micProducer null",
                                          }),
                                        null === (fe = this._openTelemetry) ||
                                          void 0 === fe ||
                                          fe.completeSpan({
                                            span: c,
                                            status: 2,
                                            message:
                                              "Error in enableMic() :: micProducer null",
                                          })),
                                      (e.next = 144);
                                    break;
                                  case 134:
                                    return (
                                      (e.prev = 134),
                                      (e.t2 = e.catch(40)),
                                      null === (ge = this._openTelemetry) ||
                                        void 0 === ge ||
                                        ge.completeSpan({
                                          span: C,
                                          status: 2,
                                          message:
                                            "Error in enableMic() :: occurred in creating mic producer, ".concat(
                                              e.t2.message
                                            ),
                                        }),
                                      null === (ve = this._openTelemetry) ||
                                        void 0 === ve ||
                                        ve.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableMic :: ".concat(
                                              e.t2.message
                                            ),
                                        }),
                                      null === (_e = this._videosdkLogs) ||
                                        void 0 === _e ||
                                        _e.pushLogs({
                                          logText: e.t2.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: ".concat(
                                                e.t2.message
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      Dr.error("enableMic() | failed:%o", e.t2),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error enabling microphone: ".concat(
                                            e.t2
                                          ),
                                        })
                                      ),
                                      (e.next = 143),
                                      this._socketRequest("produceError", {
                                        mediaType: "audio",
                                        message: e.t2.message,
                                      })
                                    );
                                  case 143:
                                    E && E.stop();
                                  case 144:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [40, 134],
                              [51, 57],
                            ]
                          );
                        })
                      )),
                      function () {
                        return Ee.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableMic",
                    value:
                      ((ke = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r,
                            n,
                            s,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g,
                            v,
                            _,
                            y,
                            b,
                            w,
                            S,
                            R,
                            k,
                            E,
                            C,
                            T = arguments;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((n =
                                        T.length > 0 &&
                                        void 0 !== T[0] &&
                                        T[0]),
                                      (s =
                                        T.length > 1 && void 0 !== T[1]
                                          ? T[1]
                                          : void 0),
                                      Dr.debug("disableMic()"),
                                      (i =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "disableMic() Calling",
                                              status: 1,
                                              span: s || null,
                                            })),
                                      this._micProducer)
                                    ) {
                                      e.next = 8;
                                      break;
                                    }
                                    return (
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          span: i,
                                          status: 2,
                                          message:
                                            "Error in disableMic() :: Mic Producer Not found",
                                        }),
                                      null === (o = this._videosdkLogs) ||
                                        void 0 === o ||
                                        o.pushLogs({
                                          logText:
                                            "Attempted to call disableMic() multiple times",
                                          attributes: {
                                            error:
                                              "Error in disableMic() :: Microphone is already disabled",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 8:
                                    if (
                                      ((c =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "Closing Mic Producer",
                                              span: i,
                                              status: 1,
                                            })),
                                      (this._micEnabled = !1),
                                      !this._micProducer || n)
                                    ) {
                                      e.next = 32;
                                      break;
                                    }
                                    return (
                                      (h =
                                        null === (d = this._openTelemetry) ||
                                        void 0 === d
                                          ? void 0
                                          : d.trace({
                                              spanName: "Pausing Mic Producer",
                                              span: c,
                                              status: 1,
                                            })),
                                      this._micProducer.pause(),
                                      (m = dt(this._micProducer.id)),
                                      null === (l = this._openTelemetry) ||
                                        void 0 === l ||
                                        l.completeSpan({
                                          span: h,
                                          status: 1,
                                          message: "Pause Mic Successfully",
                                        }),
                                      kr.dispatch(m),
                                      this._eventEmitter.emit(
                                        m.type,
                                        m.payload
                                      ),
                                      (e.prev = 17),
                                      (e.next = 20),
                                      this._socketRequest("closeProducer", {
                                        producerId: this._micProducer.id,
                                      })
                                    );
                                  case 20:
                                    null === (f = this._openTelemetry) ||
                                      void 0 === f ||
                                      f.completeSpan({
                                        span: c,
                                        status: 1,
                                        message:
                                          "Requested Server to Close Producer",
                                      }),
                                      (e.next = 30);
                                    break;
                                  case 23:
                                    (e.prev = 23),
                                      (e.t0 = e.catch(17)),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error closing server-side mic Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      (y =
                                        "Error in disableMic() :: Failed to close server-side microphone producer. closeProducer status: ".concat(
                                          n
                                        )),
                                      null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in disableMic() :: ".concat(
                                              e.t0.message
                                            ),
                                        }),
                                      null === (v = this._openTelemetry) ||
                                        void 0 === v ||
                                        v.completeSpan({
                                          span: i,
                                          status: 2,
                                          message: y,
                                        }),
                                      null === (_ = this._videosdkLogs) ||
                                        void 0 === _ ||
                                        _.pushLogs({
                                          logText: y,
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                          dashboardLog: !0,
                                        });
                                  case 30:
                                    return (
                                      null === (p = this._openTelemetry) ||
                                        void 0 === p ||
                                        p.completeSpan({
                                          span: i,
                                          status: 1,
                                          message: "Mic Disabled Successfully",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 32:
                                    return (
                                      this._micProducer.close(),
                                      (b = dt(this._micProducer.id)),
                                      kr.dispatch(b),
                                      this._eventEmitter.emit(
                                        b.type,
                                        b.payload
                                      ),
                                      (e.prev = 36),
                                      (e.next = 39),
                                      this._socketRequest("closeProducer", {
                                        producerId: this._micProducer.id,
                                      })
                                    );
                                  case 39:
                                    null === (w = this._openTelemetry) ||
                                      void 0 === w ||
                                      w.completeSpan({
                                        span: c,
                                        status: 1,
                                        message:
                                          "Requested Server to Close Producer",
                                      }),
                                      null === (S = this._openTelemetry) ||
                                        void 0 === S ||
                                        S.completeSpan({
                                          span: i,
                                          status: 1,
                                          message: "Mic Disabled Successfully",
                                        }),
                                      (e.next = 50);
                                    break;
                                  case 43:
                                    (e.prev = 43),
                                      (e.t1 = e.catch(36)),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error closing server-side mic Producer: ".concat(
                                            e.t1
                                          ),
                                        })
                                      ),
                                      (C =
                                        "Error in disableMic() :: Failed to close server-side microphone producer. closeProducer status: ".concat(
                                          n
                                        )),
                                      null === (R = this._openTelemetry) ||
                                        void 0 === R ||
                                        R.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in disableMic() :: ".concat(
                                              e.t1.message
                                            ),
                                        }),
                                      null === (k = this._openTelemetry) ||
                                        void 0 === k ||
                                        k.completeSpan({
                                          span: i,
                                          status: 2,
                                          message: C,
                                        }),
                                      null === (E = this._videosdkLogs) ||
                                        void 0 === E ||
                                        E.pushLogs({
                                          logText: C,
                                          logType: "ERROR",
                                          attributes: { error: e.t1.message },
                                          dashboardLog: !0,
                                        });
                                  case 50:
                                    this._micProducer = null;
                                  case 51:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [17, 23],
                              [36, 43],
                            ]
                          );
                        })
                      )),
                      function () {
                        return ke.apply(this, arguments);
                      }),
                  },
                  {
                    key: "muteMic",
                    value:
                      ((Re = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("muteMic()"),
                                      (this._micEnabled = !1),
                                      this._micProducer.pause(),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._socketRequest("pauseProducer", {
                                        producerId: this._micProducer.id,
                                      })
                                    );
                                  case 6:
                                    kr.dispatch({
                                      type: "SET_PRODUCER_PAUSED",
                                      payload: {
                                        producerId: this._micProducer.id,
                                      },
                                    }),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(3)),
                                      Dr.error("muteMic() | failed: %o", e.t0),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error pausing server-side mic Producer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error pausing server-side mic Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 9]]
                          );
                        })
                      )),
                      function () {
                        return Re.apply(this, arguments);
                      }),
                  },
                  {
                    key: "unmuteMic",
                    value:
                      ((Se = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("unmuteMic()"),
                                      (this._micEnabled = !0),
                                      this._micProducer.resume(),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._socketRequest("resumeProducer", {
                                        producerId: this._micProducer.id,
                                      })
                                    );
                                  case 6:
                                    kr.dispatch({
                                      type: "SET_PRODUCER_RESUMED",
                                      payload: {
                                        producerId: this._micProducer.id,
                                      },
                                    }),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(3)),
                                      Dr.error(
                                        "unmuteMic() | failed: %o",
                                        e.t0
                                      ),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error resuming server-side mic Producer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error resuming server-side mic Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 9]]
                          );
                        })
                      )),
                      function () {
                        return Se.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableWebcam",
                    value:
                      ((we = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r,
                            n,
                            s,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g,
                            v,
                            _,
                            y,
                            b,
                            w,
                            S,
                            R,
                            k,
                            E,
                            C,
                            T,
                            P,
                            O,
                            x,
                            D,
                            I,
                            A,
                            M,
                            L,
                            N,
                            j,
                            B,
                            F,
                            U,
                            W,
                            q,
                            V,
                            H,
                            z,
                            G,
                            K,
                            $,
                            J,
                            Q,
                            Y,
                            X,
                            Z,
                            ee,
                            te,
                            re,
                            ne,
                            se,
                            ie,
                            ae,
                            oe,
                            ce,
                            de,
                            le,
                            ue,
                            pe,
                            he,
                            me,
                            fe,
                            ge,
                            ve,
                            _e = this,
                            ye = arguments;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((a =
                                        ye.length > 0 && void 0 !== ye[0]
                                          ? ye[0]
                                          : void 0),
                                      (o =
                                        ye.length > 1 && void 0 !== ye[1]
                                          ? ye[1]
                                          : void 0),
                                      (c =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "enableWebcam() Calling ".concat(
                                                  a
                                                    ? "With Custom Video Track"
                                                    : "Without Custom Video Track "
                                                ),
                                              attributes: {
                                                customVideoConfig: a
                                                  ? JSON.stringify(a)
                                                  : "Not Specify Custom Track",
                                              },
                                              span: o || null,
                                            })),
                                      Dr.debug("enableWebcam()"),
                                      (this._webcamEnabled = !0),
                                      !this._webcamProducer)
                                    ) {
                                      e.next = 9;
                                      break;
                                    }
                                    return (
                                      null === (d = this._openTelemetry) ||
                                        void 0 === d ||
                                        d.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableWebcam() :: Webcam Producer found",
                                        }),
                                      null === (l = this._videosdkLogs) ||
                                        void 0 === l ||
                                        l.pushLogs({
                                          logText:
                                            "Attempted to call enableWebcam() multiple times",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: Webcam is already enabled",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 9:
                                    if (!this._mediasoupDevice) {
                                      e.next = 18;
                                      break;
                                    }
                                    if (
                                      this._mediasoupDevice.canProduce("video")
                                    ) {
                                      e.next = 16;
                                      break;
                                    }
                                    return (
                                      (m =
                                        "react-native" ==
                                        this._deviceInfo.sdkType
                                          ? It.q
                                              .ERROR_RN_CAMERA_ACCESS_UNAVAILABLE
                                              .message
                                          : It.q.ERROR_CAMERA_ACCESS_UNAVAILABLE
                                              .message),
                                      null === (p = this._openTelemetry) ||
                                        void 0 === p ||
                                        p.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              m
                                            ),
                                        }),
                                      null === (h = this._videosdkLogs) ||
                                        void 0 === h ||
                                        h.pushLogs({
                                          logText: m,
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: Camera access unavailable",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      Dr.error(
                                        "enableWebcam() | cannot produce video"
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 16:
                                    e.next = 21;
                                    break;
                                  case 18:
                                    return (
                                      null === (f = this._videosdkLogs) ||
                                        void 0 === f ||
                                        f.pushLogs({
                                          logText:
                                            "Oops! Something went wrong, and we're unable to enable the webcam. Please try again.",
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam(): Something went wrong.",
                                          },
                                        }),
                                      null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableWebcam() :: mediasoupDevice is undefined",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 21:
                                    if (
                                      (kr.dispatch(ht(!0)),
                                      (y = this._webcam.resolution),
                                      (e.prev = 23),
                                      this._externalVideo)
                                    ) {
                                      e.next = 100;
                                      break;
                                    }
                                    return (
                                      (e.next = 27), this._updateWebcams(c)
                                    );
                                  case 27:
                                    if ((_ = this._webcam.device)) {
                                      e.next = 31;
                                      break;
                                    }
                                    throw new Error(
                                      "Whoops! No Webcam Found: We couldn't find your camera. Is it plugged in and turned on? If so, try restarting your computer or checking your device settings. If you need help, check out troubleshooter at https://test.8x8.vc/. Also, ensure you're on a secure website (https://)."
                                    );
                                  case 31:
                                    Dr.debug(
                                      "enableWebcam() | calling getUserMedia()"
                                    );
                                    try {
                                      a &&
                                        "ended" ==
                                          (v = a.getVideoTracks()[0])
                                            .readyState &&
                                        ((v = null),
                                        (E =
                                          It.q.ERROR_CUSTOM_VIDEO_TRACK_ENDED),
                                        null === (k = this._videosdkLogs) ||
                                          void 0 === k ||
                                          k.pushLogs({
                                            logText: E.message,
                                            logType: "INFO",
                                            attributes: {
                                              error:
                                                "In enableWebcam() :: Invalid Custom Track Passed",
                                            },
                                            dashboardLog: !0,
                                          }),
                                        this._emitError(E));
                                    } catch (e) {
                                      (T =
                                        It.q.ERROR_INVALID_CUSTOM_VIDEO_TRACK),
                                        null === (C = this._videosdkLogs) ||
                                          void 0 === C ||
                                          C.pushLogs({
                                            logText: T.message,
                                            logType: "INFO",
                                            attributes: {
                                              error:
                                                "In enableWebcam() :: Invalid Custom Track Passed",
                                            },
                                          }),
                                        this._emitError(T),
                                        console.log(
                                          "Invalid Custom Video Track Passed. Reverting to default Error: ".concat(
                                            e
                                          )
                                        );
                                    }
                                    if (v) {
                                      e.next = 98;
                                      break;
                                    }
                                    if (
                                      ((O =
                                        null === (P = this._openTelemetry) ||
                                        void 0 === P
                                          ? void 0
                                          : P.trace({
                                              spanName: "Creating Track",
                                              span: c,
                                            })),
                                      (x = null),
                                      (e.prev = 36),
                                      "hd" != this._webcam.resolution)
                                    ) {
                                      e.next = 44;
                                      break;
                                    }
                                    return (
                                      (e.next = 40),
                                      this.createCameraVideoTrack({
                                        cameraId: _.deviceId,
                                        encoderConfig: "h720p_w1280p",
                                        multiStream: this._useSimulcast,
                                        facingMode: _.facing,
                                      })
                                    );
                                  case 40:
                                    (a = e.sent),
                                      (x = JSON.stringify({
                                        encoderConfig: "h720p_w1280p",
                                        multiStream: this._useSimulcast,
                                      })),
                                      (e.next = 48);
                                    break;
                                  case 44:
                                    return (
                                      (e.next = 46),
                                      this.createCameraVideoTrack({
                                        cameraId: _.deviceId,
                                        encoderConfig: "h540p_w960p",
                                        multiStream: this._useSimulcast,
                                        facingMode: _.facing,
                                      })
                                    );
                                  case 46:
                                    (a = e.sent),
                                      (x = JSON.stringify({
                                        encoderConfig: "h540p_w960p",
                                        multiStream: this._useSimulcast,
                                      }));
                                  case 48:
                                    (v = a.getVideoTracks()[0]),
                                      null === (D = this._openTelemetry) ||
                                        void 0 === D ||
                                        D.completeSpan({
                                          message: "Video Track Generated",
                                          span: O,
                                          attributes: {
                                            customVideoTrackConfig: x,
                                          },
                                          status: 1,
                                        }),
                                      (e.next = 98);
                                    break;
                                  case 52:
                                    if (
                                      ((e.prev = 52),
                                      (e.t0 = e.catch(36)),
                                      null === (I = this._openTelemetry) ||
                                        void 0 === I ||
                                        I.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              e.t0.message
                                            ),
                                          span: O,
                                          status: 2,
                                        }),
                                      "SecurityError" !== e.t0.name)
                                    ) {
                                      e.next = 63;
                                      break;
                                    }
                                    (L =
                                      It.q
                                        .ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED),
                                      (N = L.message),
                                      this._emitError(L),
                                      null === (A = this._videosdkLogs) ||
                                        void 0 === A ||
                                        A.pushLogs({
                                          logText: N,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: Camera Permission Denied or Dismissed",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (M = this._openTelemetry) ||
                                        void 0 === M ||
                                        M.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                              N
                                            ),
                                          span: enableMicSpan,
                                          status: 2,
                                        }),
                                      (e.next = 97);
                                    break;
                                  case 63:
                                    if ("DOMException" !== e.t0.name) {
                                      e.next = 71;
                                      break;
                                    }
                                    (F = It.q.ERROR_RN_CAMERA_NOT_FOUND),
                                      (U = F.message),
                                      this._emitError(F),
                                      null === (j = this._videosdkLogs) ||
                                        void 0 === j ||
                                        j.pushLogs({
                                          logText: U,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: No Camra Device Found",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (B = this._openTelemetry) ||
                                        void 0 === B ||
                                        B.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                              U
                                            ),
                                          span: enableMicSpan,
                                          status: 2,
                                        }),
                                      (e.next = 97);
                                    break;
                                  case 71:
                                    if (!(e.t0 instanceof DOMException)) {
                                      e.next = 94;
                                      break;
                                    }
                                    (e.t1 = e.t0.name),
                                      (e.next =
                                        "NotAllowedError" === e.t1
                                          ? 75
                                          : "NotReadableError" === e.t1
                                          ? 78
                                          : "NotFoundError" === e.t1
                                          ? 81
                                          : 88);
                                    break;
                                  case 75:
                                    return (
                                      (W = this.handleNotAllowedError(
                                        e.t0,
                                        this._openTelemetry,
                                        this._videosdkLogs,
                                        c,
                                        "video"
                                      )),
                                      this._emitError(W),
                                      e.abrupt("break", 92)
                                    );
                                  case 78:
                                    return (
                                      (q = this.handleNotReadableError(
                                        e.t0,
                                        this._openTelemetry,
                                        this._videosdkLogs,
                                        c,
                                        "video"
                                      )),
                                      this._emitError(q),
                                      e.abrupt("break", 92)
                                    );
                                  case 81:
                                    return (
                                      (V = It.q.ERROR_CAMERA_NOT_FOUND),
                                      navigator &&
                                        navigator.userAgent &&
                                        -1 !=
                                          navigator.userAgent.indexOf(
                                            "Firefox"
                                          ) &&
                                        (V =
                                          It.q
                                            .ERROR_CAMERA_PERMISSION_DENIED_BY_OS),
                                      (H = V.message),
                                      this._emitError(V),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: H,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: No Webcam Device Found",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                              H
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      e.abrupt("break", 92)
                                    );
                                  case 88:
                                    return (
                                      (z =
                                        "An error occurred in creating video track, ".concat(
                                          e.t0.message
                                        )),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: ".concat(
                                                z
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              z
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      e.abrupt("break", 92)
                                    );
                                  case 92:
                                    e.next = 97;
                                    break;
                                  case 94:
                                    ($ =
                                      "An error occurred in creating video track, ".concat(
                                        e.t0.message
                                      )),
                                      null === (G = this._videosdkLogs) ||
                                        void 0 === G ||
                                        G.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: ".concat(
                                                $
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (K = this._openTelemetry) ||
                                        void 0 === K ||
                                        K.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              $
                                            ),
                                          span: c,
                                          status: 2,
                                        });
                                  case 97:
                                    return e.abrupt("return");
                                  case 98:
                                    e.next = 105;
                                    break;
                                  case 100:
                                    return (
                                      (_ = { label: "external video" }),
                                      (e.next = 103),
                                      this._getExternalVideoStream()
                                    );
                                  case 103:
                                    (J = e.sent),
                                      (v = J.getVideoTracks()[0].clone());
                                  case 105:
                                    if (
                                      ((Q =
                                        null === (b = this._openTelemetry) ||
                                        void 0 === b
                                          ? void 0
                                          : b.trace({
                                              spanName:
                                                "Generating Producer Configuration",
                                              span: c,
                                            })),
                                      (Z = { videoGoogleStartBitrate: 1e3 }),
                                      !this._forceH264)
                                    ) {
                                      e.next = 114;
                                      break;
                                    }
                                    if (
                                      (X =
                                        this._mediasoupDevice.rtpCapabilities.codecs.find(
                                          function (e) {
                                            return (
                                              "video/h264" ===
                                              e.mimeType.toLowerCase()
                                            );
                                          }
                                        ))
                                    ) {
                                      e.next = 112;
                                      break;
                                    }
                                    throw new Error(
                                      "The desired H.264 codec and configuration are not supported"
                                    );
                                  case 112:
                                    e.next = 119;
                                    break;
                                  case 114:
                                    if (!this._forceVP9) {
                                      e.next = 119;
                                      break;
                                    }
                                    if (
                                      (X =
                                        this._mediasoupDevice.rtpCapabilities.codecs.find(
                                          function (e) {
                                            return (
                                              "video/vp9" ===
                                              e.mimeType.toLowerCase()
                                            );
                                          }
                                        ))
                                    ) {
                                      e.next = 119;
                                      break;
                                    }
                                    throw new Error(
                                      "The desired VP9 codec and configuration are not supported"
                                    );
                                  case 119:
                                    v
                                      ? ((ee = v.getConstraints()),
                                        (te =
                                          "react-native" ==
                                            this._deviceInfo.sdkType &&
                                          "ios" == this._deviceInfo.platform),
                                        (Y = (0, xt.v7)(
                                          !1,
                                          ee.width,
                                          ee.height,
                                          { simulcast: a.multiStream },
                                          te
                                        )))
                                      : this._useSimulcast &&
                                        ((re =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return "video" === e.kind;
                                            }
                                          )),
                                        (Y =
                                          (this._forceVP9 && X) ||
                                          "video/vp9" ===
                                            re.mimeType.toLowerCase()
                                            ? Pr
                                            : Tr[this._webcam.resolution])),
                                      (ne = {});
                                    try {
                                      ne = {
                                        encodings: Y,
                                        width: a
                                          ? null === (se = v) || void 0 === se
                                            ? void 0
                                            : se.getConstraints().width
                                          : Cr[y].width.ideal,
                                        height: a
                                          ? null === (ie = v) || void 0 === ie
                                            ? void 0
                                            : ie.getConstraints().height
                                          : Cr[y].height.ideal,
                                      };
                                    } catch (e) {
                                      null === (ae = this._videosdkLogs) ||
                                        void 0 === ae ||
                                        ae.pushLogs({
                                          logText: e.message,
                                          logType: "INFO",
                                          attributes: {
                                            error:
                                              "In enableWebcam() :: ".concat(
                                                e.message
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                        console.log(e);
                                    }
                                    if (
                                      (null === (w = this._openTelemetry) ||
                                        void 0 === w ||
                                        w.traceAutoComplete({
                                          spanName:
                                            "Track Generated with height "
                                              .concat(ne.height, " and width ")
                                              .concat(
                                                ne.width,
                                                " with multiStream "
                                              )
                                              .concat(this._useSimulcast),
                                          attributes: {
                                            appData: JSON.stringify(ne),
                                          },
                                          span: c,
                                          status: 1,
                                        }),
                                      null === (S = this._openTelemetry) ||
                                        void 0 === S ||
                                        S.completeSpan({
                                          span: Q,
                                          status: 1,
                                          message:
                                            "Producer Configuration Generated",
                                        }),
                                      (Q =
                                        null === (R = this._openTelemetry) ||
                                        void 0 === R
                                          ? void 0
                                          : R.trace({
                                              spanName:
                                                "Creating Webcam Producer",
                                              span: c,
                                            })),
                                      !this._sendTransport)
                                    ) {
                                      e.next = 132;
                                      break;
                                    }
                                    return (
                                      (e.next = 128),
                                      this._sendTransport.produce({
                                        track: v,
                                        encodings: Y,
                                        codecOptions: Z,
                                        codec: X,
                                        appData: br(
                                          br({}, ne),
                                          {},
                                          { isEncrypted: this.isE2EEEnabled }
                                        ),
                                        onRtpSender: function (e) {
                                          e.senderStreams =
                                            e.createEncodedStreams();
                                        },
                                      })
                                    );
                                  case 128:
                                    (this._webcamProducer = e.sent),
                                      this.e2eeManager &&
                                        this.e2eeManager.emit(
                                          "NEW_PRODUCER",
                                          this._webcamProducer
                                        ),
                                      (e.next = 135);
                                    break;
                                  case 132:
                                    return (
                                      null === (oe = this._videosdkLogs) ||
                                        void 0 === oe ||
                                        oe.pushLogs({
                                          logText:
                                            It.q
                                              .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                              .message,
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: Transport is not setup",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      this._emitError(
                                        It.q
                                          .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 135:
                                    v.getConstraints().deviceId &&
                                      (this._webcam.device = this._webcams.get(
                                        v.getConstraints().deviceId
                                      )),
                                      this._webcamProducer
                                        ? ((le = ct({
                                            id: this._webcamProducer.id,
                                            deviceLabel: _.label,
                                            type: this._getWebcamType(_),
                                            paused: this._webcamProducer.paused,
                                            track: this._webcamProducer.track,
                                            rtpParameters:
                                              this._webcamProducer
                                                .rtpParameters,
                                            codec:
                                              this._webcamProducer.rtpParameters.codecs[0].mimeType.split(
                                                "/"
                                              )[1],
                                            instance: this._webcamProducer,
                                            rtpSender:
                                              this._webcamProducer.rtpSender,
                                          })),
                                          kr.dispatch(le),
                                          this._eventEmitter.emit(
                                            le.type,
                                            le.payload
                                          ),
                                          (ue = 0),
                                          ((pe = this._metrics.addNewProbe(
                                            this._webcamProducer,
                                            "producer"
                                          )).onStatsCollected = function (e) {
                                            try {
                                              var t;
                                              _e._stats.producerStats ||
                                                (_e._stats.producerStats = {}),
                                                _e._stats.producerStats.video ||
                                                  (_e._stats.producerStats.video =
                                                    []),
                                                _e._webcamProducer &&
                                                  (_e._latestStats[
                                                    null ===
                                                      (t =
                                                        _e._webcamProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.id
                                                  ] = []),
                                                e.video.forEach(function (e) {
                                                  var t;
                                                  _e._latestStats[
                                                    null ===
                                                      (t =
                                                        _e._webcamProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.id
                                                  ].push(e);
                                                }),
                                                ue % 5 == 0 &&
                                                  null != _e._webcamProducer &&
                                                  _e._stats.producerStats.video.push(
                                                    {
                                                      timestamp: new Date(),
                                                      stats:
                                                        _e._latestStats[
                                                          _e._webcamProducer.id
                                                        ],
                                                    }
                                                  ),
                                                ue++;
                                            } catch (e) {
                                              var r;
                                              null === (r = _e._videosdkLogs) ||
                                                void 0 === r ||
                                                r.pushLogs({
                                                  logText:
                                                    "Error PRODUCER Stats ERROR",
                                                  logType: "ERROR",
                                                  attributes: {
                                                    error: e.message,
                                                  },
                                                }),
                                                console.log(
                                                  "PRODUCER ERROR",
                                                  e
                                                );
                                            }
                                          }),
                                          pe.start(),
                                          this._webcamProducer.observer.on(
                                            "close",
                                            function () {
                                              pe.stop(),
                                                _e._metrics.removeExistingProbe(
                                                  pe
                                                );
                                            }
                                          ),
                                          this._webcamProducer.on(
                                            "transportclose",
                                            function () {
                                              var e,
                                                t = dt(_e._webcamProducer.id);
                                              kr.dispatch(t),
                                                _e._eventEmitter.emit(
                                                  t.type,
                                                  t.payload
                                                ),
                                                null ===
                                                  (e = _e._webcamProducer) ||
                                                  void 0 === e ||
                                                  e.close(),
                                                (_e._webcamProducer = null);
                                            }
                                          ),
                                          this._webcamProducer.on(
                                            "trackended",
                                            function () {
                                              var e,
                                                t,
                                                r =
                                                  "react-native" ==
                                                  _e._deviceInfo.sdkType
                                                    ? It.q
                                                        .ERROR_RN_CAMERA_TRACK_ENDED
                                                    : It.q
                                                        .ERROR_WEBCAM_TRACK_ENDED;
                                              null === (e = _e._videosdkLogs) ||
                                                void 0 === e ||
                                                e.pushLogs({
                                                  logText: r.message,
                                                  logType: "ERROR",
                                                  attributes: {
                                                    error:
                                                      "Error in enableWebcam() :: ".concat(
                                                        r.message
                                                      ),
                                                  },
                                                  dashboardLog: !0,
                                                }),
                                                null ===
                                                  (t = _e._openTelemetry) ||
                                                  void 0 === t ||
                                                  t.traceAutoComplete({
                                                    spanName:
                                                      "this._webcamProducer trackended or Webcam disconnected!",
                                                    span: c,
                                                    message: r.message,
                                                    status: 2,
                                                  }),
                                                kr.dispatch(
                                                  Pt({
                                                    type: "error",
                                                    text: "Webcam disconnected!",
                                                  })
                                                ),
                                                _e
                                                  .disableWebcam(c)
                                                  .catch(function () {});
                                            }
                                          ),
                                          null === (ce = this._openTelemetry) ||
                                            void 0 === ce ||
                                            ce.completeSpan({
                                              span: Q,
                                              status: 1,
                                              message:
                                                "Webcam Producer Created",
                                            }),
                                          null === (de = this._openTelemetry) ||
                                            void 0 === de ||
                                            de.completeSpan({
                                              span: c,
                                              status: 1,
                                              message:
                                                "Enable Webcam Successful",
                                            }))
                                        : (null === (he = this._videosdkLogs) ||
                                            void 0 === he ||
                                            he.pushLogs({
                                              logText:
                                                "Oops! Something went wrong, and we're unable to enable the webcam. Please try again.",
                                              logType: "ERROR",
                                              attributes: {
                                                error:
                                                  "Error in enableWebcam(): Something went wrong.",
                                              },
                                              dashboardLog: !0,
                                            }),
                                          null === (me = this._openTelemetry) ||
                                            void 0 === me ||
                                            me.completeSpan({
                                              span: Q,
                                              status: 2,
                                              message:
                                                "Error in enableWebcam() :: webcamProducer null",
                                            }),
                                          null === (fe = this._openTelemetry) ||
                                            void 0 === fe ||
                                            fe.completeSpan({
                                              span: c,
                                              status: 2,
                                              message:
                                                "Error in enableWebcam() :: webcamProducer null",
                                            })),
                                      (e.next = 147);
                                    break;
                                  case 139:
                                    return (
                                      (e.prev = 139),
                                      (e.t2 = e.catch(23)),
                                      null === (ge = this._videosdkLogs) ||
                                        void 0 === ge ||
                                        ge.pushLogs({
                                          logText: e.t2.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: ".concat(
                                                e.t2.message
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (ve = this._openTelemetry) ||
                                        void 0 === ve ||
                                        ve.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              e.t2.message
                                            ),
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error enabling webcam: ".concat(
                                            e.t2
                                          ),
                                        })
                                      ),
                                      (e.next = 146),
                                      this._socketRequest("produceError", {
                                        mediaType: "video",
                                        message: e.t2.message,
                                      })
                                    );
                                  case 146:
                                    v && v.stop();
                                  case 147:
                                    kr.dispatch(ht(!1));
                                  case 148:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [23, 139],
                              [36, 52],
                            ]
                          );
                        })
                      )),
                      function () {
                        return we.apply(this, arguments);
                      }),
                  },
                  {
                    key: "handleNotAllowedError",
                    value: function (e, t, r, n, s) {
                      var i = {};
                      return (
                        (i =
                          "Permission denied" === e.message ||
                          "Permission dismissed" === e.message
                            ? "video" === s
                              ? It.q.ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED
                              : It.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED
                            : e.message.includes(
                                "The request is not allowed by the user agent"
                              )
                            ? "video" === s
                              ? It.q.ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE
                              : It.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED
                            : "Permission denied by system" === e.message
                            ? "video" === s
                              ? It.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                              : It.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
                            : "video" === s
                            ? It.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                            : It.q.ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED),
                        r.pushLogs({
                          logText: i.message,
                          logType: "ERROR",
                          attributes: {
                            error: "Error in "
                              .concat(
                                "video" === s
                                  ? "enableWebcam()"
                                  : "enableMic()",
                                " :: "
                              )
                              .concat(e.message),
                          },
                          dashboardLog: !0,
                        }),
                        t.completeSpan({
                          message:
                            "video" === s
                              ? "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                  i.message
                                )
                              : "Error in enableMic() :: occurred in creating audio track, ".concat(
                                  i.message
                                ),
                          span: n,
                          status: 2,
                        }),
                        i
                      );
                    },
                  },
                  {
                    key: "handleNotReadableError",
                    value: function (e, t, r, n, s) {
                      var i = {};
                      return (
                        (i =
                          "Device in use" === e.message
                            ? "video" === s
                              ? It.q.ERROR_CAMERA_IN_USE
                              : It.q.ERROR_MICROPHONE_IN_USE
                            : "video" === s
                            ? It.q.ERROR_VIDEO_SOURCE_INITIATION_FAILED
                            : It.q.ERROR_MICROPHONE_IN_USE),
                        r.pushLogs({
                          logText: i.message,
                          logType: "ERROR",
                          attributes: {
                            error: "Error in "
                              .concat(
                                "video" === s
                                  ? "enableWebcam()"
                                  : "enableMic()",
                                " :: "
                              )
                              .concat(e.message),
                          },
                          dashboardLog: !0,
                        }),
                        t.completeSpan({
                          message:
                            "video" === s
                              ? "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                  i.message
                                )
                              : "Error in enableMic() :: occurred in creating audio track, ".concat(
                                  i.message
                                ),
                          span: n,
                          status: 2,
                        }),
                        i
                      );
                    },
                  },
                  {
                    key: "createCameraVideoTrack",
                    value:
                      ((be = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a, o, c, d, l, p, h, m, f;
                          return u().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.cameraId),
                                    (n = void 0 === r ? void 0 : r),
                                    (s = t.encoderConfig),
                                    (i = void 0 === s ? void 0 : s),
                                    (a = t.facingMode),
                                    (o = void 0 === a ? void 0 : a),
                                    (c = t.optimizationMode),
                                    (d = void 0 === c ? void 0 : c),
                                    (l = t.multiStream),
                                    (p = void 0 === l || l),
                                    (h = i
                                      ? Dt.$.videoProfiles[i]
                                      : Dt.$.videoProfiles.h360p_w640p),
                                    (m = {
                                      video: {
                                        deviceId: n || void 0,
                                        facingMode: o || void 0,
                                        width: h.width,
                                        height: h.height,
                                        frameRate: h.frameRate,
                                      },
                                    }),
                                    (e.next = 5),
                                    (0, Qt.lp)(m)
                                  );
                                case 5:
                                  return (
                                    (f = e.sent),
                                    d && (f.contentHint = d),
                                    (f.encoderConfig = i || "h360p_w640p"),
                                    (f.contentHint = d || ""),
                                    (f.multiStream = p),
                                    (f.cameraId = n),
                                    e.abrupt("return", f)
                                  );
                                case 12:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e) {
                        return be.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableWebcam",
                    value:
                      ((ye = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r,
                            n,
                            s,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f = arguments;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((n =
                                        f.length > 0 && void 0 !== f[0]
                                          ? f[0]
                                          : void 0),
                                      (s =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "disableWebcam() Calling",
                                              status: 1,
                                              span: n || null,
                                            })),
                                      Dr.debug("disableWebcam()"),
                                      (this._webcamEnabled = !1),
                                      this._webcamProducer)
                                    ) {
                                      e.next = 8;
                                      break;
                                    }
                                    return (
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: s,
                                          status: 2,
                                          message:
                                            "Error in disableWebcam() :: Webcam Producer Not found",
                                        }),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Attempted to call disableWebcam() multiple times",
                                          attributes: {
                                            error:
                                              "Error in disableWebcam() :: Webcam is already disabled",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 8:
                                    return (
                                      (o =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "Closing Webcam Producer",
                                              span: s,
                                              status: 1,
                                            })),
                                      this._webcamProducer.close(),
                                      (c = dt(this._webcamProducer.id)),
                                      kr.dispatch(c),
                                      this._eventEmitter.emit(
                                        c.type,
                                        c.payload
                                      ),
                                      (e.prev = 13),
                                      (e.next = 16),
                                      this._socketRequest("closeProducer", {
                                        producerId: this._webcamProducer.id,
                                      })
                                    );
                                  case 16:
                                    null === (d = this._openTelemetry) ||
                                      void 0 === d ||
                                      d.completeSpan({
                                        span: o,
                                        status: 1,
                                        message:
                                          "Requested Server to Close Producer",
                                      }),
                                      (this._webcamProducer = null),
                                      null === (l = this._openTelemetry) ||
                                        void 0 === l ||
                                        l.completeSpan({
                                          span: s,
                                          status: 1,
                                          message:
                                            "Webcam Disabled Successfully",
                                        }),
                                      (e.next = 27);
                                    break;
                                  case 21:
                                    (e.prev = 21),
                                      (e.t0 = e.catch(13)),
                                      null === (p = this._videosdkLogs) ||
                                        void 0 === p ||
                                        p.pushLogs({
                                          logText:
                                            "Error in disableWebcam() :: Failed to close server-side webcam producer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                          dashboardLog: !0,
                                        }),
                                      null === (h = this._openTelemetry) ||
                                        void 0 === h ||
                                        h.completeSpan({
                                          span: o,
                                          status: 2,
                                          message:
                                            "Error in disableWebcam() :: closing server-side webcam Producer: ".concat(
                                              e.t0
                                            ),
                                        }),
                                      null === (m = this._openTelemetry) ||
                                        void 0 === m ||
                                        m.completeSpan({
                                          span: s,
                                          status: 2,
                                          message:
                                            "Error in disableWebcam() :: closing server-side webcam Producer: ".concat(
                                              e.t0
                                            ),
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error closing server-side webcam Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 27:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[13, 21]]
                          );
                        })
                      )),
                      function () {
                        return ye.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getMics",
                    value:
                      ((_e = (0, a.A)(
                        u().mark(function e() {
                          var t, r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t = []),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._updateMics()
                                    );
                                  case 4:
                                    this._mics.forEach(function (e, r) {
                                      t.push({ deviceId: r, label: e.label });
                                    }),
                                      (e.next = 11);
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(1)),
                                      Dr.error("getMics() | Error", e.t0),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in getMics() :: Not able to get Mic List",
                                          },
                                          dashboardLog: !0,
                                        });
                                  case 11:
                                    return e.abrupt("return", t);
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 7]]
                          );
                        })
                      )),
                      function () {
                        return _e.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeMic",
                    value:
                      ((ve = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, a, o, c, d, l, p, h, m, f, g, v;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((n =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "changeMic() Calling",
                                            })),
                                      (e.prev = 1),
                                      "object" != (0, i.A)(t))
                                    ) {
                                      e.next = 9;
                                      break;
                                    }
                                    return (e.next = 5), this.disableMic(!0, n);
                                  case 5:
                                    return (e.next = 7), this.enableMic(t, n);
                                  case 7:
                                    e.next = 27;
                                    break;
                                  case 9:
                                    return (
                                      (c = t), (e.next = 12), this._updateMics()
                                    );
                                  case 12:
                                    if (
                                      ((d = Array.from(this._mics.keys())),
                                      (l = d.length),
                                      (p = this._mic.device
                                        ? this._mic.device.deviceId
                                        : void 0),
                                      null != c && null != c
                                        ? (h = d.indexOf(c))
                                        : (h = d.indexOf(p)) < l - 1
                                        ? h++
                                        : (h = 0),
                                      (this._mic.device = this._mics.get(d[h])),
                                      (m =
                                        null === (s = this._openTelemetry) ||
                                        void 0 === s
                                          ? void 0
                                          : s.trace({
                                              spanName: "Getting Selected Mic",
                                              span: n,
                                              attributes: {
                                                selectedWebcam: this._mic.device
                                                  ? JSON.stringify(
                                                      this._mic.device
                                                    )
                                                  : "No Mic devices",
                                              },
                                            })),
                                      this._mic.device)
                                    ) {
                                      e.next = 21;
                                      break;
                                    }
                                    throw (
                                      (null === (f = this._videosdkLogs) ||
                                        void 0 === f ||
                                        f.pushLogs({
                                          logText:
                                            "Error changeMic : No mic Found",
                                          logType: "ERROR",
                                        }),
                                      new Error("No mic Found"))
                                    );
                                  case 21:
                                    return (
                                      (e.next = 23), this.disableMic(!0, n)
                                    );
                                  case 23:
                                    return (
                                      (e.next = 25), this.enableMic(void 0, n)
                                    );
                                  case 25:
                                    null === (a = this._openTelemetry) ||
                                      void 0 === a ||
                                      a.completeSpan({
                                        span: m,
                                        status: 1,
                                        message: "Done",
                                      }),
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "changeMic() Ending",
                                        });
                                  case 27:
                                    e.next = 33;
                                    break;
                                  case 29:
                                    (e.prev = 29),
                                      (e.t0 = e.catch(1)),
                                      null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "changeMic() | Error ".concat(e.t0),
                                        }),
                                      null === (v = this._videosdkLogs) ||
                                        void 0 === v ||
                                        v.pushLogs({
                                          logText: "Error changeMic() | Error",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 33:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 29]]
                          );
                        })
                      )),
                      function (e) {
                        return ve.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getWebcams",
                    value:
                      ((ge = (0, a.A)(
                        u().mark(function e() {
                          var t, r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t = []),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._updateWebcams()
                                    );
                                  case 4:
                                    this._webcams.forEach(function (e, r) {
                                      t.push({
                                        deviceId: r,
                                        label: e.label,
                                        facingMode: e.facing || "environment",
                                      });
                                    }),
                                      (e.next = 11);
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(1)),
                                      Dr.error(
                                        "getWebcams() | failed %o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in getWebcams() :: Not able to get Webcam List",
                                          },
                                          dashboardLog: !0,
                                        });
                                  case 11:
                                    return e.abrupt("return", t);
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 7]]
                          );
                        })
                      )),
                      function () {
                        return ge.apply(this, arguments);
                      }),
                  },
                  {
                    key: "replaceWebcamStream",
                    value:
                      ((fe = (0, a.A)(
                        u().mark(function e(t) {
                          var r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._webcamProducer) {
                                      e.next = 7;
                                      break;
                                    }
                                    return (
                                      (r = t.getVideoTracks()[0]),
                                      (e.next = 4),
                                      this._webcamProducer.replaceTrack({
                                        track: r,
                                      })
                                    );
                                  case 4:
                                    this._eventEmitter.emit("UPDATE_PRODUCER", {
                                      producer: this._webcamProducer,
                                    }),
                                      (e.next = 11);
                                    break;
                                  case 7:
                                    return (e.next = 9), this.disableWebcam();
                                  case 9:
                                    return (e.next = 11), this.enableWebcam(t);
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return fe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeWebcam",
                    value:
                      ((me = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, a, o, c, d, l, p, h, m, f, g, v;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((n =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "changeWebcam() Calling",
                                            })),
                                      kr.dispatch(ht(!0)),
                                      "object" !== (0, i.A)(t))
                                    ) {
                                      e.next = 17;
                                      break;
                                    }
                                    return (
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this.disableWebcam(n)
                                    );
                                  case 6:
                                    return (
                                      (e.next = 8), this.enableWebcam(t, n)
                                    );
                                  case 8:
                                    e.next = 15;
                                    break;
                                  case 10:
                                    (e.prev = 10),
                                      (e.t0 = e.catch(3)),
                                      Dr.error(
                                        "changeWebcam() | failed: %o",
                                        e.t0
                                      ),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText:
                                            "Error Could not change webcam",
                                          logType: "ERROR",
                                          attributes: {
                                            object: JSON.stringify(t),
                                            error: e.t0.message,
                                          },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Could not change webcam: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 15:
                                    e.next = 46;
                                    break;
                                  case 17:
                                    return (
                                      (e.prev = 17),
                                      (e.next = 20),
                                      this._updateWebcams(n)
                                    );
                                  case 20:
                                    if (
                                      ((d = Array.from(this._webcams.keys())),
                                      (l = d.length),
                                      (p = this._webcam.device
                                        ? this._webcam.device.deviceId
                                        : void 0),
                                      null != t && null != t
                                        ? (h = d.indexOf(t))
                                        : (h = d.indexOf(p)) < l - 1
                                        ? h++
                                        : (h = 0),
                                      (this._webcam.device = this._webcams.get(
                                        d[h]
                                      )),
                                      Dr.debug(
                                        "changeWebcam() | new selected webcam [device:%o]",
                                        this._webcam.device
                                      ),
                                      (this._webcam.resolution =
                                        this._webcam.resolution || "hd"),
                                      (m =
                                        null === (a = this._openTelemetry) ||
                                        void 0 === a
                                          ? void 0
                                          : a.trace({
                                              spanName:
                                                "Getting Selected Webcam",
                                              span: n,
                                              attributes: {
                                                selectedWebcam: this._webcam
                                                  .device
                                                  ? JSON.stringify(
                                                      this._webcam.device
                                                    )
                                                  : "No webcam devices",
                                              },
                                            })),
                                      this._webcam.device)
                                    ) {
                                      e.next = 31;
                                      break;
                                    }
                                    throw (
                                      (null === (f = this._videosdkLogs) ||
                                        void 0 === f ||
                                        f.pushLogs({
                                          logText:
                                            "Error changeWebcam : No webcam Found",
                                          logType: "ERROR",
                                        }),
                                      new Error("no webcam devices"))
                                    );
                                  case 31:
                                    return (e.next = 33), this.disableWebcam(n);
                                  case 33:
                                    return (
                                      (e.next = 35),
                                      this.enableWebcam(void 0, n)
                                    );
                                  case 35:
                                    return (
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.completeSpan({
                                          span: m,
                                          status: 1,
                                          message: "Done",
                                        }),
                                      null === (c = this._openTelemetry) ||
                                        void 0 === c ||
                                        c.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "changeWebcam() Ending",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 40:
                                    (e.prev = 40),
                                      (e.t1 = e.catch(17)),
                                      Dr.error(
                                        "changeWebcam() | failed: %o",
                                        e.t1
                                      ),
                                      null === (g = this._videosdkLogs) ||
                                        void 0 === g ||
                                        g.pushLogs({
                                          logText:
                                            "Error Could not change webcam",
                                          logType: "ERROR",
                                          attributes: {
                                            object: JSON.stringify(t),
                                            error: e.t1.message,
                                          },
                                        }),
                                      null === (v = this._openTelemetry) ||
                                        void 0 === v ||
                                        v.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Could not change webcam ".concat(
                                              e.t1
                                            ),
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Could not change webcam: ".concat(
                                            e.t1
                                          ),
                                        })
                                      );
                                  case 46:
                                    kr.dispatch(ht(!1));
                                  case 47:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [3, 10],
                              [17, 40],
                            ]
                          );
                        })
                      )),
                      function (e) {
                        return me.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeWebcamResolution",
                    value:
                      ((he = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n, s;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    Dr.debug("changeWebcamResolution()"),
                                      kr.dispatch(ht(!0)),
                                      (e.prev = 2),
                                      (e.t0 = this._webcam.resolution),
                                      (e.next =
                                        "qvga" === e.t0
                                          ? 6
                                          : "vga" === e.t0
                                          ? 8
                                          : "hd" === e.t0
                                          ? 10
                                          : 12);
                                    break;
                                  case 6:
                                    return (
                                      (this._webcam.resolution = "vga"),
                                      e.abrupt("break", 13)
                                    );
                                  case 8:
                                    return (
                                      (this._webcam.resolution = "hd"),
                                      e.abrupt("break", 13)
                                    );
                                  case 10:
                                    return (
                                      (this._webcam.resolution = "qvga"),
                                      e.abrupt("break", 13)
                                    );
                                  case 12:
                                    this._webcam.resolution = "hd";
                                  case 13:
                                    return (
                                      Dr.debug(
                                        "changeWebcamResolution() | calling getUserMedia()"
                                      ),
                                      (e.prev = 14),
                                      (e.next = 17),
                                      navigator.mediaDevices.getUserMedia({
                                        video: br(
                                          {
                                            deviceId: {
                                              exact:
                                                this._webcam.device.deviceId,
                                            },
                                          },
                                          Cr[this._webcam.resolution]
                                        ),
                                      })
                                    );
                                  case 17:
                                    (t = e.sent), (e.next = 25);
                                    break;
                                  case 20:
                                    return (
                                      (e.prev = 20),
                                      (e.t1 = e.catch(14)),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "Error in getUserMedia for changeWebcamResolution",
                                          logType: "ERROR",
                                          attributes: {
                                            error: JSON.stringify(e.t1),
                                          },
                                        }),
                                      "Permission denied" === e.t1.message ||
                                      "NotAllowedError" === e.t1.name
                                        ? this._emitError(
                                            It.q
                                              .ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                          )
                                        : this._emitError(
                                            It.q.ERROR_GET_VIDEO_MEDIA
                                          ),
                                      e.abrupt("return")
                                    );
                                  case 25:
                                    return (
                                      (n = t.getVideoTracks()[0]),
                                      (e.next = 28),
                                      this._webcamProducer.replaceTrack({
                                        track: n,
                                      })
                                    );
                                  case 28:
                                    kr.dispatch(lt(this._webcamProducer.id, n)),
                                      (e.next = 36);
                                    break;
                                  case 31:
                                    (e.prev = 31),
                                      (e.t2 = e.catch(2)),
                                      Dr.error(
                                        "changeWebcamResolution() | failed: %o",
                                        e.t2
                                      ),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText:
                                            "Error Could not change webcam resolution",
                                          logType: "ERROR",
                                          attributes: { error: e.t2.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Could not change webcam resolution: ".concat(
                                            e.t2
                                          ),
                                        })
                                      );
                                  case 36:
                                    kr.dispatch(ht(!1));
                                  case 37:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [2, 31],
                              [14, 20],
                            ]
                          );
                        })
                      )),
                      function () {
                        return he.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableShare",
                    value:
                      ((pe = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r,
                            n,
                            s,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g,
                            v,
                            _,
                            y,
                            b,
                            w,
                            S,
                            R,
                            k,
                            E,
                            C,
                            T,
                            P,
                            O,
                            x,
                            D,
                            I,
                            A,
                            M,
                            L,
                            N,
                            j,
                            B,
                            F,
                            U,
                            W,
                            q,
                            V,
                            H = this,
                            z = arguments;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r =
                                        z.length > 0 && void 0 !== z[0]
                                          ? z[0]
                                          : void 0),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "enableShare() Calling ".concat(
                                                  r
                                                    ? "With Custom Video Track"
                                                    : "Without Custom Video Track "
                                                ),
                                              attributes: {
                                                customShareConfig: r
                                                  ? JSON.stringify(r)
                                                  : "Not Specify Custom Track",
                                              },
                                            })),
                                      Dr.debug("enableShare()"),
                                      !this._shareProducer)
                                    ) {
                                      e.next = 6;
                                      break;
                                    }
                                    return (
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Screen Share Producer found",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 6:
                                    if (
                                      this._mediasoupDevice.canProduce("video")
                                    ) {
                                      e.next = 10;
                                      break;
                                    }
                                    return (
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "enableShare() | cannot produce video",
                                        }),
                                      Dr.error(
                                        "enableShare() | cannot produce video"
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 10:
                                    if (
                                      ((c = []),
                                      kr.dispatch(mt(!0)),
                                      (e.prev = 12),
                                      Dr.debug(
                                        "enableShare() | calling getUserMedia()"
                                      ),
                                      (g =
                                        null === (d = this._openTelemetry) ||
                                        void 0 === d
                                          ? void 0
                                          : d.trace({
                                              spanName: "Creating Track",
                                              span: n,
                                            })),
                                      !r || !r.active)
                                    ) {
                                      e.next = 21;
                                      break;
                                    }
                                    (a = r.getVideoTracks()[0]),
                                      (o = r.getAudioTracks()[0]),
                                      r.multiStream
                                        ? ((v = a.getConstraints()),
                                          (_ = v.height),
                                          (y = v.frameRate),
                                          (b =
                                            Dt.$.screenShareProfiles[
                                              "h"
                                                .concat(_, "p_")
                                                .concat(y, "fps")
                                            ]),
                                          (w = [
                                            {
                                              maxBitrate: b.bitrates.high,
                                              maxFramerate: y,
                                              scalabilityMode: "S3T3",
                                              dtx: !0,
                                            },
                                            {
                                              maxBitrate: b.bitrates.medium,
                                              maxFramerate: y,
                                              scalabilityMode: "S2T3",
                                              dtx: !0,
                                            },
                                            {
                                              maxBitrate: b.bitrates.low,
                                              maxFramerate: y,
                                              scalabilityMode: "S1T3",
                                              dtx: !0,
                                            },
                                          ]),
                                          (c = w))
                                        : (c = Or),
                                      (e.next = 41);
                                    break;
                                  case 21:
                                    return (
                                      (e.prev = 21),
                                      (e.next = 24),
                                      navigator.mediaDevices.getDisplayMedia({
                                        audio: !0,
                                        video: {
                                          width: { max: 1920 },
                                          height: { max: 1080 },
                                          frameRate: { max: 10 },
                                        },
                                      })
                                    );
                                  case 24:
                                    (R = e.sent), (e.next = 33);
                                    break;
                                  case 27:
                                    return (
                                      (e.prev = 27),
                                      (e.t0 = e.catch(21)),
                                      null === (k = this._videosdkLogs) ||
                                        void 0 === k ||
                                        k.pushLogs({
                                          logText:
                                            "Error in getDisplayMedia for screen share",
                                          logType: "ERROR",
                                          attributes: {
                                            error: JSON.stringify(e.t0),
                                          },
                                        }),
                                      null === (E = this._openTelemetry) ||
                                        void 0 === E ||
                                        E.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error in getDisplayMedia for screen share ".concat(
                                              e.t0
                                            ),
                                        }),
                                      "Permission denied" === e.t0.message ||
                                      "NotAllowedError" === e.t0.name
                                        ? this._emitError(
                                            It.q
                                              .ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED
                                          )
                                        : this._emitError(
                                            It.q.ERROR_GET_DISPLAY_MEDIA
                                          ),
                                      e.abrupt("return")
                                    );
                                  case 33:
                                    if (R) {
                                      e.next = 37;
                                      break;
                                    }
                                    return (
                                      kr.dispatch(mt(!0)),
                                      null === (C = this._openTelemetry) ||
                                        void 0 === C ||
                                        C.completeSpan({
                                          span: n,
                                          status: 2,
                                          message: "Stream not found",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 37:
                                    (a = R.getVideoTracks()[0]),
                                      (o = R.getAudioTracks()[0]),
                                      (c = Or),
                                      null === (S = this._openTelemetry) ||
                                        void 0 === S ||
                                        S.completeSpan({
                                          message:
                                            "Track Generated with height "
                                              .concat(
                                                a.getSettings().height,
                                                " and width "
                                              )
                                              .concat(a.getSettings().width),
                                          span: g,
                                          status: 1,
                                        });
                                  case 41:
                                    if (
                                      ((T =
                                        null === (l = this._openTelemetry) ||
                                        void 0 === l
                                          ? void 0
                                          : l.trace({
                                              spanName:
                                                "Generating Producer Configuration",
                                              span: n,
                                            })),
                                      (O = { videoGoogleStartBitrate: 1e3 }),
                                      !this._forceH264)
                                    ) {
                                      e.next = 50;
                                      break;
                                    }
                                    if (
                                      (P =
                                        this._mediasoupDevice.rtpCapabilities.codecs.find(
                                          function (e) {
                                            return (
                                              "video/h264" ===
                                              e.mimeType.toLowerCase()
                                            );
                                          }
                                        ))
                                    ) {
                                      e.next = 48;
                                      break;
                                    }
                                    throw (
                                      (null === (x = this._videosdkLogs) ||
                                        void 0 === x ||
                                        x.pushLogs({
                                          logText:
                                            "Error EnableShare : desired H264 codec+configuration is not supported",
                                          logType: "ERROR",
                                        }),
                                      new Error(
                                        "desired H264 codec+configuration is not supported"
                                      ))
                                    );
                                  case 48:
                                    e.next = 55;
                                    break;
                                  case 50:
                                    if (!this._forceVP9) {
                                      e.next = 55;
                                      break;
                                    }
                                    if (
                                      (P =
                                        this._mediasoupDevice.rtpCapabilities.codecs.find(
                                          function (e) {
                                            return (
                                              "video/vp9" ===
                                              e.mimeType.toLowerCase()
                                            );
                                          }
                                        ))
                                    ) {
                                      e.next = 55;
                                      break;
                                    }
                                    throw (
                                      (null === (D = this._videosdkLogs) ||
                                        void 0 === D ||
                                        D.pushLogs({
                                          logText:
                                            "Error EnableShare :desired VP9 codec+configuration is not supported",
                                          logType: "ERROR",
                                        }),
                                      new Error(
                                        "desired VP9 codec+configuration is not supported"
                                      ))
                                    );
                                  case 55:
                                    return (
                                      null === (p = this._openTelemetry) ||
                                        void 0 === p ||
                                        p.completeSpan({
                                          span: T,
                                          status: 1,
                                          message:
                                            "Producer Configuration Generated",
                                        }),
                                      (T =
                                        null === (h = this._openTelemetry) ||
                                        void 0 === h
                                          ? void 0
                                          : h.trace({
                                              spanName:
                                                "Creating Share Producer",
                                              span: n,
                                            })),
                                      (e.next = 59),
                                      this._sendTransport.produce({
                                        track: a,
                                        encodings: c.length > 0 ? c : Or,
                                        codecOptions: O,
                                        codec: P,
                                        appData: {
                                          share: !0,
                                          isEncrypted: this.isE2EEEnabled,
                                        },
                                        onRtpSender: function (e) {
                                          e.senderStreams =
                                            e.createEncodedStreams();
                                        },
                                      })
                                    );
                                  case 59:
                                    if (
                                      ((this._shareProducer = e.sent),
                                      this.e2eeManager &&
                                        this.e2eeManager.emit(
                                          "NEW_PRODUCER",
                                          this._shareProducer
                                        ),
                                      (I = ct({
                                        id: this._shareProducer.id,
                                        type: "share",
                                        paused: this._shareProducer.paused,
                                        track: this._shareProducer.track,
                                        rtpParameters:
                                          this._shareProducer.rtpParameters,
                                        codec:
                                          this._shareProducer.rtpParameters.codecs[0].mimeType.split(
                                            "/"
                                          )[1],
                                        appData: {
                                          share: !0,
                                          isEncrypted: this.isE2EEEnabled,
                                        },
                                        instance: this._shareProducer,
                                        rtpSender:
                                          this._shareProducer.rtpSender,
                                      })),
                                      kr.dispatch(I),
                                      this._eventEmitter.emit(
                                        I.type,
                                        I.payload
                                      ),
                                      this._shareProducer.on(
                                        "transportclose",
                                        function () {
                                          var e,
                                            t = dt(H._shareProducer.id);
                                          kr.dispatch(t),
                                            H._eventEmitter.emit(
                                              t.type,
                                              t.payload
                                            ),
                                            null === (e = H._shareProducer) ||
                                              void 0 === e ||
                                              e.close(),
                                            (H._shareProducer = null);
                                        }
                                      ),
                                      this._shareProducer.on(
                                        "trackended",
                                        function () {
                                          var e;
                                          null === (e = H._openTelemetry) ||
                                            void 0 === e ||
                                            e.traceAutoComplete({
                                              spanName:
                                                "this._shareProducer trackended or Share disconnected!",
                                              span: n,
                                              status: 2,
                                            }),
                                            kr.dispatch(
                                              Pt({
                                                type: "error",
                                                text: "Share disconnected!",
                                              })
                                            ),
                                            H.disableShare().catch(
                                              function () {}
                                            );
                                        }
                                      ),
                                      null === (m = this._openTelemetry) ||
                                        void 0 === m ||
                                        m.completeSpan({
                                          span: T,
                                          status: 1,
                                          message: "Share Producer Created",
                                        }),
                                      !o)
                                    ) {
                                      e.next = 88;
                                      break;
                                    }
                                    return (
                                      (e.prev = 68),
                                      (L = { opusStereo: 1, opusDtx: 1 }),
                                      (T =
                                        null === (A = this._openTelemetry) ||
                                        void 0 === A
                                          ? void 0
                                          : A.trace({
                                              spanName:
                                                "Creating Share Audio Producer",
                                              span: n,
                                            })),
                                      (e.next = 73),
                                      this._sendTransport.produce({
                                        track: o,
                                        codecOptions: L,
                                        appData: {
                                          share: !0,
                                          isEncrypted: this.isE2EEEnabled,
                                        },
                                        onRtpSender: function (e) {
                                          e.senderStreams =
                                            e.createEncodedStreams();
                                        },
                                      })
                                    );
                                  case 73:
                                    (this._shareAudioProducer = e.sent),
                                      (N = ct({
                                        id: this._shareAudioProducer.id,
                                        type: "share",
                                        paused: this._shareAudioProducer.paused,
                                        track: this._shareAudioProducer.track,
                                        rtpParameters:
                                          this._shareAudioProducer
                                            .rtpParameters,
                                        codec:
                                          this._shareAudioProducer.rtpParameters.codecs[0].mimeType.split(
                                            "/"
                                          )[1],
                                        appData: {
                                          share: !0,
                                          isEncrypted: this.isE2EEEnabled,
                                        },
                                        instance: this._shareAudioProducer,
                                        rtpSender:
                                          this._shareAudioProducer.rtpSender,
                                      })),
                                      kr.dispatch(N),
                                      this.e2eeManager &&
                                        this.e2eeManager.emit(
                                          "NEW_PRODUCER",
                                          this._shareAudioProducer
                                        ),
                                      this._eventEmitter.emit(
                                        N.type,
                                        N.payload
                                      ),
                                      this._shareAudioProducer.on(
                                        "transportclose",
                                        function () {
                                          var e,
                                            t = dt(H._shareAudioProducer.id);
                                          kr.dispatch(t),
                                            H._eventEmitter.emit(
                                              t.type,
                                              t.payload
                                            ),
                                            null ===
                                              (e = H._shareAudioProducer) ||
                                              void 0 === e ||
                                              e.close(),
                                            (H._shareAudioProducer = null);
                                        }
                                      ),
                                      this._shareAudioProducer.on(
                                        "trackended",
                                        function () {
                                          var e;
                                          null === (e = H._openTelemetry) ||
                                            void 0 === e ||
                                            e.traceAutoComplete({
                                              spanName:
                                                "this._shareAudioProducer trackended",
                                              span: n,
                                              status: 2,
                                            }),
                                            kr.dispatch(
                                              Pt({
                                                type: "error",
                                                text: "Share disconnected!",
                                              })
                                            );
                                        }
                                      ),
                                      null === (M = this._openTelemetry) ||
                                        void 0 === M ||
                                        M.completeSpan({
                                          span: T,
                                          status: 1,
                                          message:
                                            "Share Audio Producer Created",
                                        }),
                                      (e.next = 88);
                                    break;
                                  case 83:
                                    return (
                                      (e.prev = 83),
                                      (e.t1 = e.catch(68)),
                                      (e.next = 87),
                                      this._socketRequest("produceError", {
                                        mediaType: "shareAudio",
                                        message: e.t1.message,
                                      })
                                    );
                                  case 87:
                                    null === (j = this._videosdkLogs) ||
                                      void 0 === j ||
                                      j.pushLogs({
                                        logText:
                                          "Error in shareAudio produceError",
                                        logType: "ERROR",
                                        attributes: { error: e.t1.message },
                                      });
                                  case 88:
                                    null === (f = this._openTelemetry) ||
                                      void 0 === f ||
                                      f.completeSpan({
                                        span: n,
                                        status: 1,
                                        message: "Enable Share Successful",
                                      }),
                                      (e.next = 102);
                                    break;
                                  case 91:
                                    return (
                                      (e.prev = 91),
                                      (e.t2 = e.catch(12)),
                                      Dr.error(
                                        "enableShare() | failed:%o",
                                        e.t2
                                      ),
                                      null === (B = this._openTelemetry) ||
                                        void 0 === B ||
                                        B.completeSpan({
                                          span: n,
                                          status: 2,
                                          attributes: { error: e.t2.message },
                                          message:
                                            "Error in enableShare video produceError",
                                        }),
                                      console.log(
                                        "screen share catch",
                                        e.t2.message
                                      ),
                                      null === (F = this._videosdkLogs) ||
                                        void 0 === F ||
                                        F.pushLogs({
                                          logText:
                                            "Error in enableShare video produceError",
                                          logType: "ERROR",
                                          attributes: { error: e.t2.message },
                                        }),
                                      "NotAllowedError" !== e.t2.name &&
                                        kr.dispatch(
                                          Pt({
                                            type: "error",
                                            text: "Error sharing: ".concat(
                                              e.t2
                                            ),
                                          })
                                        ),
                                      (e.next = 100),
                                      this._socketRequest("produceError", {
                                        mediaType: "share",
                                        message: e.t2.message,
                                      })
                                    );
                                  case 100:
                                    a && a.stop(), o && o.stop();
                                  case 102:
                                    kr.dispatch(mt(!1)),
                                      this._shareProducer &&
                                        ((U = 0),
                                        ((W = this._metrics.addNewProbe(
                                          this._shareProducer,
                                          "share_producer"
                                        )).onStatsCollected = function (e) {
                                          try {
                                            var t;
                                            H._stats.producerStats ||
                                              (H._stats.producerStats = {}),
                                              H._stats.producerStats.share ||
                                                (H._stats.producerStats.share =
                                                  []),
                                              H._shareProducer &&
                                                (H._latestStats[
                                                  null ===
                                                    (t = H._shareProducer) ||
                                                  void 0 === t
                                                    ? void 0
                                                    : t.id
                                                ] = []),
                                              e.video.forEach(function (e) {
                                                var t;
                                                H._shareProducer &&
                                                  H._latestStats[
                                                    null ===
                                                      (t = H._shareProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.id
                                                  ].push(e);
                                              }),
                                              U % 5 == 0 &&
                                                null != H._shareProducer &&
                                                H._stats.producerStats.share.push(
                                                  {
                                                    timestamp: new Date(),
                                                    stats:
                                                      H._latestStats[
                                                        H._shareProducer.id
                                                      ],
                                                  }
                                                ),
                                              U++;
                                          } catch (e) {
                                            var r;
                                            null === (r = H._videosdkLogs) ||
                                              void 0 === r ||
                                              r.pushLogs({
                                                logText:
                                                  "Error PRODUCER Stats ERROR",
                                                logType: "ERROR",
                                                attributes: {
                                                  error: e.message,
                                                },
                                              }),
                                              console.log("PRODUCER ERROR", e);
                                          }
                                        }),
                                        W.start(),
                                        this._shareProducer.observer.on(
                                          "close",
                                          function () {
                                            W.stop(),
                                              H._metrics.removeExistingProbe(W);
                                          }
                                        )),
                                      this._shareAudioProducer &&
                                        ((q = 0),
                                        ((V = this._metrics.addNewProbe(
                                          this._shareAudioProducer,
                                          "share_audio_producer"
                                        )).onStatsCollected = function (e) {
                                          try {
                                            var t;
                                            H._stats.producerStats ||
                                              (H._stats.producerStats = {}),
                                              H._stats.producerStats
                                                .shareAudio ||
                                                (H._stats.producerStats.shareAudio =
                                                  []),
                                              H._shareAudioProducer &&
                                                (H._latestStats[
                                                  null ===
                                                    (t =
                                                      H._shareAudioProducer) ||
                                                  void 0 === t
                                                    ? void 0
                                                    : t.id
                                                ] = []),
                                              e.audio.forEach(function (e) {
                                                var t;
                                                H._shareAudioProducer &&
                                                  H._latestStats[
                                                    null ===
                                                      (t =
                                                        H._shareAudioProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.id
                                                  ].push(e);
                                              }),
                                              q % 5 == 0 &&
                                                null != H._shareAudioProducer &&
                                                H._stats.producerStats.shareAudio.push(
                                                  br(
                                                    { timestamp: new Date() },
                                                    H._latestStats[
                                                      H._shareAudioProducer.id
                                                    ]
                                                      ? H._latestStats[
                                                          H._shareAudioProducer
                                                            .id
                                                        ][0]
                                                      : {}
                                                  )
                                                ),
                                              q++;
                                          } catch (e) {
                                            var r;
                                            null === (r = H._videosdkLogs) ||
                                              void 0 === r ||
                                              r.pushLogs({
                                                logText:
                                                  "Error PRODUCER Stats ERROR",
                                                logType: "ERROR",
                                                attributes: {
                                                  error: e.message,
                                                },
                                              }),
                                              console.log("PRODUCER ERROR", e);
                                          }
                                        }),
                                        V.start(),
                                        this._shareAudioProducer.observer.on(
                                          "close",
                                          function () {
                                            V.stop(),
                                              H._metrics.removeExistingProbe(V);
                                          }
                                        ));
                                  case 105:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [12, 91],
                              [21, 27],
                              [68, 83],
                            ]
                          );
                        })
                      )),
                      function () {
                        return pe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableShare",
                    value:
                      ((ue = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n, s, i, a, o, c, d, l, p, h, m;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("disableShare()"),
                                      (s =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "disableShare() Calling",
                                              status: 1,
                                            })),
                                      this._shareProducer)
                                    ) {
                                      e.next = 5;
                                      break;
                                    }
                                    return (
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: s,
                                          status: 2,
                                          message: "Share Producer Not found",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 5:
                                    return (
                                      (a =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "Closing Share Producer",
                                              span: s,
                                              status: 1,
                                            })),
                                      this._shareProducer.close(),
                                      (o = dt(this._shareProducer.id)),
                                      kr.dispatch(o),
                                      this._eventEmitter.emit(
                                        o.type,
                                        o.payload
                                      ),
                                      this._shareAudioProducer &&
                                        ((l =
                                          null === (c = this._openTelemetry) ||
                                          void 0 === c
                                            ? void 0
                                            : c.trace({
                                                spanName:
                                                  "Closing Share Audio Producer",
                                                span: s,
                                                status: 1,
                                              })),
                                        this._shareAudioProducer.close(),
                                        (o = dt(this._shareAudioProducer.id)),
                                        kr.dispatch(o),
                                        this._eventEmitter.emit(
                                          o.type,
                                          o.payload
                                        ),
                                        null === (d = this._openTelemetry) ||
                                          void 0 === d ||
                                          d.completeSpan({
                                            span: l,
                                            status: 1,
                                            message:
                                              "Closed Share Audio Producer",
                                          })),
                                      (e.prev = 11),
                                      (e.next = 14),
                                      this._socketRequest("closeProducer", {
                                        producerId: this._shareProducer.id,
                                      })
                                    );
                                  case 14:
                                    if (!this._shareAudioProducer) {
                                      e.next = 17;
                                      break;
                                    }
                                    return (
                                      (e.next = 17),
                                      this._socketRequest("closeProducer", {
                                        producerId: this._shareAudioProducer.id,
                                      })
                                    );
                                  case 17:
                                    null === (p = this._openTelemetry) ||
                                      void 0 === p ||
                                      p.completeSpan({
                                        span: a,
                                        status: 1,
                                        message:
                                          "Requested Server to Close Producer",
                                      }),
                                      (e.next = 25);
                                    break;
                                  case 20:
                                    (e.prev = 20),
                                      (e.t0 = e.catch(11)),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error closing server-side share Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      null === (h = this._openTelemetry) ||
                                        void 0 === h ||
                                        h.completeSpan({
                                          span: s,
                                          status: 2,
                                          message:
                                            "Error closing server-side share Producer ".concat(
                                              e.t0
                                            ),
                                        }),
                                      null === (m = this._videosdkLogs) ||
                                        void 0 === m ||
                                        m.pushLogs({
                                          logText:
                                            "Error closing server-side share Producer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 25:
                                    (this._shareProducer = null),
                                      (this._shareAudioProducer = null),
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          span: s,
                                          status: 1,
                                          message:
                                            "Screen Share Disabled Successfully",
                                        });
                                  case 28:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[11, 20]]
                          );
                        })
                      )),
                      function () {
                        return ue.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableAudioOnly",
                    value:
                      ((le = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    Dr.debug("enableAudioOnly()"),
                                      kr.dispatch(it(!0)),
                                      this.disableWebcam(),
                                      (t = wr(this._consumers.values())),
                                      (e.prev = 4),
                                      t.s();
                                  case 6:
                                    if ((r = t.n()).done) {
                                      e.next = 13;
                                      break;
                                    }
                                    if ("video" === (n = r.value).kind) {
                                      e.next = 10;
                                      break;
                                    }
                                    return e.abrupt("continue", 11);
                                  case 10:
                                    this._pauseConsumer(n);
                                  case 11:
                                    e.next = 6;
                                    break;
                                  case 13:
                                    e.next = 18;
                                    break;
                                  case 15:
                                    (e.prev = 15),
                                      (e.t0 = e.catch(4)),
                                      t.e(e.t0);
                                  case 18:
                                    return (e.prev = 18), t.f(), e.finish(18);
                                  case 21:
                                    kr.dispatch(st(!0)), kr.dispatch(it(!1));
                                  case 23:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 15, 18, 21]]
                          );
                        })
                      )),
                      function () {
                        return le.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableAudioOnly",
                    value:
                      ((de = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    Dr.debug("disableAudioOnly()"),
                                      kr.dispatch(it(!0)),
                                      !this._webcamProducer &&
                                        this._produce &&
                                        (Qe() || {}).webcamEnabled &&
                                        this.enableWebcam(),
                                      (t = wr(this._consumers.values())),
                                      (e.prev = 4),
                                      t.s();
                                  case 6:
                                    if ((r = t.n()).done) {
                                      e.next = 13;
                                      break;
                                    }
                                    if ("video" === (n = r.value).kind) {
                                      e.next = 10;
                                      break;
                                    }
                                    return e.abrupt("continue", 11);
                                  case 10:
                                    this._resumeConsumer(n);
                                  case 11:
                                    e.next = 6;
                                    break;
                                  case 13:
                                    e.next = 18;
                                    break;
                                  case 15:
                                    (e.prev = 15),
                                      (e.t0 = e.catch(4)),
                                      t.e(e.t0);
                                  case 18:
                                    return (e.prev = 18), t.f(), e.finish(18);
                                  case 21:
                                    kr.dispatch(st(!1)), kr.dispatch(it(!1));
                                  case 23:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 15, 18, 21]]
                          );
                        })
                      )),
                      function () {
                        return de.apply(this, arguments);
                      }),
                  },
                  {
                    key: "muteAudio",
                    value:
                      ((ce = (0, a.A)(
                        u().mark(function e() {
                          return u().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  Dr.debug("muteAudio()"), kr.dispatch(at(!0));
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function () {
                        return ce.apply(this, arguments);
                      }),
                  },
                  {
                    key: "unmuteAudio",
                    value:
                      ((oe = (0, a.A)(
                        u().mark(function e() {
                          return u().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  Dr.debug("unmuteAudio()"),
                                    kr.dispatch(at(!1));
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function () {
                        return oe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "handleRemoteRestartIce",
                    value:
                      ((ae = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a, o, c, d;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (s = t.iceParameters),
                                      (i = t.transportId),
                                      (a = t.internalSpan),
                                      i ===
                                        (null === (r = this._sendTransport) ||
                                        void 0 === r
                                          ? void 0
                                          : r.id) &&
                                        this._sendTransport.restartIce({
                                          iceParameters: s,
                                        }),
                                      i ===
                                        (null === (n = this._recvTransport) ||
                                        void 0 === n
                                          ? void 0
                                          : n.id) &&
                                        this._recvTransport.restartIce({
                                          iceParameters: s,
                                        }),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._socketRequest("iceRestarted", {
                                        transportId: i,
                                      })
                                    );
                                  case 6:
                                    null === (o = this._openTelemetry) ||
                                      void 0 === o ||
                                      o.completeSpan({
                                        span: a,
                                        status: 1,
                                        message: "iceRestarted",
                                      }),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(3)),
                                      null === (c = this._openTelemetry) ||
                                        void 0 === c ||
                                        c.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "handleRemoteRestartIce() ICE restart failed ".concat(
                                              e.t0
                                            ),
                                        }),
                                      null === (d = this._videosdkLogs) ||
                                        void 0 === d ||
                                        d.pushLogs({
                                          logText:
                                            "Error handleRemoteRestartIce() ICE restart failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "ICE restart failed: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return ae.apply(this, arguments);
                      }),
                  },
                  {
                    key: "restartIce",
                    value:
                      ((ie = (0, a.A)(
                        u().mark(function e() {
                          var t, r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("restartIce()"),
                                      kr.dispatch(ot(!0)),
                                      (e.prev = 2),
                                      !this._sendTransport)
                                    ) {
                                      e.next = 9;
                                      break;
                                    }
                                    return (
                                      (e.next = 6),
                                      this._socketRequest("restartIce", {
                                        transportId: this._sendTransport.id,
                                      })
                                    );
                                  case 6:
                                    return (
                                      (t = e.sent),
                                      (e.next = 9),
                                      this._sendTransport.restartIce({
                                        iceParameters: t,
                                      })
                                    );
                                  case 9:
                                    if (!this._recvTransport) {
                                      e.next = 15;
                                      break;
                                    }
                                    return (
                                      (e.next = 12),
                                      this._socketRequest("restartIce", {
                                        transportId: this._recvTransport.id,
                                      })
                                    );
                                  case 12:
                                    return (
                                      (r = e.sent),
                                      (e.next = 15),
                                      this._recvTransport.restartIce({
                                        iceParameters: r,
                                      })
                                    );
                                  case 15:
                                    kr.dispatch(Pt({ text: "ICE restarted" })),
                                      (e.next = 23);
                                    break;
                                  case 18:
                                    (e.prev = 18),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "restartIce() | failed:%o",
                                        e.t0
                                      ),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "ICE restart failed: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error restartIce() ICE restart failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 23:
                                    kr.dispatch(ot(!1));
                                  case 24:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 18]]
                          );
                        })
                      )),
                      function () {
                        return ie.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_socketRequest",
                    value:
                      ((se = (0, a.A)(
                        u().mark(function e(t) {
                          var r,
                            n = this,
                            s = arguments;
                          return u().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r =
                                      s.length > 1 && void 0 !== s[1]
                                        ? s[1]
                                        : {}),
                                    e.abrupt(
                                      "return",
                                      new Promise(function (e, s) {
                                        n._webSocket.emit(
                                          "request",
                                          { method: t, request: !0, data: r },
                                          function (t) {
                                            null != t && t.error
                                              ? s(new Error(t.error))
                                              : e(t.data);
                                          }
                                        );
                                      })
                                    )
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e) {
                        return se.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setMaxSendingSpatialLayer",
                    value:
                      ((ne = (0, a.A)(
                        u().mark(function e(t) {
                          var r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug(
                                        "setMaxSendingSpatialLayer() [spatialLayer:%s]",
                                        t
                                      ),
                                      (e.prev = 1),
                                      !this._webcamProducer)
                                    ) {
                                      e.next = 7;
                                      break;
                                    }
                                    return (
                                      (e.next = 5),
                                      this._webcamProducer.setMaxSpatialLayer(t)
                                    );
                                  case 5:
                                    e.next = 10;
                                    break;
                                  case 7:
                                    if (!this._shareProducer) {
                                      e.next = 10;
                                      break;
                                    }
                                    return (
                                      (e.next = 10),
                                      this._shareProducer.setMaxSpatialLayer(t)
                                    );
                                  case 10:
                                    e.next = 17;
                                    break;
                                  case 12:
                                    (e.prev = 12),
                                      (e.t0 = e.catch(1)),
                                      Dr.error(
                                        "setMaxSendingSpatialLayer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "Error setting max sending video spatial layer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error setting max sending video spatial layer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 17:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 12]]
                          );
                        })
                      )),
                      function (e) {
                        return ne.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setWebcamQuality",
                    value:
                      ((re = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (this._webcamProducer) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    if (
                                      ((r = this._webcam.resolution),
                                      (n = Er[r][t].s),
                                      this._webcamProducer.maxSpatialLayer != n)
                                    ) {
                                      e.next = 6;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 6:
                                    return (
                                      (e.next = 8),
                                      this._webcamProducer.setMaxSpatialLayer(n)
                                    );
                                  case 8:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return re.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setConsumerScreenShareQuality",
                    value:
                      ((te = (0, a.A)(
                        u().mark(function e(t, r) {
                          var n, s, i, a, o, c;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (a =
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName: 'Setting "'.concat(
                                                r,
                                                '" Quality for Screen Share'
                                              ),
                                            })),
                                      (c =
                                        (o = {
                                          high: {
                                            spatialLayer: 2,
                                            temporalLayer: 2,
                                          },
                                          med: {
                                            spatialLayer: 1,
                                            temporalLayer: 2,
                                          },
                                          low: {
                                            spatialLayer: 0,
                                            temporalLayer: 2,
                                          },
                                        })[r] || o.high),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.traceAutoComplete({
                                          spanName:
                                            "Getting spatial & temporal layers",
                                          span: a,
                                          attributes: { selectedQuality: c },
                                          status: 1,
                                        }),
                                      (e.next = 6),
                                      this.setConsumerPreferredLayers(
                                        t,
                                        c.spatialLayer,
                                        c.temporalLayer
                                      )
                                    );
                                  case 6:
                                    null === (i = this._openTelemetry) ||
                                      void 0 === i ||
                                      i.completeSpan({
                                        message: "Done",
                                        span: a,
                                        status: 1,
                                      });
                                  case 7:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t) {
                        return te.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setConsumerQuality",
                    value:
                      ((ee = (0, a.A)(
                        u().mark(function e(t, r) {
                          var n, s, i, a, o, c, d;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (a = this._webcam.resolution),
                                      (o =
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName: 'Setting "'.concat(
                                                r,
                                                '" Quality'
                                              ),
                                            })),
                                      (c = Er[a][r].s),
                                      (d = Er[a][r].t),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.traceAutoComplete({
                                          spanName:
                                            "Getting spatial & temporal layers",
                                          span: o,
                                          attributes: {
                                            spatialLayers: JSON.parse(c),
                                            temporalLayers: JSON.parse(d),
                                          },
                                          status: 1,
                                        }),
                                      (e.next = 7),
                                      this.setConsumerPreferredLayers(t, c, d)
                                    );
                                  case 7:
                                    null === (i = this._openTelemetry) ||
                                      void 0 === i ||
                                      i.completeSpan({
                                        message: "Done",
                                        span: o,
                                        status: 1,
                                      });
                                  case 8:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t) {
                        return ee.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setViewPort",
                    value:
                      ((Z = (0, a.A)(
                        u().mark(function e(t, r, n) {
                          var s, i, a, o;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (this._consumers.get(t.id)) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    if (
                                      ((s = (0, xt.ed)(
                                        this._consumers.get(t.id),
                                        r,
                                        n
                                      )),
                                      (i = s.consumerId),
                                      (a = s.newPreferredSpatialLayer),
                                      (o = s.newPreferredTemporalLayer),
                                      a !== t.preferredSpatialLayer ||
                                        o !== t.preferredTemporalLayer)
                                    ) {
                                      e.next = 5;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 5:
                                    if (!i) {
                                      e.next = 8;
                                      break;
                                    }
                                    return (
                                      (e.next = 8),
                                      this.setConsumerPreferredLayers(i, a, o)
                                    );
                                  case 8:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t, r) {
                        return Z.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setConsumerPreferredLayers",
                    value:
                      ((X = (0, a.A)(
                        u().mark(function e(t, r, n) {
                          var s, i;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug(
                                        "setConsumerPreferredLayers() [consumerId:%s, spatialLayer:%s, temporalLayer:%s]",
                                        t,
                                        r,
                                        n
                                      ),
                                      (e.prev = 1),
                                      (s = this._consumers.get(t))
                                        .spatialLayers > 1 &&
                                        ((s.preferredSpatialLayer = r),
                                        (s.preferredTemporalLayer = n)),
                                      (e.next = 6),
                                      this._socketRequest(
                                        "setConsumerPreferredLayers",
                                        {
                                          consumerId: t,
                                          spatialLayer: r,
                                          temporalLayer: n,
                                        }
                                      )
                                    );
                                  case 6:
                                    kr.dispatch(Rt(t, r, n)), (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(1)),
                                      Dr.error(
                                        "setConsumerPreferredLayers() | failed:%o",
                                        e.t0
                                      ),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText:
                                            "Error setting Consumer preferred layers:",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error setting Consumer preferred layers: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 9]]
                          );
                        })
                      )),
                      function (e, t, r) {
                        return X.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setConsumerPriority",
                    value:
                      ((Y = (0, a.A)(
                        u().mark(function e(t, r) {
                          var n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug(
                                        "setConsumerPriority() [consumerId:%s, priority:%d]",
                                        t,
                                        r
                                      ),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._socketRequest(
                                        "setConsumerPriority",
                                        { consumerId: t, priority: r }
                                      )
                                    );
                                  case 4:
                                    kr.dispatch(kt(t, r)), (e.next = 12);
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(1)),
                                      Dr.error(
                                        "setConsumerPriority() | failed:%o",
                                        e.t0
                                      ),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error setting Consumer priority",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error setting Consumer priority: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 7]]
                          );
                        })
                      )),
                      function (e, t) {
                        return Y.apply(this, arguments);
                      }),
                  },
                  {
                    key: "requestConsumerKeyFrame",
                    value:
                      ((Q = (0, a.A)(
                        u().mark(function e(t) {
                          var r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug(
                                        "requestConsumerKeyFrame() [consumerId:%s]",
                                        t
                                      ),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._socketRequest(
                                        "requestConsumerKeyFrame",
                                        { consumerId: t }
                                      )
                                    );
                                  case 4:
                                    kr.dispatch(
                                      Pt({
                                        text: "Keyframe requested for video consumer",
                                      })
                                    ),
                                      (e.next = 12);
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(1)),
                                      Dr.error(
                                        "requestConsumerKeyFrame() | failed:%o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "Error requesting key frame for Consumer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error requesting key frame for Consumer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Q.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableChatDataProducer",
                    value:
                      ((J = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r = this;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("enableChatDataProducer()"),
                                      this._useDataChannel)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return (
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._sendTransport.produceData({
                                        ordered: !1,
                                        maxRetransmits: 1,
                                        label: "chat",
                                        priority: "medium",
                                        appData: {
                                          info: "my-chat-DataProducer",
                                        },
                                      })
                                    );
                                  case 6:
                                    (this._chatDataProducer = e.sent),
                                      kr.dispatch(
                                        pt({
                                          id: this._chatDataProducer.id,
                                          sctpStreamParameters:
                                            this._chatDataProducer
                                              .sctpStreamParameters,
                                          label: this._chatDataProducer.label,
                                          protocol:
                                            this._chatDataProducer.protocol,
                                        })
                                      ),
                                      this._chatDataProducer.on(
                                        "transportclose",
                                        function () {
                                          r._chatDataProducer = null;
                                        }
                                      ),
                                      this._chatDataProducer.on(
                                        "open",
                                        function () {
                                          Dr.debug(
                                            'chat DataProducer "open" event'
                                          );
                                        }
                                      ),
                                      this._chatDataProducer.on(
                                        "close",
                                        function () {
                                          Dr.error(
                                            'chat DataProducer "close" event'
                                          ),
                                            (r._chatDataProducer = null),
                                            kr.dispatch(
                                              Pt({
                                                type: "error",
                                                text: "Chat DataProducer closed",
                                              })
                                            );
                                        }
                                      ),
                                      this._chatDataProducer.on(
                                        "error",
                                        function (e) {
                                          Dr.error(
                                            'chat DataProducer "error" event:%o',
                                            e
                                          ),
                                            kr.dispatch(
                                              Pt({
                                                type: "error",
                                                text: "Chat DataProducer error: ".concat(
                                                  e
                                                ),
                                              })
                                            );
                                        }
                                      ),
                                      this._chatDataProducer.on(
                                        "bufferedamountlow",
                                        function () {
                                          Dr.debug(
                                            'chat DataProducer "bufferedamountlow" event'
                                          );
                                        }
                                      ),
                                      (e.next = 21);
                                    break;
                                  case 15:
                                    throw (
                                      ((e.prev = 15),
                                      (e.t0 = e.catch(3)),
                                      Dr.error(
                                        "enableChatDataProducer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error enabling chat DataProducer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error enabling chat DataProducer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      e.t0)
                                    );
                                  case 21:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 15]]
                          );
                        })
                      )),
                      function () {
                        return J.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableBotDataProducer",
                    value:
                      (($ = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r = this;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("enableBotDataProducer()"),
                                      this._useDataChannel)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return (
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._sendTransport.produceData({
                                        ordered: !1,
                                        maxPacketLifeTime: 2e3,
                                        label: "bot",
                                        priority: "medium",
                                        appData: {
                                          info: "my-bot-DataProducer",
                                        },
                                      })
                                    );
                                  case 6:
                                    (this._botDataProducer = e.sent),
                                      kr.dispatch(
                                        pt({
                                          id: this._botDataProducer.id,
                                          sctpStreamParameters:
                                            this._botDataProducer
                                              .sctpStreamParameters,
                                          label: this._botDataProducer.label,
                                          protocol:
                                            this._botDataProducer.protocol,
                                        })
                                      ),
                                      this._botDataProducer.on(
                                        "transportclose",
                                        function () {
                                          r._botDataProducer = null;
                                        }
                                      ),
                                      this._botDataProducer.on(
                                        "open",
                                        function () {
                                          Dr.debug(
                                            'bot DataProducer "open" event'
                                          );
                                        }
                                      ),
                                      this._botDataProducer.on(
                                        "close",
                                        function () {
                                          Dr.error(
                                            'bot DataProducer "close" event'
                                          ),
                                            (r._botDataProducer = null),
                                            kr.dispatch(
                                              Pt({
                                                type: "error",
                                                text: "Bot DataProducer closed",
                                              })
                                            );
                                        }
                                      ),
                                      this._botDataProducer.on(
                                        "error",
                                        function (e) {
                                          Dr.error(
                                            'bot DataProducer "error" event:%o',
                                            e
                                          ),
                                            kr.dispatch(
                                              Pt({
                                                type: "error",
                                                text: "Bot DataProducer error: ".concat(
                                                  e
                                                ),
                                              })
                                            );
                                        }
                                      ),
                                      this._botDataProducer.on(
                                        "bufferedamountlow",
                                        function () {
                                          Dr.debug(
                                            'bot DataProducer "bufferedamountlow" event'
                                          );
                                        }
                                      ),
                                      (e.next = 21);
                                    break;
                                  case 15:
                                    throw (
                                      ((e.prev = 15),
                                      (e.t0 = e.catch(3)),
                                      Dr.error(
                                        "enableBotDataProducer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error enabling bot DataProducer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error enabling bot DataProducer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      e.t0)
                                    );
                                  case 21:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 15]]
                          );
                        })
                      )),
                      function () {
                        return $.apply(this, arguments);
                      }),
                  },
                  {
                    key: "sendChatMessage",
                    value:
                      ((K = (0, a.A)(
                        u().mark(function e(t) {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug(
                                        'sendChatMessage() [text:"%s]',
                                        t
                                      ),
                                      this._chatDataProducer)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return (
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "No chat DataProducer",
                                        })
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 4:
                                    try {
                                      this._chatDataProducer.send(t);
                                    } catch (e) {
                                      Dr.error(
                                        "chat DataProducer.send() failed:%o",
                                        e
                                      ),
                                        kr.dispatch(
                                          Pt({
                                            type: "error",
                                            text: "chat DataProducer.send() failed: ".concat(
                                              e
                                            ),
                                          })
                                        );
                                    }
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return K.apply(this, arguments);
                      }),
                  },
                  {
                    key: "sendBotMessage",
                    value:
                      ((G = (0, a.A)(
                        u().mark(function e(t) {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug(
                                        'sendBotMessage() [text:"%s]',
                                        t
                                      ),
                                      this._botDataProducer)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return (
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "No bot DataProducer",
                                        })
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 4:
                                    try {
                                      this._botDataProducer.send(t);
                                    } catch (e) {
                                      Dr.error(
                                        "bot DataProducer.send() failed:%o",
                                        e
                                      ),
                                        kr.dispatch(
                                          Pt({
                                            type: "error",
                                            text: "bot DataProducer.send() failed: ".concat(
                                              e
                                            ),
                                          })
                                        );
                                    }
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return G.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeDisplayName",
                    value:
                      ((z = (0, a.A)(
                        u().mark(function e(t) {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug(
                                        'changeDisplayName() [displayName:"%s"]',
                                        t
                                      ),
                                      Je({ displayName: t }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("changeDisplayName", {
                                        displayName: t,
                                      })
                                    );
                                  case 5:
                                    (this._displayName = t),
                                      kr.dispatch(nt(t)),
                                      kr.dispatch(
                                        Pt({ text: "Display name changed" })
                                      ),
                                      (e.next = 15);
                                    break;
                                  case 10:
                                    (e.prev = 10),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "changeDisplayName() | failed: %o",
                                        e.t0
                                      ),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Could not change display name: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      kr.dispatch(nt());
                                  case 15:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 10]]
                          );
                        })
                      )),
                      function (e) {
                        return z.apply(this, arguments);
                      }),
                  },
                  {
                    key: "openConnection",
                    value:
                      ((H = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.roomId),
                                      (n = t.payload),
                                      (e.next = 3),
                                      this._socketRequest("openConnection", {
                                        roomId: r,
                                        payload: n,
                                      }).catch(function (e) {
                                        throw new Error(e);
                                      })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return H.apply(this, arguments);
                      }),
                  },
                  {
                    key: "closeConnection",
                    value:
                      ((V = (0, a.A)(
                        u().mark(function e(t) {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2),
                                      this._socketRequest("closeConnection", {
                                        roomId: t,
                                      })
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return V.apply(this, arguments);
                      }),
                  },
                  {
                    key: "switchPeerRoom",
                    value:
                      ((q = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.peerId),
                                      (n = t.roomId),
                                      (s = t.payload),
                                      (i = t.token),
                                      (e.next = 3),
                                      this._socketRequest("switchPeerRoom", {
                                        roomId: n,
                                        peerId: r,
                                        payload: s,
                                        token: i,
                                      })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return q.apply(this, arguments);
                      }),
                  },
                  {
                    key: "connectionSwitchPeerRoom",
                    value:
                      ((W = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i, a;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.roomId),
                                      (n = t.connectionRoomId),
                                      (s = t.peerId),
                                      (i = t.payload),
                                      (a = t.token),
                                      (e.next = 3),
                                      this._socketRequest(
                                        "connectionSwitchPeerRoom",
                                        {
                                          roomId: r,
                                          connectionRoomId: n,
                                          peerId: s,
                                          payload: i,
                                          token: a,
                                        }
                                      )
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return W.apply(this, arguments);
                      }),
                  },
                  {
                    key: "connectionSendChatMessage",
                    value:
                      ((U = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.roomId),
                                      (n = t.message),
                                      (e.next = 3),
                                      this._socketRequest(
                                        "connectionSendChatMessage",
                                        { roomId: r, message: n }
                                      )
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return U.apply(this, arguments);
                      }),
                  },
                  {
                    key: "connectionEndMeeting",
                    value:
                      ((F = (0, a.A)(
                        u().mark(function e(t) {
                          var r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.roomId),
                                      (e.next = 3),
                                      this._socketRequest(
                                        "connectionCloseRoom",
                                        { roomId: r }
                                      )
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return F.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pubsubPublish",
                    value:
                      ((B = (0, a.A)(
                        u().mark(function e(t, r, n, s) {
                          var i, a, o, c, d, l;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((e.prev = 0), null != n && n.sendOnly)
                                    ) {
                                      if (((i = n.sendOnly), (a = []), i)) {
                                        o = wr(i);
                                        try {
                                          for (o.s(); !(c = o.n()).done; )
                                            (d = c.value) &&
                                              a.push(d.toString());
                                        } catch (e) {
                                          o.e(e);
                                        } finally {
                                          o.f();
                                        }
                                      }
                                      n.sendOnly = a;
                                    }
                                    return (
                                      (e.next = 4),
                                      this._socketRequest("pubsubPublish", {
                                        topic: t,
                                        message: r,
                                        options: n,
                                        payload: s,
                                      })
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(0)),
                                      null === (l = this._videosdkLogs) ||
                                        void 0 === l ||
                                        l.pushLogs({
                                          logText:
                                            "Error pubsubPublish() | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "pubsubPublish() | failed: %o",
                                        e.t0
                                      );
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[0, 6]]
                          );
                        })
                      )),
                      function (e, t, r, n) {
                        return B.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pubsubSubscribe",
                    value:
                      ((j = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("pubsubSubscribe", {
                                        topic: t,
                                      })
                                    );
                                  case 5:
                                    return (r = e.sent), e.abrupt("return", r);
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error pubsubSubscribe() | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "pubsubSubscribe() | failed: %o",
                                        e.t0
                                      );
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return j.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pubsubUnsubscribe",
                    value:
                      ((N = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("pubsubUnsubscribe", {
                                        topic: t,
                                      })
                                    );
                                  case 5:
                                    null === (r = this._videosdkLogs) ||
                                      void 0 === r ||
                                      r.pushLogs({
                                        logText:
                                          "Pubsub Unsubscribing Successfully for topic ".concat(
                                            t
                                          ),
                                        logType: "INFO",
                                      }),
                                      (e.next = 12);
                                    break;
                                  case 8:
                                    (e.prev = 8),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error pubsubUnsubscribe() | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Dr.error(
                                        "pubsubUnsubscribe() | failed: %o",
                                        e.t0
                                      );
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 8]]
                          );
                        })
                      )),
                      function (e) {
                        return N.apply(this, arguments);
                      }),
                  },
                  {
                    key: "closeRoom",
                    value:
                      ((L = (0, a.A)(
                        u().mark(function e() {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2),
                                      this._socketRequest("closeRoom", {})
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return L.apply(this, arguments);
                      }),
                  },
                  {
                    key: "removePeer",
                    value:
                      ((M = (0, a.A)(
                        u().mark(function e(t) {
                          var r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Removing peer ".concat(t),
                                          status: 1,
                                        }),
                                      null != t)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return (
                                      (e.next = 5),
                                      this._socketRequest("removePeer", {
                                        peerId: t,
                                      })
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return M.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getSendTransportRemoteStats",
                    value:
                      ((A = (0, a.A)(
                        u().mark(function e() {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug(
                                        "getSendTransportRemoteStats()"
                                      ),
                                      this._sendTransport)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._socketRequest("getTransportStats", {
                                        transportId: this._sendTransport.id,
                                      })
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return A.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getRecvTransportRemoteStats",
                    value:
                      ((I = (0, a.A)(
                        u().mark(function e() {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug(
                                        "getRecvTransportRemoteStats()"
                                      ),
                                      this._recvTransport)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._socketRequest("getTransportStats", {
                                        transportId: this._recvTransport.id,
                                      })
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return I.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getAudioRemoteStats",
                    value:
                      ((D = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("getAudioRemoteStats()"),
                                      (t = this._micProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._latestStats[t.id]
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return D.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getVideoRemoteStats",
                    value:
                      ((x = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("getVideoRemoteStats()"),
                                      (t = this._webcamProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._latestStats[t.id]
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return x.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getShareRemoteStats",
                    value:
                      ((O = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("getVideoRemoteStats()"),
                                      (t = this._shareProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._latestStats[t.id]
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return O.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getShareAudioRemoteStats",
                    value:
                      ((P = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if ((t = this._shareAudioProducer)) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._latestStats[t.id]
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return P.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getConsumerRemoteStats",
                    value:
                      ((T = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("getConsumerRemoteStats()"),
                                      (r = this._consumers.get(t)))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return (
                                      this._latestStats[t] &&
                                        ((this._latestStats[
                                          t
                                        ][0].currentSpatialLayer =
                                          r.currentSpatialLayer),
                                        (this._latestStats[
                                          t
                                        ][0].currentTemporalLayer =
                                          r.currentTemporalLayer),
                                        (this._latestStats[
                                          t
                                        ][0].preferredSpatialLayer =
                                          r.preferredSpatialLayer),
                                        (this._latestStats[
                                          t
                                        ][0].preferredTemporalLayer =
                                          r.preferredTemporalLayer)),
                                      (n = r.track.id.replace(/[{}]/g, "")),
                                      e.abrupt("return", this._latestStats[n])
                                    );
                                  case 7:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return T.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getChatDataProducerRemoteStats",
                    value:
                      ((C = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug(
                                        "getChatDataProducerRemoteStats()"
                                      ),
                                      (t = this._chatDataProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._socketRequest(
                                        "getDataProducerStats",
                                        { dataProducerId: t.id }
                                      )
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return C.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getBotDataProducerRemoteStats",
                    value:
                      ((E = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug(
                                        "getBotDataProducerRemoteStats()"
                                      ),
                                      (t = this._botDataProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._socketRequest(
                                        "getDataProducerStats",
                                        { dataProducerId: t.id }
                                      )
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return E.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getDataConsumerRemoteStats",
                    value:
                      ((k = (0, a.A)(
                        u().mark(function e(t) {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("getDataConsumerRemoteStats()"),
                                      this._dataConsumers.get(t))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._socketRequest(
                                        "getDataConsumerStats",
                                        { dataConsumerId: t }
                                      )
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return k.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getSendTransportLocalStats",
                    value:
                      ((R = (0, a.A)(
                        u().mark(function e() {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("getSendTransportLocalStats()"),
                                      this._sendTransport)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._sendTransport.getStats()
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return R.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getRecvTransportLocalStats",
                    value:
                      ((S = (0, a.A)(
                        u().mark(function e() {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("getRecvTransportLocalStats()"),
                                      this._recvTransport)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._recvTransport.getStats()
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return S.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getAudioLocalStats",
                    value:
                      ((w = (0, a.A)(
                        u().mark(function e() {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("getAudioLocalStats()"),
                                      this._micProducer)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._micProducer.getStats()
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return w.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getVideoLocalStats",
                    value:
                      ((b = (0, a.A)(
                        u().mark(function e() {
                          var t;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Dr.debug("getVideoLocalStats()"),
                                      (t =
                                        this._webcamProducer ||
                                        this._shareProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt("return", t.getStats());
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return b.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getConsumerLocalStats",
                    value:
                      ((y = (0, a.A)(
                        u().mark(function e(t) {
                          var r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if ((r = this._consumers.get(t))) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt("return", r.getStats());
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return y.apply(this, arguments);
                      }),
                  },
                  {
                    key: "applyNetworkThrottle",
                    value:
                      ((_ = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s, i;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.uplink),
                                      (n = t.downlink),
                                      (s = t.rtt),
                                      (i = t.secret),
                                      Dr.debug(
                                        "applyNetworkThrottle() [uplink:%s, downlink:%s, rtt:%s]",
                                        r,
                                        n,
                                        s
                                      ),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest(
                                        "applyNetworkThrottle",
                                        {
                                          uplink: r,
                                          downlink: n,
                                          rtt: s,
                                          secret: i,
                                        }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "applyNetworkThrottle() | failed:%o",
                                        e.t0
                                      ),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error applying network throttle: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return _.apply(this, arguments);
                      }),
                  },
                  {
                    key: "resetNetworkThrottle",
                    value:
                      ((v = (0, a.A)(
                        u().mark(function e(t) {
                          var r, n, s;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.silent),
                                      (n = void 0 !== r && r),
                                      (s = t.secret),
                                      Dr.debug("resetNetworkThrottle()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest(
                                        "resetNetworkThrottle",
                                        { secret: s }
                                      )
                                    );
                                  case 5:
                                    e.next = 10;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      n ||
                                        (Dr.error(
                                          "resetNetworkThrottle() | failed:%o",
                                          e.t0
                                        ),
                                        kr.dispatch(
                                          Pt({
                                            type: "error",
                                            text: "Error resetting network throttle: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ));
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return v.apply(this, arguments);
                      }),
                  },
                  {
                    key: "createProducerTransport",
                    value:
                      ((g = (0, a.A)(
                        u().mark(function e(t, r) {
                          var n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h = this;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    (i = t.id),
                                      (o = t.iceParameters),
                                      (c = t.iceCandidates),
                                      (d = t.dtlsParameters),
                                      (l = t.sctpParameters),
                                      (p =
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName:
                                                "Creating Send Transport",
                                              span: r || null,
                                            })),
                                      (this._sendTransport =
                                        this._mediasoupDevice.createSendTransport(
                                          {
                                            id: i,
                                            iceParameters: o,
                                            iceCandidates: c,
                                            dtlsParameters: d,
                                            sctpParameters: l,
                                            iceServers: this._iceServers,
                                          }
                                        )),
                                      this._sendTransport.on(
                                        "connect",
                                        function (e, t, r) {
                                          var n,
                                            s = e.dtlsParameters;
                                          null === (n = h._openTelemetry) ||
                                            void 0 === n ||
                                            n.traceAutoComplete({
                                              spanName:
                                                "this._sendTransport `connect` Event : Transport is about to establish the ICE+DTLS connection",
                                              span: p,
                                              status: 1,
                                            }),
                                            h
                                              ._socketRequest(
                                                "connectWebRtcTransport",
                                                {
                                                  transportId:
                                                    h._sendTransport.id,
                                                  dtlsParameters: s,
                                                }
                                              )
                                              .then(function () {
                                                t();
                                              })
                                              .catch(function (e) {
                                                r(e);
                                              });
                                        }
                                      ),
                                      this._sendTransport.on(
                                        "produce",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r, n) {
                                              var s, i, a, o, c, d, l;
                                              return u().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        return (
                                                          (s = t.kind),
                                                          (i = t.rtpParameters),
                                                          (a = t.appData),
                                                          (e.prev = 1),
                                                          null ===
                                                            (o =
                                                              h._openTelemetry) ||
                                                            void 0 === o ||
                                                            o.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "this._sendTransport `produce` Event : Transmit information about a new producer ",
                                                                span: p,
                                                                status: 1,
                                                              }
                                                            ),
                                                          (e.next = 5),
                                                          h._socketRequest(
                                                            "produce",
                                                            {
                                                              transportId:
                                                                h._sendTransport
                                                                  .id,
                                                              kind: s,
                                                              rtpParameters: i,
                                                              appData: a,
                                                            }
                                                          )
                                                        );
                                                      case 5:
                                                        (c = e.sent),
                                                          (d = c.id),
                                                          r({ id: d }),
                                                          (e.next = 14);
                                                        break;
                                                      case 10:
                                                        (e.prev = 10),
                                                          (e.t0 = e.catch(1)),
                                                          null ===
                                                            (l =
                                                              h._videosdkLogs) ||
                                                            void 0 === l ||
                                                            l.pushLogs({
                                                              logText:
                                                                'Error this._sendTransport "produce" Event catch',
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t0.message,
                                                              },
                                                            }),
                                                          n(e.t0);
                                                      case 14:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [[1, 10]]
                                              );
                                            })
                                          );
                                          return function (t, r, n) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._sendTransport.on(
                                        "producedata",
                                        (function () {
                                          var e = (0, a.A)(
                                            u().mark(function e(t, r, n) {
                                              var s, i, a, o, c, d, l;
                                              return u().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        return (
                                                          (s =
                                                            t.sctpStreamParameters),
                                                          (i = t.label),
                                                          (a = t.protocol),
                                                          (o = t.appData),
                                                          (e.prev = 1),
                                                          (e.next = 4),
                                                          h._socketRequest(
                                                            "produceData",
                                                            {
                                                              transportId:
                                                                h._sendTransport
                                                                  .id,
                                                              sctpStreamParameters:
                                                                s,
                                                              label: i,
                                                              protocol: a,
                                                              appData: o,
                                                            }
                                                          )
                                                        );
                                                      case 4:
                                                        (c = e.sent),
                                                          (d = c.id),
                                                          r({ id: d }),
                                                          (e.next = 13);
                                                        break;
                                                      case 9:
                                                        (e.prev = 9),
                                                          (e.t0 = e.catch(1)),
                                                          null ===
                                                            (l =
                                                              h._videosdkLogs) ||
                                                            void 0 === l ||
                                                            l.pushLogs({
                                                              logText:
                                                                "Error producedata event catch",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t0.message,
                                                              },
                                                            }),
                                                          n(e.t0);
                                                      case 13:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [[1, 9]]
                                              );
                                            })
                                          );
                                          return function (t, r, n) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._sendTransport.on(
                                        "connectionstatechange",
                                        function (e) {
                                          var t, r;
                                          "connected" === e &&
                                            h.emitMeetingStateChange(Mt),
                                            null === (t = h._openTelemetry) ||
                                              void 0 === t ||
                                              t.traceAutoComplete({
                                                spanName:
                                                  "_sendTransport Event connectionstatechange ".concat(
                                                    e
                                                  ),
                                                span: p,
                                                status: 1,
                                              }),
                                            "failed" === e &&
                                              (null === (r = h._videosdkLogs) ||
                                                void 0 === r ||
                                                r.pushLogs({
                                                  logText:
                                                    "ERROR_MEETING_MEDIA_CONNECTION_FAILED",
                                                  logType: "ERROR",
                                                  attributes: {
                                                    error:
                                                      "Unable to connect to the meeting or media. Please check your network connection, ensure your firewall or security settings are not blocking the application, or try connecting using a different network.",
                                                  },
                                                  dashboardLog: !0,
                                                }),
                                              h.restartIce()),
                                            (h._transportState = e);
                                        }
                                      ),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: p,
                                          status: 1,
                                          message:
                                            "Send Transport Created Successfully",
                                        });
                                  case 8:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t) {
                        return g.apply(this, arguments);
                      }),
                  },
                  {
                    key: "createConsumerTransport",
                    value:
                      ((f = (0, a.A)(
                        u().mark(function e(t, r) {
                          var n,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f = this;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    (a = t.id),
                                      (o = t.iceParameters),
                                      (c = t.iceCandidates),
                                      (d = t.dtlsParameters),
                                      (l = t.sctpParameters),
                                      (p =
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName:
                                                "Creating Recieve Transport",
                                              span: r || null,
                                            })),
                                      (this._recvTransport =
                                        this._mediasoupDevice.createRecvTransport(
                                          {
                                            id: a,
                                            iceParameters: o,
                                            iceCandidates: c,
                                            dtlsParameters: d,
                                            sctpParameters: l,
                                            iceServers: this._iceServers,
                                          }
                                        )),
                                      this._recvTransport.on(
                                        "connect",
                                        function (e, t, r) {
                                          var n,
                                            s = e.dtlsParameters;
                                          null === (n = f._openTelemetry) ||
                                            void 0 === n ||
                                            n.traceAutoComplete({
                                              spanName:
                                                "this._recvTransport `connect` Event : Recieve Transport is about to establish the ICE+DTLS connection",
                                              span: p,
                                              status: 1,
                                            }),
                                            f
                                              ._socketRequest(
                                                "connectWebRtcTransport",
                                                {
                                                  transportId:
                                                    f._recvTransport.id,
                                                  dtlsParameters: s,
                                                }
                                              )
                                              .then(function () {
                                                t();
                                              })
                                              .catch(function (e) {
                                                r(e);
                                              });
                                        }
                                      ),
                                      this._recvTransport.on(
                                        "connectionstatechange",
                                        function (e) {
                                          var t;
                                          null === (t = f._openTelemetry) ||
                                            void 0 === t ||
                                            t.traceAutoComplete({
                                              spanName:
                                                "_recvTransport Event connectionstatechange ".concat(
                                                  e
                                                ),
                                              span: p,
                                              status: 1,
                                            }),
                                            "failed" === e && f.restartIce(),
                                            (f._transportState = e);
                                        }
                                      ),
                                      (h = 0),
                                      ((m = this._metrics.addNewProbe(
                                        this._recvTransport,
                                        "transport"
                                      )).onStatsCollected = function (e) {
                                        try {
                                          var t = function (e, t, r) {
                                              f._stats.consumerStats ||
                                                (f._stats.consumerStats = {});
                                              var n = t.appData.peerId;
                                              f._stats.consumerStats[n] ||
                                                (f._stats.consumerStats[n] =
                                                  {}),
                                                f._stats.consumerStats[n][r] ||
                                                  (f._stats.consumerStats[n][
                                                    r
                                                  ] = []),
                                                (f._latestStats[
                                                  t.track.id.replace(
                                                    /[{}]/g,
                                                    ""
                                                  )
                                                ] = [e]),
                                                h % 5 == 0 &&
                                                  f._stats.consumerStats[n][
                                                    r
                                                  ].push(e);
                                            },
                                            r = function (r) {
                                              e[r].forEach(function (e) {
                                                var r,
                                                  n = wr(f._consumers);
                                                try {
                                                  for (
                                                    n.s();
                                                    !(r = n.n()).done;

                                                  ) {
                                                    var i = (0, s.A)(
                                                        r.value,
                                                        2
                                                      ),
                                                      a = (i[0], i[1]);
                                                    if (
                                                      a.track.id.replace(
                                                        /[{}]/g,
                                                        ""
                                                      ) === e.trackId
                                                    ) {
                                                      var o = a.appData.share
                                                        ? "audio" === a.kind
                                                          ? "shareAudio"
                                                          : "share"
                                                        : a.kind;
                                                      t(e, a, o);
                                                    }
                                                  }
                                                } catch (e) {
                                                  n.e(e);
                                                } finally {
                                                  n.f();
                                                }
                                              });
                                            };
                                          r("audio"), r("video"), h++;
                                        } catch (e) {
                                          var n;
                                          null === (n = f._videosdkLogs) ||
                                            void 0 === n ||
                                            n.pushLogs({
                                              logText:
                                                "Error CONSUMER Stats ERROR",
                                              logType: "ERROR",
                                              attributes: { error: e.message },
                                            }),
                                            console.log("CONSUMER CATCH", e);
                                        }
                                      }),
                                      m.start(),
                                      this._recvTransport.observer.on(
                                        "close",
                                        function () {
                                          m.stop(),
                                            f._metrics.removeExistingProbe(m);
                                        }
                                      ),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: p,
                                          status: 1,
                                          message:
                                            "Recieve Transport Created Successfully",
                                        });
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t) {
                        return f.apply(this, arguments);
                      }),
                  },
                  {
                    key: "emitMeetingStateChange",
                    value: function (e) {
                      this._eventEmitter.emit("MEETING_STATE_CHANGED", {
                        state: e,
                      }),
                        (this._meetingConnectionState = e);
                    },
                  },
                  {
                    key: "joinRoom",
                    value:
                      ((m = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r,
                            n,
                            s,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g,
                            v,
                            _,
                            y,
                            b,
                            w,
                            S,
                            R,
                            k,
                            E,
                            C,
                            T,
                            P;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Dr.debug("joinRoom()"),
                                      (e.prev = 1),
                                      (o =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "Loading Router Capabilities",
                                              span: this._joinSpan,
                                            })),
                                      (this._mediasoupDevice = new Me.Device({
                                        handlerName: this._handlerName,
                                      })),
                                      (e.next = 6),
                                      this._socketRequest(
                                        "getRouterRtpCapabilities"
                                      )
                                    );
                                  case 6:
                                    return (
                                      (c = e.sent),
                                      "react-native" != this._deviceInfo.sdkType
                                        ? navigator.userAgent.indexOf(
                                            "Firefox"
                                          ) &&
                                          (c.headerExtensions =
                                            null === (d = c.headerExtensions) ||
                                            void 0 === d
                                              ? void 0
                                              : d.filter(function (e) {
                                                  return (
                                                    "urn:3gpp:video-orientation" !=
                                                    e.uri
                                                  );
                                                }))
                                        : (c.headerExtensions =
                                            null === (l = c.headerExtensions) ||
                                            void 0 === l
                                              ? void 0
                                              : l.filter(function (e) {
                                                  return (
                                                    "urn:3gpp:video-orientation" !=
                                                    e.uri
                                                  );
                                                })),
                                      (e.next = 10),
                                      this._mediasoupDevice.load({
                                        routerRtpCapabilities: c,
                                      })
                                    );
                                  case 10:
                                    if (
                                      (null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: o,
                                          status: 1,
                                          attributes: {
                                            routerRtpCapabilities:
                                              JSON.stringify(c).toString(),
                                          },
                                          message: "Router Capabilities Loaded",
                                        }),
                                      !this._produce)
                                    ) {
                                      e.next = 16;
                                      break;
                                    }
                                    return (
                                      (e.next = 14),
                                      this._socketRequest(
                                        "createWebRtcTransport",
                                        {
                                          preferredProtocol:
                                            this._preferredProtocol,
                                          producing: !0,
                                          consuming: !1,
                                          sctpCapabilities: this._useDataChannel
                                            ? this._mediasoupDevice
                                                .sctpCapabilities
                                            : void 0,
                                        }
                                      )
                                    );
                                  case 14:
                                    (p = e.sent),
                                      this.createProducerTransport(
                                        p,
                                        this._joinSpan
                                      );
                                  case 16:
                                    if (!this._consume) {
                                      e.next = 21;
                                      break;
                                    }
                                    return (
                                      (e.next = 19),
                                      this._socketRequest(
                                        "createWebRtcTransport",
                                        {
                                          preferredProtocol:
                                            this._preferredProtocol,
                                          producing: !1,
                                          consuming: !0,
                                          sctpCapabilities: this._useDataChannel
                                            ? this._mediasoupDevice
                                                .sctpCapabilities
                                            : void 0,
                                        }
                                      )
                                    );
                                  case 19:
                                    (h = e.sent),
                                      this.createConsumerTransport(
                                        h,
                                        this._joinSpan
                                      );
                                  case 21:
                                    return (
                                      (e.next = 23),
                                      this._socketRequest("join", {
                                        displayName: this._displayName,
                                        device: this._device,
                                        secret: this._secret,
                                        rtpCapabilities:
                                          null ===
                                            (n = this._mediasoupDevice) ||
                                          void 0 === n
                                            ? void 0
                                            : n.rtpCapabilities,
                                        sctpCapabilities:
                                          null ===
                                            (s = this._mediasoupDevice) ||
                                          void 0 === s
                                            ? void 0
                                            : s.sctpCapabilities,
                                        deviceInfo: this._deviceInfo,
                                        debugMode: this._debugMode,
                                        autoConsume: this._autoConsume,
                                        metaData: this._metaData,
                                      })
                                    );
                                  case 23:
                                    (m = e.sent),
                                      (f = m.peers),
                                      (g = m.poll),
                                      (v = m.messages),
                                      kr.dispatch(Ze("connected")),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.traceAutoComplete({
                                          spanName:
                                            "Emitted `MEETING_JOINED` Event",
                                          span: this._joinSpan,
                                          status: 1,
                                        }),
                                      this._eventEmitter.emit(
                                        "MEETING_JOINED",
                                        {
                                          peers: f,
                                          poll: g,
                                          messages: v,
                                          baseUrl: this._baseUrl,
                                        }
                                      ),
                                      kr.dispatch({
                                        type: "REMOVE_ALL_NOTIFICATIONS",
                                      }),
                                      kr.dispatch(
                                        Pt({
                                          text: "You are in the room!",
                                          timeout: 3e3,
                                        })
                                      ),
                                      (_ = wr(f));
                                    try {
                                      for (_.s(); !(y = _.n()).done; )
                                        (b = y.value),
                                          (w = ft(
                                            br(
                                              br({}, b),
                                              {},
                                              {
                                                consumers: [],
                                                dataConsumers: [],
                                              }
                                            )
                                          )),
                                          kr.dispatch(w),
                                          this._eventEmitter.emit(
                                            w.type,
                                            w.payload
                                          );
                                    } catch (e) {
                                      _.e(e);
                                    } finally {
                                      _.f();
                                    }
                                    this._produce &&
                                      (kr.dispatch(
                                        rt({
                                          canSendMic:
                                            this._mediasoupDevice.canProduce(
                                              "audio"
                                            ),
                                          canSendWebcam:
                                            this._mediasoupDevice.canProduce(
                                              "video"
                                            ),
                                        })
                                      ),
                                      this._micEnabled
                                        ? this.enableMic(
                                            this.customMicrophoneAudioTrack,
                                            this._joinSpan
                                          )
                                        : this.customMicrophoneAudioTrack &&
                                          (null === (S = this._openTelemetry) ||
                                            void 0 === S ||
                                            S.traceAutoComplete({
                                              spanName: "Disposing Audio Track",
                                              span: this._joinSpan,
                                              status: 2,
                                            }),
                                          this.customMicrophoneAudioTrack
                                            .getTracks()
                                            .forEach(function (e) {
                                              e.stop();
                                            })),
                                      (R = Qe()),
                                      this._webcamEnabled &&
                                      (!R ||
                                        R.webcamEnabled ||
                                        this._externalVideo)
                                        ? this.enableWebcam(
                                            this.customCameraVideoTrack,
                                            this._joinSpan
                                          )
                                        : this.customCameraVideoTrack &&
                                          (null === (k = this._openTelemetry) ||
                                            void 0 === k ||
                                            k.traceAutoComplete({
                                              spanName: "Disposing Video Track",
                                              span: this._joinSpan,
                                              status: 2,
                                            }),
                                          this.customCameraVideoTrack
                                            .getTracks()
                                            .forEach(function (e) {
                                              e.stop();
                                            }))),
                                      window.SHOW_INFO &&
                                        ((E = kr.getState()),
                                        (C = E.me),
                                        kr.dispatch(tt(C.id))),
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          span: this._joinSpan,
                                          status: 1,
                                          message: "Room Joined",
                                        }),
                                      (e.next = 46);
                                    break;
                                  case 39:
                                    (e.prev = 39),
                                      (e.t0 = e.catch(1)),
                                      Dr.error("joinRoom() failed:%o", e.t0),
                                      null === (T = this._videosdkLogs) ||
                                        void 0 === T ||
                                        T.pushLogs({
                                          logText:
                                            "Error Could not join the room",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (P = this._openTelemetry) ||
                                        void 0 === P ||
                                        P.completeSpan({
                                          span: this._joinSpan,
                                          status: 2,
                                          message:
                                            "Could not join the room ".concat(
                                              e.t0
                                            ),
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Could not join the room: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      this.close({ sendLeft: !0 });
                                  case 46:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 39]]
                          );
                        })
                      )),
                      function () {
                        return m.apply(this, arguments);
                      }),
                  },
                  {
                    key: "switchingRoom",
                    value:
                      ((h = (0, a.A)(
                        u().mark(function e(t) {
                          var r,
                            n,
                            s,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g,
                            v,
                            _,
                            y,
                            b;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (n =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              name: "switchingRoom() start",
                                              attributes: {
                                                "room.id": t,
                                                "peer.id": this._peerId,
                                                display_name: this._displayName,
                                              },
                                            })),
                                      (e.prev = 1),
                                      (d =
                                        null === (s = this._openTelemetry) ||
                                        void 0 === s
                                          ? void 0
                                          : s.trace({
                                              name: "switch room join request",
                                              parentSpan: n,
                                            })),
                                      (e.next = 5),
                                      this._protoo.request("join", {
                                        displayName: this._displayName,
                                        device: this._device,
                                        secret: this._secret,
                                        rtpCapabilities:
                                          null ===
                                            (i = this._mediasoupDevice) ||
                                          void 0 === i
                                            ? void 0
                                            : i.rtpCapabilities,
                                        sctpCapabilities:
                                          null ===
                                            (a = this._mediasoupDevice) ||
                                          void 0 === a
                                            ? void 0
                                            : a.sctpCapabilities,
                                        deviceInfo: this._deviceInfo,
                                        debugMode: this._debugMode,
                                        autoConsume: this._autoConsume,
                                        metaData: this._metaData,
                                        switchingRoom: !0,
                                      })
                                    );
                                  case 5:
                                    (l = e.sent),
                                      (p = l.peers),
                                      (h = l.poll),
                                      (m = l.messages),
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.completeSpan({
                                          span: d,
                                          status: 1,
                                          message:
                                            "Join request successful in switched room",
                                        }),
                                      kr.dispatch(Ze("connected")),
                                      this._eventEmitter.emit(
                                        "MEETING_JOINED",
                                        {
                                          switchRoomId: t,
                                          peers: p,
                                          poll: h,
                                          messages: m,
                                          baseUrl: this._baseUrl,
                                        }
                                      ),
                                      kr.dispatch({
                                        type: "REMOVE_ALL_NOTIFICATIONS",
                                      }),
                                      kr.dispatch(
                                        Pt({
                                          text: "You are in the room!",
                                          timeout: 3e3,
                                        })
                                      ),
                                      (f = wr(p));
                                    try {
                                      for (f.s(); !(g = f.n()).done; )
                                        (v = g.value),
                                          (_ = ft(
                                            br(
                                              br({}, v),
                                              {},
                                              {
                                                consumers: [],
                                                dataConsumers: [],
                                              }
                                            )
                                          )),
                                          kr.dispatch(_),
                                          this._eventEmitter.emit(
                                            _.type,
                                            _.payload
                                          );
                                    } catch (e) {
                                      f.e(e);
                                    } finally {
                                      f.f();
                                    }
                                    null === (c = this._openTelemetry) ||
                                      void 0 === c ||
                                      c.completeSpan({
                                        span: n,
                                        status: 1,
                                        message:
                                          "Room switch completed successfully",
                                      }),
                                      (e.next = 26);
                                    break;
                                  case 19:
                                    (e.prev = 19),
                                      (e.t0 = e.catch(1)),
                                      Dr.error("joinRoom() failed:%o", e.t0),
                                      null === (y = this._videosdkLogs) ||
                                        void 0 === y ||
                                        y.pushLogs({
                                          logText:
                                            "Error Could not join the switched room",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (b = this._openTelemetry) ||
                                        void 0 === b ||
                                        b.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Room switch failed: ".concat(
                                              e.t0.message
                                            ),
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Could not join the switched room: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      this.close({ sendLeft: !0 });
                                  case 26:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 19]]
                          );
                        })
                      )),
                      function (e) {
                        return h.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_updateMics",
                    value:
                      ((p = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r,
                            n,
                            s,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g,
                            v = arguments;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r =
                                        v.length > 0 && void 0 !== v[0]
                                          ? v[0]
                                          : void 0),
                                      (this._mics = new Map()),
                                      Dr.debug("_updateMics() |"),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "_updateMics() Calling for Getting System Mic list",
                                              span: r || null,
                                            })),
                                      (e.prev = 4),
                                      (e.next = 7),
                                      navigator.mediaDevices.enumerateDevices()
                                    );
                                  case 7:
                                    (a = e.sent),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.traceAutoComplete({
                                          spanName: "Getting System Mic list",
                                          span: n,
                                          status: 1,
                                          attributes: {
                                            systemDevice: a
                                              ? JSON.stringify(a)
                                              : "Device not found",
                                          },
                                        }),
                                      (o = wr(a));
                                    try {
                                      for (o.s(); !(c = o.n()).done; )
                                        "audioinput" == (d = c.value).kind &&
                                          this._mics.set(d.deviceId, d);
                                    } catch (e) {
                                      o.e(e);
                                    } finally {
                                      o.f();
                                    }
                                    (l = Array.from(this._mics.values())),
                                      (p = l.length),
                                      (h = this._mic.device
                                        ? this._mic.device.deviceId
                                        : void 0),
                                      0 === p
                                        ? (this._mic.device = null)
                                        : this._mics.has(h) ||
                                          (this._mic.device = l[0]),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "Update Mic",
                                        }),
                                      (e.next = 30);
                                    break;
                                  case 18:
                                    if (
                                      ((e.prev = 18),
                                      (e.t0 = e.catch(4)),
                                      !(e.t0 instanceof TypeError))
                                    ) {
                                      e.next = 30;
                                      break;
                                    }
                                    if ("TypeError" !== e.t0.name) {
                                      e.next = 28;
                                      break;
                                    }
                                    throw (
                                      ((f =
                                        It.q
                                          .ERROR_MICROPHONE_ACCESS_UNAVAILABLE),
                                      this._emitError(f),
                                      null === (m = this._openTelemetry) ||
                                        void 0 === m ||
                                        m.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error in updateMics() :: ".concat(
                                              f.message
                                            ),
                                        }),
                                      new Error(f.message))
                                    );
                                  case 28:
                                    throw (
                                      (null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error in updateMics() :: ".concat(
                                              e.t0.message
                                            ),
                                        }),
                                      new Error(e.t0.message))
                                    );
                                  case 30:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 18]]
                          );
                        })
                      )),
                      function () {
                        return p.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_updateWebcams",
                    value:
                      ((l = (0, a.A)(
                        u().mark(function e() {
                          var t,
                            r,
                            n,
                            s,
                            i,
                            a,
                            o,
                            c,
                            d,
                            l,
                            p,
                            h,
                            m,
                            f,
                            g,
                            v = arguments;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r =
                                        v.length > 0 && void 0 !== v[0]
                                          ? v[0]
                                          : void 0),
                                      Dr.debug("_updateWebcams()"),
                                      (this._webcams = new Map()),
                                      Dr.debug(
                                        "_updateWebcams() | calling enumerateDevices()"
                                      ),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "_updateWebcams() Calling for Getting System Webcam list",
                                              span: r || null,
                                            })),
                                      (e.prev = 5),
                                      (e.next = 8),
                                      navigator.mediaDevices.enumerateDevices()
                                    );
                                  case 8:
                                    (a = e.sent),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.traceAutoComplete({
                                          spanName:
                                            "Getting System Webcam list",
                                          span: n,
                                          status: 1,
                                          attributes: {
                                            systemDevice: a
                                              ? JSON.stringify(a)
                                              : "Device not found",
                                          },
                                        }),
                                      (o = wr(a)),
                                      (e.prev = 11),
                                      o.s();
                                  case 13:
                                    if ((c = o.n()).done) {
                                      e.next = 20;
                                      break;
                                    }
                                    if ("videoinput" === (d = c.value).kind) {
                                      e.next = 17;
                                      break;
                                    }
                                    return e.abrupt("continue", 18);
                                  case 17:
                                    this._webcams.set(d.deviceId, d);
                                  case 18:
                                    e.next = 13;
                                    break;
                                  case 20:
                                    e.next = 25;
                                    break;
                                  case 22:
                                    (e.prev = 22),
                                      (e.t0 = e.catch(11)),
                                      o.e(e.t0);
                                  case 25:
                                    return (e.prev = 25), o.f(), e.finish(25);
                                  case 28:
                                    (l = Array.from(this._webcams.values())),
                                      (p = l.length),
                                      (h = this._webcam.device
                                        ? this._webcam.device.deviceId
                                        : void 0) &&
                                        (this._defaultCameraIndex = h),
                                      Dr.debug(
                                        "_updateWebcams() [webcams:%o]",
                                        l
                                      ),
                                      0 === p
                                        ? (this._webcam.device = null)
                                        : this._webcams.has(h) ||
                                          (this._webcam.device =
                                            l[this._defaultCameraIndex]),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "Update Webcam",
                                        }),
                                      kr.dispatch({
                                        type: "SET_CAN_CHANGE_WEBCAM",
                                        payload: this._webcams.size > 1,
                                      }),
                                      (e.next = 50);
                                    break;
                                  case 38:
                                    if (
                                      ((e.prev = 38),
                                      (e.t1 = e.catch(5)),
                                      !(e.t1 instanceof TypeError))
                                    ) {
                                      e.next = 50;
                                      break;
                                    }
                                    if ("TypeError" !== e.t1.name) {
                                      e.next = 48;
                                      break;
                                    }
                                    throw (
                                      ((f =
                                        It.q.ERROR_CAMERA_ACCESS_UNAVAILABLE),
                                      this._emitError(f),
                                      null === (m = this._openTelemetry) ||
                                        void 0 === m ||
                                        m.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error in updateWebcams() :: ".concat(
                                              f.message
                                            ),
                                        }),
                                      new Error(f.message))
                                    );
                                  case 48:
                                    throw (
                                      (null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error in updateWebcams() :: ".concat(
                                              e.t1.message
                                            ),
                                        }),
                                      new Error(e.t1.message))
                                    );
                                  case 50:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [5, 38],
                              [11, 22, 25, 28],
                            ]
                          );
                        })
                      )),
                      function () {
                        return l.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_getWebcamType",
                    value: function (e) {
                      return /(back|rear)/i.test(e.label)
                        ? (Dr.debug(
                            "_getWebcamType() | it seems to be a back camera"
                          ),
                          "back")
                        : (Dr.debug(
                            "_getWebcamType() | it seems to be a front camera"
                          ),
                          "front");
                    },
                  },
                  {
                    key: "_pauseConsumer",
                    value:
                      ((n = (0, a.A)(
                        u().mark(function e(t) {
                          var r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!t.paused) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("pauseConsumer", {
                                        consumerId: t.id,
                                      })
                                    );
                                  case 5:
                                    t.pause(),
                                      kr.dispatch(bt(t.id, "local")),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "_pauseConsumer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: "Error pausing Consumer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error pausing Consumer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return n.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_resumeConsumer",
                    value:
                      ((r = (0, a.A)(
                        u().mark(function e(t) {
                          var r;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (t.paused) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._socketRequest("resumeConsumer", {
                                        consumerId: t.id,
                                      })
                                    );
                                  case 5:
                                    t.resume(),
                                      kr.dispatch(wt(t.id, "local")),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(2)),
                                      Dr.error(
                                        "_resumeConsumer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: "Error resuming Consumer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Error resuming Consumer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return r.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_getExternalVideoStream",
                    value:
                      ((t = (0, a.A)(
                        u().mark(function e() {
                          var t = this;
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._externalVideoStream) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt(
                                      "return",
                                      this._externalVideoStream
                                    );
                                  case 2:
                                    if (!(this._externalVideo.readyState < 3)) {
                                      e.next = 5;
                                      break;
                                    }
                                    return (
                                      (e.next = 5),
                                      new Promise(function (e) {
                                        return t._externalVideo.addEventListener(
                                          "canplay",
                                          e
                                        );
                                      })
                                    );
                                  case 5:
                                    if (!this._externalVideo.captureStream) {
                                      e.next = 9;
                                      break;
                                    }
                                    (this._externalVideoStream =
                                      this._externalVideo.captureStream()),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    if (!this._externalVideo.mozCaptureStream) {
                                      e.next = 13;
                                      break;
                                    }
                                    (this._externalVideoStream =
                                      this._externalVideo.mozCaptureStream()),
                                      (e.next = 14);
                                    break;
                                  case 13:
                                    throw new Error(
                                      "video.captureStream() not supported"
                                    );
                                  case 14:
                                    return e.abrupt(
                                      "return",
                                      this._externalVideoStream
                                    );
                                  case 15:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "toggleE2EEEnabled",
                    value:
                      ((e = (0, a.A)(
                        u().mark(function e(t) {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this.e2eeManager) {
                                      e.next = 5;
                                      break;
                                    }
                                    this._peerId &&
                                      this.e2eeManager.setParticipantCryptorEnabled(
                                        t,
                                        this._peerId
                                      ),
                                      (this.isE2EEEnabled = t),
                                      (e.next = 6);
                                    break;
                                  case 5:
                                    throw Error(
                                      "e2ee not configured, please set e2ee settings within the room options"
                                    );
                                  case 6:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (t) {
                        return e.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_emitError",
                    value: function (e) {
                      this._eventEmitter.emit("ERROR", e);
                    },
                  },
                ],
                [
                  {
                    key: "init",
                    value: function (e) {
                      kr = e.store;
                    },
                  },
                ]
              );
              var e,
                t,
                r,
                n,
                l,
                p,
                h,
                m,
                f,
                g,
                v,
                _,
                y,
                b,
                w,
                S,
                R,
                k,
                E,
                C,
                T,
                P,
                O,
                x,
                D,
                I,
                A,
                M,
                L,
                N,
                j,
                B,
                F,
                U,
                W,
                q,
                V,
                H,
                z,
                G,
                K,
                $,
                J,
                Q,
                Y,
                X,
                Z,
                ee,
                te,
                re,
                ne,
                se,
                ie,
                ae,
                oe,
                ce,
                de,
                le,
                ue,
                pe,
                he,
                me,
                fe,
                ge,
                ve,
                _e,
                ye,
                be,
                we,
                Se,
                Re,
                ke,
                Ee,
                Ce,
                Te,
                Pe,
                Oe,
                xe,
                De,
                Ie,
                Le,
                Ne,
                je,
                Be,
                Fe,
                Ue,
                We,
                Ve,
                He,
                ze,
                Ge,
                Ke,
                $e,
                Ye,
                Xe,
                Ut,
                Wt,
                qt,
                Vt,
                Ht,
                zt,
                Kt,
                $t,
                Yt,
                Xt,
                Zt,
                er,
                tr,
                rr,
                nr,
                sr;
            })();
          function Mr(e) {
            return Lr.apply(this, arguments);
          }
          function Lr() {
            return (Lr = (0, a.A)(
              u().mark(function e(t) {
                var r,
                  n = this;
                return u().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (((e.prev = 0), this.e2eeManager)) {
                            e.next = 13;
                            break;
                          }
                          return (e.t0 = fr), (e.t1 = t), (e.next = 6), gr();
                        case 6:
                          (e.t2 = e.sent),
                            (e.t3 = { keyProvider: e.t1, worker: e.t2 }),
                            (this.e2eeManager = new e.t0(e.t3)),
                            this.e2eeManager.on(
                              dr.KS.ParticipantEncryptionStatusChanged,
                              function (e) {
                                n.isE2EEEnabled = e;
                              }
                            ),
                            this.e2eeManager.on(
                              dr.KS.E2EEStateChange,
                              function (e) {
                                n._eventEmitter.emit("E2EE_STATE_CHANGE", e);
                              }
                            ),
                            null === (r = this.e2eeManager) ||
                              void 0 === r ||
                              r.setup(this),
                            this.toggleE2EEEnabled(!0);
                        case 13:
                          e.next = 19;
                          break;
                        case 15:
                          throw (
                            ((e.prev = 15),
                            (e.t4 = e.catch(0)),
                            console.error("Error setting up E2EE: ", e.t4),
                            new Error("Error setting up E2EE: " + e.t4.message))
                          );
                        case 19:
                        case "end":
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[0, 15]]
                );
              })
            )).apply(this, arguments);
          }
        },
        2010: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.EnhancedEventEmitter = void 0);
          const n = r(7007),
            s = new (r(2994).Logger)("EnhancedEventEmitter");
          class i extends n.EventEmitter {
            constructor() {
              super(), this.setMaxListeners(1 / 0);
            }
            emit(e, ...t) {
              return super.emit(e, ...t);
            }
            safeEmit(e, ...t) {
              const r = super.listenerCount(e);
              try {
                return super.emit(e, ...t);
              } catch (t) {
                return (
                  s.error(
                    "safeEmit() | event listener threw an error [eventName:%s]:%o",
                    e,
                    t
                  ),
                  Boolean(r)
                );
              }
            }
            on(e, t) {
              return super.on(e, t), this;
            }
            off(e, t) {
              return super.off(e, t), this;
            }
            addListener(e, t) {
              return super.on(e, t), this;
            }
            prependListener(e, t) {
              return super.prependListener(e, t), this;
            }
            once(e, t) {
              return super.once(e, t), this;
            }
            prependOnceListener(e, t) {
              return super.prependOnceListener(e, t), this;
            }
            removeListener(e, t) {
              return super.off(e, t), this;
            }
            removeAllListeners(e) {
              return super.removeAllListeners(e), this;
            }
            listenerCount(e) {
              return super.listenerCount(e);
            }
            listeners(e) {
              return super.listeners(e);
            }
            rawListeners(e) {
              return super.rawListeners(e);
            }
          }
          t.EnhancedEventEmitter = i;
        },
        2073: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(7165),
            (n.pad.AnsiX923 = {
              pad: function (e, t) {
                var r = e.sigBytes,
                  n = 4 * t,
                  s = n - (r % n),
                  i = r + s - 1;
                e.clamp(),
                  (e.words[i >>> 2] |= s << (24 - (i % 4) * 8)),
                  (e.sigBytes += s);
              },
              unpad: function (e) {
                var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                e.sigBytes -= t;
              },
            }),
            n.pad.Ansix923);
        },
        2107: (e, t, r) => {
          "use strict";
          r.d(t, { kR: () => s, nI: () => n, wZ: () => i });
          var n = {
            CONFERENCE: "CONFERENCE",
            VIEWER: "VIEWER",
            SEND_AND_RECV: "SEND_AND_RECV",
            SIGNALLING_ONLY: "SIGNALLING_ONLY",
            RECV_ONLY: "RECV_ONLY",
          };
          function s(e) {
            return e === n.CONFERENCE || e === n.SEND_AND_RECV;
          }
          function i(e) {
            return e === n.VIEWER || e === n.SIGNALLING_ONLY;
          }
        },
        2155: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(7165),
            (n.pad.ZeroPadding = {
              pad: function (e, t) {
                var r = 4 * t;
                e.clamp(), (e.sigBytes += r - (e.sigBytes % r || r));
              },
              unpad: function (e) {
                var t = e.words,
                  r = e.sigBytes - 1;
                for (r = e.sigBytes - 1; r >= 0; r--)
                  if ((t[r >>> 2] >>> (24 - (r % 4) * 8)) & 255) {
                    e.sigBytes = r + 1;
                    break;
                  }
              },
            }),
            n.pad.ZeroPadding);
        },
        2169: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(7165),
            (n.mode.CFB = (function () {
              var e = n.lib.BlockCipherMode.extend();
              function t(e, t, r, n) {
                var s,
                  i = this._iv;
                i
                  ? ((s = i.slice(0)), (this._iv = void 0))
                  : (s = this._prevBlock),
                  n.encryptBlock(s, 0);
                for (var a = 0; a < r; a++) e[t + a] ^= s[a];
              }
              return (
                (e.Encryptor = e.extend({
                  processBlock: function (e, r) {
                    var n = this._cipher,
                      s = n.blockSize;
                    t.call(this, e, r, s, n),
                      (this._prevBlock = e.slice(r, r + s));
                  },
                })),
                (e.Decryptor = e.extend({
                  processBlock: function (e, r) {
                    var n = this._cipher,
                      s = n.blockSize,
                      i = e.slice(r, r + s);
                    t.call(this, e, r, s, n), (this._prevBlock = i);
                  },
                })),
                e
              );
            })()),
            n.mode.CFB);
        },
        2183: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome111 = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = i(r(1765)),
            d = i(r(8046)),
            l = i(r(5544)),
            u = i(r(5938)),
            p = i(r(4256)),
            h = r(4893),
            m = r(521),
            f = r(1305),
            g = r(3303),
            v = new o.Logger("Chrome111"),
            _ = { OS: 1024, MIS: 1024 };
          class y extends m.HandlerInterface {
            static createFactory() {
              return () => new y();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome111";
            }
            close() {
              if ((v.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              v.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = a.parse(t.sdp),
                  n = l.extractRtpCapabilities({ sdpObject: r });
                return p.addNackSuppportForOpus(n), n;
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return v.debug("getNativeSctpCapabilities()"), { numStreams: _ };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              this.assertNotClosed(),
                v.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : (v.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ),
                    this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (this._pc.iceConnectionState) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    ));
            }
            async updateIceServers(e) {
              this.assertNotClosed(), v.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                v.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  v.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  v.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              if (
                (this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t && t.length > 1)
              ) {
                let e = 1;
                for (const r of t) {
                  const t = r.scalabilityMode
                    ? (0, g.parse)(r.scalabilityMode).temporalLayers
                    : 3;
                  t > e && (e = t);
                }
                t.forEach((t, r) => {
                  (t.rid = `r${r}`), (t.scalabilityMode = `L1T${e}`);
                });
              }
              const s = c.clone(this._sendingRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, n);
              const i = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                p = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                }),
                h = await this._pc.createOffer();
              let m = a.parse(h.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: m,
                })),
                v.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  h
                ),
                await this._pc.setLocalDescription(h);
              const f = p.mid;
              (s.mid = f), (m = a.parse(this._pc.localDescription.sdp));
              const _ = m.media[o.idx];
              if (((s.rtcp.cname = l.getCname({ offerMediaObject: _ })), t))
                if (1 === t.length) {
                  const e = u.getRtpEncodings({ offerMediaObject: _ });
                  Object.assign(e[0], t[0]), (s.encodings = e);
                } else s.encodings = t;
              else s.encodings = u.getRtpEncodings({ offerMediaObject: _ });
              this._remoteSdp.send({
                offerMediaObject: _,
                reuseMid: o.reuseMid,
                offerRtpParameters: s,
                answerRtpParameters: i,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                v.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ),
                await this._pc.setRemoteDescription(y),
                this._mapMidTransceiver.set(f, p),
                { localId: f, rtpParameters: s, rtpSender: p.sender }
              );
            }
            async stopSending(e) {
              if (
                (this.assertSendDirection(),
                v.debug("stopSending() [localId:%s]", e),
                this._closed)
              )
                return;
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              v.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              v.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if ((this._remoteSdp.resumeSendingMediaSection(e), !t))
                throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "sendonly";
              const r = await this._pc.createOffer();
              v.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? v.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : v.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              v.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              v.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              v.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % _.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  v.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: n,
                  rtpParameters: s,
                  streamId: i,
                } = t;
                v.debug("receive() [trackId:%s, kind:%s]", e, n);
                const a = s.mid || String(this._mapMidTransceiver.size);
                r.set(e, a),
                  this._remoteSdp.receive({
                    mid: a,
                    kind: n,
                    offerRtpParameters: s,
                    streamId: i || s.rtcp.cname,
                    trackId: e,
                  });
              }
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              let s = await this._pc.createAnswer();
              const i = a.parse(s.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: n } = t,
                  s = r.get(e),
                  a = i.media.find((e) => String(e.mid) === s);
                l.applyCodecParameters({
                  offerRtpParameters: n,
                  answerMediaObject: a,
                });
              }
              (s = { type: "answer", sdp: a.write(i) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: i,
                  })),
                v.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s);
              for (const n of e) {
                const { trackId: e } = n,
                  s = r.get(e),
                  i = this._pc.getTransceivers().find((e) => e.mid === s);
                if (!i) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(s, i),
                  t.push({
                    localId: s,
                    track: i.receiver.track,
                    rtpReceiver: i.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                v.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                v.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                v.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              v.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                v.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new h.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome111 = y;
        },
        2211: (e) => {
          "use strict";
          e.exports = function (e) {
            var t,
              r,
              n = "",
              s = (e = (function (e) {
                return (
                  e || (e = {}),
                  {
                    length: e.length || 8,
                    numeric: "boolean" != typeof e.numeric || e.numeric,
                    letters: "boolean" != typeof e.letters || e.letters,
                    special: "boolean" == typeof e.special && e.special,
                    exclude: Array.isArray(e.exclude) ? e.exclude : [],
                  }
                );
              })(e)).length,
              i =
                (e.exclude,
                (function (e) {
                  var t = "";
                  e.numeric && (t += "0123456789"),
                    e.letters &&
                      (t +=
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"),
                    e.special && (t += "!$%^&*()_+|~-=`{}[]:;<>?,./");
                  for (var r = 0; r <= e.exclude.length; r++)
                    t = t.replace(e.exclude[r], "");
                  return t;
                })(e));
            for (t = 1; t <= s; t++)
              n += i.substring(
                (r = Math.floor(Math.random() * i.length)),
                r + 1
              );
            return n;
          };
        },
        2215: (e, t, r) => {
          var n, s;
          !(function (i) {
            if (
              (void 0 ===
                (s = "function" == typeof (n = i) ? n.call(t, r, t, e) : n) ||
                (e.exports = s),
              (e.exports = i()),
              !!0)
            ) {
              var a = window.Cookies,
                o = (window.Cookies = i());
              o.noConflict = function () {
                return (window.Cookies = a), o;
              };
            }
          })(function () {
            function e() {
              for (var e = 0, t = {}; e < arguments.length; e++) {
                var r = arguments[e];
                for (var n in r) t[n] = r[n];
              }
              return t;
            }
            function t(e) {
              return e.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
            }
            return (function r(n) {
              function s() {}
              function i(t, r, i) {
                if ("undefined" != typeof document) {
                  "number" ==
                    typeof (i = e({ path: "/" }, s.defaults, i)).expires &&
                    (i.expires = new Date(1 * new Date() + 864e5 * i.expires)),
                    (i.expires = i.expires ? i.expires.toUTCString() : "");
                  try {
                    var a = JSON.stringify(r);
                    /^[\{\[]/.test(a) && (r = a);
                  } catch (e) {}
                  (r = n.write
                    ? n.write(r, t)
                    : encodeURIComponent(String(r)).replace(
                        /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                        decodeURIComponent
                      )),
                    (t = encodeURIComponent(String(t))
                      .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
                      .replace(/[\(\)]/g, escape));
                  var o = "";
                  for (var c in i)
                    i[c] &&
                      ((o += "; " + c),
                      !0 !== i[c] && (o += "=" + i[c].split(";")[0]));
                  return (document.cookie = t + "=" + r + o);
                }
              }
              function a(e, r) {
                if ("undefined" != typeof document) {
                  for (
                    var s = {},
                      i = document.cookie ? document.cookie.split("; ") : [],
                      a = 0;
                    a < i.length;
                    a++
                  ) {
                    var o = i[a].split("="),
                      c = o.slice(1).join("=");
                    r || '"' !== c.charAt(0) || (c = c.slice(1, -1));
                    try {
                      var d = t(o[0]);
                      if (((c = (n.read || n)(c, d) || t(c)), r))
                        try {
                          c = JSON.parse(c);
                        } catch (e) {}
                      if (((s[d] = c), e === d)) break;
                    } catch (e) {}
                  }
                  return e ? s[e] : s;
                }
              }
              return (
                (s.set = i),
                (s.get = function (e) {
                  return a(e, !1);
                }),
                (s.getJSON = function (e) {
                  return a(e, !0);
                }),
                (s.remove = function (t, r) {
                  i(t, "", e(r, { expires: -1 }));
                }),
                (s.defaults = {}),
                (s.withConverter = r),
                s
              );
            })(function () {});
          });
        },
        2284: (e, t, r) => {
          "use strict";
          function n(e) {
            return (
              (n =
                "function" == typeof Symbol &&
                "symbol" == typeof Symbol.iterator
                  ? function (e) {
                      return typeof e;
                    }
                  : function (e) {
                      return e &&
                        "function" == typeof Symbol &&
                        e.constructor === Symbol &&
                        e !== Symbol.prototype
                        ? "symbol"
                        : typeof e;
                    }),
              n(e)
            );
          }
          r.d(t, { A: () => n });
        },
        2292: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Firefox120 = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = r(4893),
            d = i(r(1765)),
            l = i(r(8046)),
            u = i(r(5544)),
            p = i(r(5938)),
            h = r(521),
            m = r(1305),
            f = r(3303),
            g = new o.Logger("Firefox120"),
            v = { OS: 16, MIS: 2048 };
          class _ extends h.HandlerInterface {
            static createFactory() {
              return () => new _();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Firefox120";
            }
            close() {
              if ((g.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              g.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                }),
                t = document.createElement("canvas");
              t.getContext("2d");
              const r = t.captureStream().getVideoTracks()[0];
              try {
                e.addTransceiver("audio", { direction: "sendrecv" }),
                  e.addTransceiver(r, {
                    direction: "sendrecv",
                    sendEncodings: [
                      { rid: "r0", maxBitrate: 1e5 },
                      { rid: "r1", maxBitrate: 5e5 },
                    ],
                  });
                const n = await e.createOffer();
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                const s = a.parse(n.sdp);
                return u.extractRtpCapabilities({ sdpObject: s });
              } catch (n) {
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                throw n;
              }
            }
            async getNativeSctpCapabilities() {
              return g.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              this.assertNotClosed(),
                g.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (g.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              throw (
                (this.assertNotClosed(),
                new c.UnsupportedError("not supported"))
              );
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                g.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  g.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  g.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  t.length > 1 &&
                  t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  });
              const s = d.clone(this._sendingRtpParametersByKind[e.kind]);
              s.codecs = l.reduceCodecs(s.codecs, n);
              const i = d.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              i.codecs = l.reduceCodecs(i.codecs, n);
              const o = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                }),
                c = await this._pc.createOffer();
              let h = a.parse(c.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h,
                }));
              const m = (0, f.parse)((t || [{}])[0].scalabilityMode);
              g.debug(
                "send() | calling pc.setLocalDescription() [offer:%o]",
                c
              ),
                await this._pc.setLocalDescription(c);
              const v = o.mid;
              (s.mid = v), (h = a.parse(this._pc.localDescription.sdp));
              const _ = h.media[h.media.length - 1];
              if (((s.rtcp.cname = u.getCname({ offerMediaObject: _ })), t))
                if (1 === t.length) {
                  const e = p.getRtpEncodings({ offerMediaObject: _ });
                  Object.assign(e[0], t[0]), (s.encodings = e);
                } else s.encodings = t;
              else s.encodings = p.getRtpEncodings({ offerMediaObject: _ });
              if (
                s.encodings.length > 1 &&
                ("video/vp8" === s.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === s.codecs[0].mimeType.toLowerCase())
              )
                for (const e of s.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${m.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: _,
                offerRtpParameters: s,
                answerRtpParameters: i,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                g.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ),
                await this._pc.setRemoteDescription(y),
                this._mapMidTransceiver.set(v, o),
                { localId: v, rtpParameters: s, rtpSender: o.sender }
              );
            }
            async stopSending(e) {
              if (
                (this.assertSendDirection(),
                g.debug("stopSending() [localId:%s]", e),
                this._closed)
              )
                return;
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated transceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.disableMediaSection(t.mid);
              const r = await this._pc.createOffer();
              g.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              g.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "sendonly"),
                this._remoteSdp.resumeSendingMediaSection(e);
              const r = await this._pc.createOffer();
              g.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? g.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : g.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated transceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              g.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              g.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              g.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t,
                  })),
                  g.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: n,
                  rtpParameters: s,
                  streamId: i,
                } = t;
                g.debug("receive() [trackId:%s, kind:%s]", e, n);
                const a = s.mid || String(this._mapMidTransceiver.size);
                r.set(e, a),
                  this._remoteSdp.receive({
                    mid: a,
                    kind: n,
                    offerRtpParameters: s,
                    streamId: i || s.rtcp.cname,
                    trackId: e,
                  });
              }
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              let s = await this._pc.createAnswer();
              const i = a.parse(s.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: n } = t,
                  o = r.get(e),
                  c = i.media.find((e) => String(e.mid) === o);
                u.applyCodecParameters({
                  offerRtpParameters: n,
                  answerMediaObject: c,
                }),
                  (s = { type: "answer", sdp: a.write(i) });
              }
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: i,
                })),
                g.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s);
              for (const n of e) {
                const { trackId: e } = n,
                  s = r.get(e),
                  i = this._pc.getTransceivers().find((e) => e.mid === s);
                if (!i) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(s, i),
                  t.push({
                    localId: s,
                    track: i.receiver.track,
                    rtpReceiver: i.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                g.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                g.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                g.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              g.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: e,
                  });
                }
                g.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new c.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Firefox120 = _;
        },
        2696: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = n,
                t = e.lib.StreamCipher,
                r = e.algo,
                s = [],
                i = [],
                a = [],
                o = (r.RabbitLegacy = t.extend({
                  _doReset: function () {
                    var e = this._key.words,
                      t = this.cfg.iv,
                      r = (this._X = [
                        e[0],
                        (e[3] << 16) | (e[2] >>> 16),
                        e[1],
                        (e[0] << 16) | (e[3] >>> 16),
                        e[2],
                        (e[1] << 16) | (e[0] >>> 16),
                        e[3],
                        (e[2] << 16) | (e[1] >>> 16),
                      ]),
                      n = (this._C = [
                        (e[2] << 16) | (e[2] >>> 16),
                        (4294901760 & e[0]) | (65535 & e[1]),
                        (e[3] << 16) | (e[3] >>> 16),
                        (4294901760 & e[1]) | (65535 & e[2]),
                        (e[0] << 16) | (e[0] >>> 16),
                        (4294901760 & e[2]) | (65535 & e[3]),
                        (e[1] << 16) | (e[1] >>> 16),
                        (4294901760 & e[3]) | (65535 & e[0]),
                      ]);
                    this._b = 0;
                    for (var s = 0; s < 4; s++) c.call(this);
                    for (s = 0; s < 8; s++) n[s] ^= r[(s + 4) & 7];
                    if (t) {
                      var i = t.words,
                        a = i[0],
                        o = i[1],
                        d =
                          (16711935 & ((a << 8) | (a >>> 24))) |
                          (4278255360 & ((a << 24) | (a >>> 8))),
                        l =
                          (16711935 & ((o << 8) | (o >>> 24))) |
                          (4278255360 & ((o << 24) | (o >>> 8))),
                        u = (d >>> 16) | (4294901760 & l),
                        p = (l << 16) | (65535 & d);
                      for (
                        n[0] ^= d,
                          n[1] ^= u,
                          n[2] ^= l,
                          n[3] ^= p,
                          n[4] ^= d,
                          n[5] ^= u,
                          n[6] ^= l,
                          n[7] ^= p,
                          s = 0;
                        s < 4;
                        s++
                      )
                        c.call(this);
                    }
                  },
                  _doProcessBlock: function (e, t) {
                    var r = this._X;
                    c.call(this),
                      (s[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                      (s[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                      (s[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                      (s[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                    for (var n = 0; n < 4; n++)
                      (s[n] =
                        (16711935 & ((s[n] << 8) | (s[n] >>> 24))) |
                        (4278255360 & ((s[n] << 24) | (s[n] >>> 8)))),
                        (e[t + n] ^= s[n]);
                  },
                  blockSize: 4,
                  ivSize: 2,
                }));
              function c() {
                for (var e = this._X, t = this._C, r = 0; r < 8; r++)
                  i[r] = t[r];
                for (
                  t[0] = (t[0] + 1295307597 + this._b) | 0,
                    t[1] =
                      (t[1] + 3545052371 + (t[0] >>> 0 < i[0] >>> 0 ? 1 : 0)) |
                      0,
                    t[2] =
                      (t[2] + 886263092 + (t[1] >>> 0 < i[1] >>> 0 ? 1 : 0)) |
                      0,
                    t[3] =
                      (t[3] + 1295307597 + (t[2] >>> 0 < i[2] >>> 0 ? 1 : 0)) |
                      0,
                    t[4] =
                      (t[4] + 3545052371 + (t[3] >>> 0 < i[3] >>> 0 ? 1 : 0)) |
                      0,
                    t[5] =
                      (t[5] + 886263092 + (t[4] >>> 0 < i[4] >>> 0 ? 1 : 0)) |
                      0,
                    t[6] =
                      (t[6] + 1295307597 + (t[5] >>> 0 < i[5] >>> 0 ? 1 : 0)) |
                      0,
                    t[7] =
                      (t[7] + 3545052371 + (t[6] >>> 0 < i[6] >>> 0 ? 1 : 0)) |
                      0,
                    this._b = t[7] >>> 0 < i[7] >>> 0 ? 1 : 0,
                    r = 0;
                  r < 8;
                  r++
                ) {
                  var n = e[r] + t[r],
                    s = 65535 & n,
                    o = n >>> 16,
                    c = ((((s * s) >>> 17) + s * o) >>> 15) + o * o,
                    d = (((4294901760 & n) * n) | 0) + (((65535 & n) * n) | 0);
                  a[r] = c ^ d;
                }
                (e[0] =
                  (a[0] +
                    ((a[7] << 16) | (a[7] >>> 16)) +
                    ((a[6] << 16) | (a[6] >>> 16))) |
                  0),
                  (e[1] = (a[1] + ((a[0] << 8) | (a[0] >>> 24)) + a[7]) | 0),
                  (e[2] =
                    (a[2] +
                      ((a[1] << 16) | (a[1] >>> 16)) +
                      ((a[0] << 16) | (a[0] >>> 16))) |
                    0),
                  (e[3] = (a[3] + ((a[2] << 8) | (a[2] >>> 24)) + a[1]) | 0),
                  (e[4] =
                    (a[4] +
                      ((a[3] << 16) | (a[3] >>> 16)) +
                      ((a[2] << 16) | (a[2] >>> 16))) |
                    0),
                  (e[5] = (a[5] + ((a[4] << 8) | (a[4] >>> 24)) + a[3]) | 0),
                  (e[6] =
                    (a[6] +
                      ((a[5] << 16) | (a[5] >>> 16)) +
                      ((a[4] << 16) | (a[4] >>> 16))) |
                    0),
                  (e[7] = (a[7] + ((a[6] << 8) | (a[6] >>> 24)) + a[5]) | 0);
              }
              e.RabbitLegacy = t._createHelper(o);
            })(),
            n.RabbitLegacy);
        },
        2901: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => i });
          var n = r(816);
          function s(e, t) {
            for (var r = 0; r < t.length; r++) {
              var s = t[r];
              (s.enumerable = s.enumerable || !1),
                (s.configurable = !0),
                "value" in s && (s.writable = !0),
                Object.defineProperty(e, (0, n.A)(s.key), s);
            }
          }
          function i(e, t, r) {
            return (
              t && s(e.prototype, t),
              r && s(e, r),
              Object.defineProperty(e, "prototype", { writable: !1 }),
              e
            );
          }
        },
        2994: function (e, t, r) {
          "use strict";
          var n =
            (this && this.__importDefault) ||
            function (e) {
              return e && e.__esModule ? e : { default: e };
            };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Logger = void 0);
          const s = n(r(7833)),
            i = "mediasoup-client";
          t.Logger = class {
            constructor(e) {
              e
                ? ((this._debug = (0, s.default)(`${i}:${e}`)),
                  (this._warn = (0, s.default)(`${i}:WARN:${e}`)),
                  (this._error = (0, s.default)(`${i}:ERROR:${e}`)))
                : ((this._debug = (0, s.default)(i)),
                  (this._warn = (0, s.default)(`${i}:WARN`)),
                  (this._error = (0, s.default)(`${i}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        3009: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            (function (e) {
              var t = n,
                r = t.lib,
                s = r.WordArray,
                i = r.Hasher,
                a = t.algo,
                o = [],
                c = [];
              !(function () {
                function t(t) {
                  for (var r = e.sqrt(t), n = 2; n <= r; n++)
                    if (!(t % n)) return !1;
                  return !0;
                }
                function r(e) {
                  return (4294967296 * (e - (0 | e))) | 0;
                }
                for (var n = 2, s = 0; s < 64; )
                  t(n) &&
                    (s < 8 && (o[s] = r(e.pow(n, 0.5))),
                    (c[s] = r(e.pow(n, 1 / 3))),
                    s++),
                    n++;
              })();
              var d = [],
                l = (a.SHA256 = i.extend({
                  _doReset: function () {
                    this._hash = new s.init(o.slice(0));
                  },
                  _doProcessBlock: function (e, t) {
                    for (
                      var r = this._hash.words,
                        n = r[0],
                        s = r[1],
                        i = r[2],
                        a = r[3],
                        o = r[4],
                        l = r[5],
                        u = r[6],
                        p = r[7],
                        h = 0;
                      h < 64;
                      h++
                    ) {
                      if (h < 16) d[h] = 0 | e[t + h];
                      else {
                        var m = d[h - 15],
                          f =
                            ((m << 25) | (m >>> 7)) ^
                            ((m << 14) | (m >>> 18)) ^
                            (m >>> 3),
                          g = d[h - 2],
                          v =
                            ((g << 15) | (g >>> 17)) ^
                            ((g << 13) | (g >>> 19)) ^
                            (g >>> 10);
                        d[h] = f + d[h - 7] + v + d[h - 16];
                      }
                      var _ = (n & s) ^ (n & i) ^ (s & i),
                        y =
                          ((n << 30) | (n >>> 2)) ^
                          ((n << 19) | (n >>> 13)) ^
                          ((n << 10) | (n >>> 22)),
                        b =
                          p +
                          (((o << 26) | (o >>> 6)) ^
                            ((o << 21) | (o >>> 11)) ^
                            ((o << 7) | (o >>> 25))) +
                          ((o & l) ^ (~o & u)) +
                          c[h] +
                          d[h];
                      (p = u),
                        (u = l),
                        (l = o),
                        (o = (a + b) | 0),
                        (a = i),
                        (i = s),
                        (s = n),
                        (n = (b + (y + _)) | 0);
                    }
                    (r[0] = (r[0] + n) | 0),
                      (r[1] = (r[1] + s) | 0),
                      (r[2] = (r[2] + i) | 0),
                      (r[3] = (r[3] + a) | 0),
                      (r[4] = (r[4] + o) | 0),
                      (r[5] = (r[5] + l) | 0),
                      (r[6] = (r[6] + u) | 0),
                      (r[7] = (r[7] + p) | 0);
                  },
                  _doFinalize: function () {
                    var t = this._data,
                      r = t.words,
                      n = 8 * this._nDataBytes,
                      s = 8 * t.sigBytes;
                    return (
                      (r[s >>> 5] |= 128 << (24 - (s % 32))),
                      (r[14 + (((s + 64) >>> 9) << 4)] = e.floor(
                        n / 4294967296
                      )),
                      (r[15 + (((s + 64) >>> 9) << 4)] = n),
                      (t.sigBytes = 4 * r.length),
                      this._process(),
                      this._hash
                    );
                  },
                  clone: function () {
                    var e = i.clone.call(this);
                    return (e._hash = this._hash.clone()), e;
                  },
                }));
              (t.SHA256 = i._createHelper(l)),
                (t.HmacSHA256 = i._createHmacHelper(l));
            })(Math),
            n.SHA256);
        },
        3029: (e, t, r) => {
          "use strict";
          function n(e, t) {
            if (!(e instanceof t))
              throw new TypeError("Cannot call a class as a function");
          }
          r.d(t, { A: () => n });
        },
        3128: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = n,
                t = e.lib.BlockCipher,
                r = e.algo;
              const s = 16,
                i = [
                  608135816, 2242054355, 320440878, 57701188, 2752067618,
                  698298832, 137296536, 3964562569, 1160258022, 953160567,
                  3193202383, 887688300, 3232508343, 3380367581, 1065670069,
                  3041331479, 2450970073, 2306472731,
                ],
                a = [
                  [
                    3509652390, 2564797868, 805139163, 3491422135, 3101798381,
                    1780907670, 3128725573, 4046225305, 614570311, 3012652279,
                    134345442, 2240740374, 1667834072, 1901547113, 2757295779,
                    4103290238, 227898511, 1921955416, 1904987480, 2182433518,
                    2069144605, 3260701109, 2620446009, 720527379, 3318853667,
                    677414384, 3393288472, 3101374703, 2390351024, 1614419982,
                    1822297739, 2954791486, 3608508353, 3174124327, 2024746970,
                    1432378464, 3864339955, 2857741204, 1464375394, 1676153920,
                    1439316330, 715854006, 3033291828, 289532110, 2706671279,
                    2087905683, 3018724369, 1668267050, 732546397, 1947742710,
                    3462151702, 2609353502, 2950085171, 1814351708, 2050118529,
                    680887927, 999245976, 1800124847, 3300911131, 1713906067,
                    1641548236, 4213287313, 1216130144, 1575780402, 4018429277,
                    3917837745, 3693486850, 3949271944, 596196993, 3549867205,
                    258830323, 2213823033, 772490370, 2760122372, 1774776394,
                    2652871518, 566650946, 4142492826, 1728879713, 2882767088,
                    1783734482, 3629395816, 2517608232, 2874225571, 1861159788,
                    326777828, 3124490320, 2130389656, 2716951837, 967770486,
                    1724537150, 2185432712, 2364442137, 1164943284, 2105845187,
                    998989502, 3765401048, 2244026483, 1075463327, 1455516326,
                    1322494562, 910128902, 469688178, 1117454909, 936433444,
                    3490320968, 3675253459, 1240580251, 122909385, 2157517691,
                    634681816, 4142456567, 3825094682, 3061402683, 2540495037,
                    79693498, 3249098678, 1084186820, 1583128258, 426386531,
                    1761308591, 1047286709, 322548459, 995290223, 1845252383,
                    2603652396, 3431023940, 2942221577, 3202600964, 3727903485,
                    1712269319, 422464435, 3234572375, 1170764815, 3523960633,
                    3117677531, 1434042557, 442511882, 3600875718, 1076654713,
                    1738483198, 4213154764, 2393238008, 3677496056, 1014306527,
                    4251020053, 793779912, 2902807211, 842905082, 4246964064,
                    1395751752, 1040244610, 2656851899, 3396308128, 445077038,
                    3742853595, 3577915638, 679411651, 2892444358, 2354009459,
                    1767581616, 3150600392, 3791627101, 3102740896, 284835224,
                    4246832056, 1258075500, 768725851, 2589189241, 3069724005,
                    3532540348, 1274779536, 3789419226, 2764799539, 1660621633,
                    3471099624, 4011903706, 913787905, 3497959166, 737222580,
                    2514213453, 2928710040, 3937242737, 1804850592, 3499020752,
                    2949064160, 2386320175, 2390070455, 2415321851, 4061277028,
                    2290661394, 2416832540, 1336762016, 1754252060, 3520065937,
                    3014181293, 791618072, 3188594551, 3933548030, 2332172193,
                    3852520463, 3043980520, 413987798, 3465142937, 3030929376,
                    4245938359, 2093235073, 3534596313, 375366246, 2157278981,
                    2479649556, 555357303, 3870105701, 2008414854, 3344188149,
                    4221384143, 3956125452, 2067696032, 3594591187, 2921233993,
                    2428461, 544322398, 577241275, 1471733935, 610547355,
                    4027169054, 1432588573, 1507829418, 2025931657, 3646575487,
                    545086370, 48609733, 2200306550, 1653985193, 298326376,
                    1316178497, 3007786442, 2064951626, 458293330, 2589141269,
                    3591329599, 3164325604, 727753846, 2179363840, 146436021,
                    1461446943, 4069977195, 705550613, 3059967265, 3887724982,
                    4281599278, 3313849956, 1404054877, 2845806497, 146425753,
                    1854211946,
                  ],
                  [
                    1266315497, 3048417604, 3681880366, 3289982499, 290971e4,
                    1235738493, 2632868024, 2414719590, 3970600049, 1771706367,
                    1449415276, 3266420449, 422970021, 1963543593, 2690192192,
                    3826793022, 1062508698, 1531092325, 1804592342, 2583117782,
                    2714934279, 4024971509, 1294809318, 4028980673, 1289560198,
                    2221992742, 1669523910, 35572830, 157838143, 1052438473,
                    1016535060, 1802137761, 1753167236, 1386275462, 3080475397,
                    2857371447, 1040679964, 2145300060, 2390574316, 1461121720,
                    2956646967, 4031777805, 4028374788, 33600511, 2920084762,
                    1018524850, 629373528, 3691585981, 3515945977, 2091462646,
                    2486323059, 586499841, 988145025, 935516892, 3367335476,
                    2599673255, 2839830854, 265290510, 3972581182, 2759138881,
                    3795373465, 1005194799, 847297441, 406762289, 1314163512,
                    1332590856, 1866599683, 4127851711, 750260880, 613907577,
                    1450815602, 3165620655, 3734664991, 3650291728, 3012275730,
                    3704569646, 1427272223, 778793252, 1343938022, 2676280711,
                    2052605720, 1946737175, 3164576444, 3914038668, 3967478842,
                    3682934266, 1661551462, 3294938066, 4011595847, 840292616,
                    3712170807, 616741398, 312560963, 711312465, 1351876610,
                    322626781, 1910503582, 271666773, 2175563734, 1594956187,
                    70604529, 3617834859, 1007753275, 1495573769, 4069517037,
                    2549218298, 2663038764, 504708206, 2263041392, 3941167025,
                    2249088522, 1514023603, 1998579484, 1312622330, 694541497,
                    2582060303, 2151582166, 1382467621, 776784248, 2618340202,
                    3323268794, 2497899128, 2784771155, 503983604, 4076293799,
                    907881277, 423175695, 432175456, 1378068232, 4145222326,
                    3954048622, 3938656102, 3820766613, 2793130115, 2977904593,
                    26017576, 3274890735, 3194772133, 1700274565, 1756076034,
                    4006520079, 3677328699, 720338349, 1533947780, 354530856,
                    688349552, 3973924725, 1637815568, 332179504, 3949051286,
                    53804574, 2852348879, 3044236432, 1282449977, 3583942155,
                    3416972820, 4006381244, 1617046695, 2628476075, 3002303598,
                    1686838959, 431878346, 2686675385, 1700445008, 1080580658,
                    1009431731, 832498133, 3223435511, 2605976345, 2271191193,
                    2516031870, 1648197032, 4164389018, 2548247927, 300782431,
                    375919233, 238389289, 3353747414, 2531188641, 2019080857,
                    1475708069, 455242339, 2609103871, 448939670, 3451063019,
                    1395535956, 2413381860, 1841049896, 1491858159, 885456874,
                    4264095073, 4001119347, 1565136089, 3898914787, 1108368660,
                    540939232, 1173283510, 2745871338, 3681308437, 4207628240,
                    3343053890, 4016749493, 1699691293, 1103962373, 3625875870,
                    2256883143, 3830138730, 1031889488, 3479347698, 1535977030,
                    4236805024, 3251091107, 2132092099, 1774941330, 1199868427,
                    1452454533, 157007616, 2904115357, 342012276, 595725824,
                    1480756522, 206960106, 497939518, 591360097, 863170706,
                    2375253569, 3596610801, 1814182875, 2094937945, 3421402208,
                    1082520231, 3463918190, 2785509508, 435703966, 3908032597,
                    1641649973, 2842273706, 3305899714, 1510255612, 2148256476,
                    2655287854, 3276092548, 4258621189, 236887753, 3681803219,
                    274041037, 1734335097, 3815195456, 3317970021, 1899903192,
                    1026095262, 4050517792, 356393447, 2410691914, 3873677099,
                    3682840055,
                  ],
                  [
                    3913112168, 2491498743, 4132185628, 2489919796, 1091903735,
                    1979897079, 3170134830, 3567386728, 3557303409, 857797738,
                    1136121015, 1342202287, 507115054, 2535736646, 337727348,
                    3213592640, 1301675037, 2528481711, 1895095763, 1721773893,
                    3216771564, 62756741, 2142006736, 835421444, 2531993523,
                    1442658625, 3659876326, 2882144922, 676362277, 1392781812,
                    170690266, 3921047035, 1759253602, 3611846912, 1745797284,
                    664899054, 1329594018, 3901205900, 3045908486, 2062866102,
                    2865634940, 3543621612, 3464012697, 1080764994, 553557557,
                    3656615353, 3996768171, 991055499, 499776247, 1265440854,
                    648242737, 3940784050, 980351604, 3713745714, 1749149687,
                    3396870395, 4211799374, 3640570775, 1161844396, 3125318951,
                    1431517754, 545492359, 4268468663, 3499529547, 1437099964,
                    2702547544, 3433638243, 2581715763, 2787789398, 1060185593,
                    1593081372, 2418618748, 4260947970, 69676912, 2159744348,
                    86519011, 2512459080, 3838209314, 1220612927, 3339683548,
                    133810670, 1090789135, 1078426020, 1569222167, 845107691,
                    3583754449, 4072456591, 1091646820, 628848692, 1613405280,
                    3757631651, 526609435, 236106946, 48312990, 2942717905,
                    3402727701, 1797494240, 859738849, 992217954, 4005476642,
                    2243076622, 3870952857, 3732016268, 765654824, 3490871365,
                    2511836413, 1685915746, 3888969200, 1414112111, 2273134842,
                    3281911079, 4080962846, 172450625, 2569994100, 980381355,
                    4109958455, 2819808352, 2716589560, 2568741196, 3681446669,
                    3329971472, 1835478071, 660984891, 3704678404, 4045999559,
                    3422617507, 3040415634, 1762651403, 1719377915, 3470491036,
                    2693910283, 3642056355, 3138596744, 1364962596, 2073328063,
                    1983633131, 926494387, 3423689081, 2150032023, 4096667949,
                    1749200295, 3328846651, 309677260, 2016342300, 1779581495,
                    3079819751, 111262694, 1274766160, 443224088, 298511866,
                    1025883608, 3806446537, 1145181785, 168956806, 3641502830,
                    3584813610, 1689216846, 3666258015, 3200248200, 1692713982,
                    2646376535, 4042768518, 1618508792, 1610833997, 3523052358,
                    4130873264, 2001055236, 3610705100, 2202168115, 4028541809,
                    2961195399, 1006657119, 2006996926, 3186142756, 1430667929,
                    3210227297, 1314452623, 4074634658, 4101304120, 2273951170,
                    1399257539, 3367210612, 3027628629, 1190975929, 2062231137,
                    2333990788, 2221543033, 2438960610, 1181637006, 548689776,
                    2362791313, 3372408396, 3104550113, 3145860560, 296247880,
                    1970579870, 3078560182, 3769228297, 1714227617, 3291629107,
                    3898220290, 166772364, 1251581989, 493813264, 448347421,
                    195405023, 2709975567, 677966185, 3703036547, 1463355134,
                    2715995803, 1338867538, 1343315457, 2802222074, 2684532164,
                    233230375, 2599980071, 2000651841, 3277868038, 1638401717,
                    4028070440, 3237316320, 6314154, 819756386, 300326615,
                    590932579, 1405279636, 3267499572, 3150704214, 2428286686,
                    3959192993, 3461946742, 1862657033, 1266418056, 963775037,
                    2089974820, 2263052895, 1917689273, 448879540, 3550394620,
                    3981727096, 150775221, 3627908307, 1303187396, 508620638,
                    2975983352, 2726630617, 1817252668, 1876281319, 1457606340,
                    908771278, 3720792119, 3617206836, 2455994898, 1729034894,
                    1080033504,
                  ],
                  [
                    976866871, 3556439503, 2881648439, 1522871579, 1555064734,
                    1336096578, 3548522304, 2579274686, 3574697629, 3205460757,
                    3593280638, 3338716283, 3079412587, 564236357, 2993598910,
                    1781952180, 1464380207, 3163844217, 3332601554, 1699332808,
                    1393555694, 1183702653, 3581086237, 1288719814, 691649499,
                    2847557200, 2895455976, 3193889540, 2717570544, 1781354906,
                    1676643554, 2592534050, 3230253752, 1126444790, 2770207658,
                    2633158820, 2210423226, 2615765581, 2414155088, 3127139286,
                    673620729, 2805611233, 1269405062, 4015350505, 3341807571,
                    4149409754, 1057255273, 2012875353, 2162469141, 2276492801,
                    2601117357, 993977747, 3918593370, 2654263191, 753973209,
                    36408145, 2530585658, 25011837, 3520020182, 2088578344,
                    530523599, 2918365339, 1524020338, 1518925132, 3760827505,
                    3759777254, 1202760957, 3985898139, 3906192525, 674977740,
                    4174734889, 2031300136, 2019492241, 3983892565, 4153806404,
                    3822280332, 352677332, 2297720250, 60907813, 90501309,
                    3286998549, 1016092578, 2535922412, 2839152426, 457141659,
                    509813237, 4120667899, 652014361, 1966332200, 2975202805,
                    55981186, 2327461051, 676427537, 3255491064, 2882294119,
                    3433927263, 1307055953, 942726286, 933058658, 2468411793,
                    3933900994, 4215176142, 1361170020, 2001714738, 2830558078,
                    3274259782, 1222529897, 1679025792, 2729314320, 3714953764,
                    1770335741, 151462246, 3013232138, 1682292957, 1483529935,
                    471910574, 1539241949, 458788160, 3436315007, 1807016891,
                    3718408830, 978976581, 1043663428, 3165965781, 1927990952,
                    4200891579, 2372276910, 3208408903, 3533431907, 1412390302,
                    2931980059, 4132332400, 1947078029, 3881505623, 4168226417,
                    2941484381, 1077988104, 1320477388, 886195818, 18198404,
                    3786409e3, 2509781533, 112762804, 3463356488, 1866414978,
                    891333506, 18488651, 661792760, 1628790961, 3885187036,
                    3141171499, 876946877, 2693282273, 1372485963, 791857591,
                    2686433993, 3759982718, 3167212022, 3472953795, 2716379847,
                    445679433, 3561995674, 3504004811, 3574258232, 54117162,
                    3331405415, 2381918588, 3769707343, 4154350007, 1140177722,
                    4074052095, 668550556, 3214352940, 367459370, 261225585,
                    2610173221, 4209349473, 3468074219, 3265815641, 314222801,
                    3066103646, 3808782860, 282218597, 3406013506, 3773591054,
                    379116347, 1285071038, 846784868, 2669647154, 3771962079,
                    3550491691, 2305946142, 453669953, 1268987020, 3317592352,
                    3279303384, 3744833421, 2610507566, 3859509063, 266596637,
                    3847019092, 517658769, 3462560207, 3443424879, 370717030,
                    4247526661, 2224018117, 4143653529, 4112773975, 2788324899,
                    2477274417, 1456262402, 2901442914, 1517677493, 1846949527,
                    2295493580, 3734397586, 2176403920, 1280348187, 1908823572,
                    3871786941, 846861322, 1172426758, 3287448474, 3383383037,
                    1655181056, 3139813346, 901632758, 1897031941, 2986607138,
                    3066810236, 3447102507, 1393639104, 373351379, 950779232,
                    625454576, 3124240540, 4148612726, 2007998917, 544563296,
                    2244738638, 2330496472, 2058025392, 1291430526, 424198748,
                    50039436, 29584100, 3605783033, 2429876329, 2791104160,
                    1057563949, 3255363231, 3075367218, 3463963227, 1469046755,
                    985887462,
                  ],
                ];
              var o = { pbox: [], sbox: [] };
              function c(e, t) {
                let r = (t >> 24) & 255,
                  n = (t >> 16) & 255,
                  s = (t >> 8) & 255,
                  i = 255 & t,
                  a = e.sbox[0][r] + e.sbox[1][n];
                return (a ^= e.sbox[2][s]), (a += e.sbox[3][i]), a;
              }
              function d(e, t, r) {
                let n,
                  i = t,
                  a = r;
                for (let t = 0; t < s; ++t)
                  (i ^= e.pbox[t]),
                    (a = c(e, i) ^ a),
                    (n = i),
                    (i = a),
                    (a = n);
                return (
                  (n = i),
                  (i = a),
                  (a = n),
                  (a ^= e.pbox[s]),
                  (i ^= e.pbox[s + 1]),
                  { left: i, right: a }
                );
              }
              function l(e, t, r) {
                let n,
                  i = t,
                  a = r;
                for (let t = s + 1; t > 1; --t)
                  (i ^= e.pbox[t]),
                    (a = c(e, i) ^ a),
                    (n = i),
                    (i = a),
                    (a = n);
                return (
                  (n = i),
                  (i = a),
                  (a = n),
                  (a ^= e.pbox[1]),
                  (i ^= e.pbox[0]),
                  { left: i, right: a }
                );
              }
              function u(e, t, r) {
                for (let t = 0; t < 4; t++) {
                  e.sbox[t] = [];
                  for (let r = 0; r < 256; r++) e.sbox[t][r] = a[t][r];
                }
                let n = 0;
                for (let a = 0; a < s + 2; a++)
                  (e.pbox[a] = i[a] ^ t[n]), n++, n >= r && (n = 0);
                let o = 0,
                  c = 0,
                  l = 0;
                for (let t = 0; t < s + 2; t += 2)
                  (l = d(e, o, c)),
                    (o = l.left),
                    (c = l.right),
                    (e.pbox[t] = o),
                    (e.pbox[t + 1] = c);
                for (let t = 0; t < 4; t++)
                  for (let r = 0; r < 256; r += 2)
                    (l = d(e, o, c)),
                      (o = l.left),
                      (c = l.right),
                      (e.sbox[t][r] = o),
                      (e.sbox[t][r + 1] = c);
                return !0;
              }
              var p = (r.Blowfish = t.extend({
                _doReset: function () {
                  if (this._keyPriorReset !== this._key) {
                    var e = (this._keyPriorReset = this._key),
                      t = e.words,
                      r = e.sigBytes / 4;
                    u(o, t, r);
                  }
                },
                encryptBlock: function (e, t) {
                  var r = d(o, e[t], e[t + 1]);
                  (e[t] = r.left), (e[t + 1] = r.right);
                },
                decryptBlock: function (e, t) {
                  var r = l(o, e[t], e[t + 1]);
                  (e[t] = r.left), (e[t + 1] = r.right);
                },
                blockSize: 2,
                keySize: 4,
                ivSize: 2,
              }));
              e.Blowfish = t._createHelper(p);
            })(),
            n.Blowfish);
        },
        3145: (e, t, r) => {
          "use strict";
          function n(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          r.d(t, { A: () => n });
        },
        3200: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.ProfileLevelId = t.Level = t.Profile = void 0),
            (t.parseProfileLevelId = p),
            (t.profileLevelIdToString = h),
            (t.profileToString = function (e) {
              switch (e) {
                case s.ConstrainedBaseline:
                  return "ConstrainedBaseline";
                case s.Baseline:
                  return "Baseline";
                case s.Main:
                  return "Main";
                case s.ConstrainedHigh:
                  return "ConstrainedHigh";
                case s.High:
                  return "High";
                case s.PredictiveHigh444:
                  return "PredictiveHigh444";
                default:
                  return void n.warn(
                    `profileToString() | unrecognized profile ${e}`
                  );
              }
            }),
            (t.levelToString = function (e) {
              switch (e) {
                case i.L1_b:
                  return "1b";
                case i.L1:
                  return "1";
                case i.L1_1:
                  return "1.1";
                case i.L1_2:
                  return "1.2";
                case i.L1_3:
                  return "1.3";
                case i.L2:
                  return "2";
                case i.L2_1:
                  return "2.1";
                case i.L2_2:
                  return "2.2";
                case i.L3:
                  return "3";
                case i.L3_1:
                  return "3.1";
                case i.L3_2:
                  return "3.2";
                case i.L4:
                  return "4";
                case i.L4_1:
                  return "4.1";
                case i.L4_2:
                  return "4.2";
                case i.L5:
                  return "5";
                case i.L5_1:
                  return "5.1";
                case i.L5_2:
                  return "5.2";
                default:
                  return void n.warn(
                    `levelToString() | unrecognized level ${e}`
                  );
              }
            }),
            (t.parseSdpProfileLevelId = m),
            (t.isSameProfile = function (e = {}, t = {}) {
              const r = m(e),
                n = m(t);
              return Boolean(r && n && r.profile === n.profile);
            }),
            (t.isSameProfileAndLevel = function (e = {}, t = {}) {
              const r = m(e),
                n = m(t);
              return Boolean(
                r && n && r.profile === n.profile && r.level == n.level
              );
            }),
            (t.generateProfileLevelIdStringForAnswer = function (
              e = {},
              t = {}
            ) {
              if (!e["profile-level-id"] && !t["profile-level-id"])
                return void n.warn(
                  "generateProfileLevelIdStringForAnswer() | profile-level-id missing in local and remote params"
                );
              const r = m(e),
                s = m(t);
              if (!r) throw new TypeError("invalid local_profile_level_id");
              if (!s) throw new TypeError("invalid remote_profile_level_id");
              if (r.profile !== s.profile)
                throw new TypeError("H264 Profile mismatch");
              const o = g(e) && g(t),
                c = r.level,
                d = s.level,
                l =
                  ((p = c),
                  (f = d),
                  (function (e, t) {
                    return e === i.L1_b
                      ? t !== i.L1 && t !== i.L1_b
                      : t === i.L1_b
                      ? e !== i.L1
                      : e < t;
                  })(p, f)
                    ? p
                    : f),
                u = o ? c : l;
              var p, f;
              return (
                n.debug(
                  `generateProfileLevelIdStringForAnswer() | result [profile:${r.profile}, level:${u}]`
                ),
                h(new a(r.profile, u))
              );
            }),
            (t.supportedLevel = function (e, t) {
              for (let r = u.length - 1; r >= 0; --r) {
                const s = u[r];
                if (
                  256 * s.max_macroblock_frame_size <= e &&
                  s.max_macroblocks_per_second <=
                    t * s.max_macroblock_frame_size
                )
                  return (
                    n.debug(
                      `supportedLevel() | result [max_frame_pixel_count:${e}, max_fps:${t}, level:${s.level}]`
                    ),
                    s.level
                  );
              }
              return void n.warn(
                `supportedLevel() | no level supported [max_frame_pixel_count:${e}, max_fps:${t}]`
              );
            });
          const n = new (r(3582).Logger)();
          var s, i;
          !(function (e) {
            (e[(e.ConstrainedBaseline = 1)] = "ConstrainedBaseline"),
              (e[(e.Baseline = 2)] = "Baseline"),
              (e[(e.Main = 3)] = "Main"),
              (e[(e.ConstrainedHigh = 4)] = "ConstrainedHigh"),
              (e[(e.High = 5)] = "High"),
              (e[(e.PredictiveHigh444 = 6)] = "PredictiveHigh444");
          })(s || (t.Profile = s = {})),
            (function (e) {
              (e[(e.L1_b = 0)] = "L1_b"),
                (e[(e.L1 = 10)] = "L1"),
                (e[(e.L1_1 = 11)] = "L1_1"),
                (e[(e.L1_2 = 12)] = "L1_2"),
                (e[(e.L1_3 = 13)] = "L1_3"),
                (e[(e.L2 = 20)] = "L2"),
                (e[(e.L2_1 = 21)] = "L2_1"),
                (e[(e.L2_2 = 22)] = "L2_2"),
                (e[(e.L3 = 30)] = "L3"),
                (e[(e.L3_1 = 31)] = "L3_1"),
                (e[(e.L3_2 = 32)] = "L3_2"),
                (e[(e.L4 = 40)] = "L4"),
                (e[(e.L4_1 = 41)] = "L4_1"),
                (e[(e.L4_2 = 42)] = "L4_2"),
                (e[(e.L5 = 50)] = "L5"),
                (e[(e.L5_1 = 51)] = "L5_1"),
                (e[(e.L5_2 = 52)] = "L5_2");
            })(i || (t.Level = i = {}));
          class a {
            constructor(e, t) {
              (this.profile = e), (this.level = t);
            }
          }
          t.ProfileLevelId = a;
          const o = new a(s.ConstrainedBaseline, i.L3_1);
          class c {
            constructor(e) {
              (this.mask = ~f("x", e)), (this.masked_value = f("1", e));
            }
            isMatch(e) {
              return this.masked_value === (e & this.mask);
            }
          }
          class d {
            constructor(e, t, r) {
              (this.profile_idc = e),
                (this.profile_iop = t),
                (this.profile = r);
            }
          }
          const l = [
              new d(66, new c("x1xx0000"), s.ConstrainedBaseline),
              new d(77, new c("1xxx0000"), s.ConstrainedBaseline),
              new d(88, new c("11xx0000"), s.ConstrainedBaseline),
              new d(66, new c("x0xx0000"), s.Baseline),
              new d(88, new c("10xx0000"), s.Baseline),
              new d(77, new c("0x0x0000"), s.Main),
              new d(100, new c("00000000"), s.High),
              new d(100, new c("00001100"), s.ConstrainedHigh),
              new d(244, new c("00000000"), s.PredictiveHigh444),
            ],
            u = [
              {
                max_macroblocks_per_second: 1485,
                max_macroblock_frame_size: 99,
                level: i.L1,
              },
              {
                max_macroblocks_per_second: 1485,
                max_macroblock_frame_size: 99,
                level: i.L1_b,
              },
              {
                max_macroblocks_per_second: 3e3,
                max_macroblock_frame_size: 396,
                level: i.L1_1,
              },
              {
                max_macroblocks_per_second: 6e3,
                max_macroblock_frame_size: 396,
                level: i.L1_2,
              },
              {
                max_macroblocks_per_second: 11880,
                max_macroblock_frame_size: 396,
                level: i.L1_3,
              },
              {
                max_macroblocks_per_second: 11880,
                max_macroblock_frame_size: 396,
                level: i.L2,
              },
              {
                max_macroblocks_per_second: 19800,
                max_macroblock_frame_size: 792,
                level: i.L2_1,
              },
              {
                max_macroblocks_per_second: 20250,
                max_macroblock_frame_size: 1620,
                level: i.L2_2,
              },
              {
                max_macroblocks_per_second: 40500,
                max_macroblock_frame_size: 1620,
                level: i.L3,
              },
              {
                max_macroblocks_per_second: 108e3,
                max_macroblock_frame_size: 3600,
                level: i.L3_1,
              },
              {
                max_macroblocks_per_second: 216e3,
                max_macroblock_frame_size: 5120,
                level: i.L3_2,
              },
              {
                max_macroblocks_per_second: 245760,
                max_macroblock_frame_size: 8192,
                level: i.L4,
              },
              {
                max_macroblocks_per_second: 245760,
                max_macroblock_frame_size: 8192,
                level: i.L4_1,
              },
              {
                max_macroblocks_per_second: 522240,
                max_macroblock_frame_size: 8704,
                level: i.L4_2,
              },
              {
                max_macroblocks_per_second: 589824,
                max_macroblock_frame_size: 22080,
                level: i.L5,
              },
              {
                max_macroblocks_per_second: 983040,
                max_macroblock_frame_size: 36864,
                level: i.L5_1,
              },
              {
                max_macroblocks_per_second: 2073600,
                max_macroblock_frame_size: 36864,
                level: i.L5_2,
              },
            ];
          function p(e) {
            if ("string" != typeof e || 6 !== e.length) return;
            const t = parseInt(e, 16);
            if (0 === t) return;
            const r = 255 & t,
              s = (t >> 8) & 255,
              o = (t >> 16) & 255;
            let c;
            switch (r) {
              case i.L1_1:
                c = 16 & s ? i.L1_b : i.L1_1;
                break;
              case i.L1:
              case i.L1_2:
              case i.L1_3:
              case i.L2:
              case i.L2_1:
              case i.L2_2:
              case i.L3:
              case i.L3_1:
              case i.L3_2:
              case i.L4:
              case i.L4_1:
              case i.L4_2:
              case i.L5:
              case i.L5_1:
              case i.L5_2:
                c = r;
                break;
              default:
                return void n.warn(
                  `parseProfileLevelId() | unrecognized level_idc [str:${e}, level_idc:${r}]`
                );
            }
            for (const t of l)
              if (o === t.profile_idc && t.profile_iop.isMatch(s))
                return (
                  n.debug(
                    `parseProfileLevelId() | result [str:${e}, profile:${t.profile}, level:${c}]`
                  ),
                  new a(t.profile, c)
                );
            n.warn(
              `parseProfileLevelId() | unrecognized profile_idc/profile_iop combination [str:${e}, profile_idc:${o}, profile_iop:${s}]`
            );
          }
          function h(e) {
            if (e.level == i.L1_b)
              switch (e.profile) {
                case s.ConstrainedBaseline:
                  return "42f00b";
                case s.Baseline:
                  return "42100b";
                case s.Main:
                  return "4d100b";
                default:
                  return void n.warn(
                    `profileLevelIdToString() | Level 1_b not is allowed for profile ${e.profile}`
                  );
              }
            let t;
            switch (e.profile) {
              case s.ConstrainedBaseline:
                t = "42e0";
                break;
              case s.Baseline:
                t = "4200";
                break;
              case s.Main:
                t = "4d00";
                break;
              case s.ConstrainedHigh:
                t = "640c";
                break;
              case s.High:
                t = "6400";
                break;
              case s.PredictiveHigh444:
                t = "f400";
                break;
              default:
                return void n.warn(
                  `profileLevelIdToString() | unrecognized profile ${e.profile}`
                );
            }
            let r = e.level.toString(16);
            return 1 === r.length && (r = `0${r}`), `${t}${r}`;
          }
          function m(e = {}) {
            const t = e["profile-level-id"];
            return t ? p(t) : o;
          }
          function f(e, t) {
            return (
              (Number(t[0] === e) << 7) |
              (Number(t[1] === e) << 6) |
              (Number(t[2] === e) << 5) |
              (Number(t[3] === e) << 4) |
              (Number(t[4] === e) << 3) |
              (Number(t[5] === e) << 2) |
              (Number(t[6] === e) << 1) |
              Number(t[7] === e)
            );
          }
          function g(e = {}) {
            const t = e["level-asymmetry-allowed"];
            return !0 === t || 1 === t || "1" === t;
          }
        },
        3240: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            (function (e) {
              var t = n,
                r = t.lib,
                s = r.Base,
                i = r.WordArray,
                a = (t.x64 = {});
              (a.Word = s.extend({
                init: function (e, t) {
                  (this.high = e), (this.low = t);
                },
              })),
                (a.WordArray = s.extend({
                  init: function (t, r) {
                    (t = this.words = t || []),
                      (this.sigBytes = r != e ? r : 8 * t.length);
                  },
                  toX32: function () {
                    for (
                      var e = this.words, t = e.length, r = [], n = 0;
                      n < t;
                      n++
                    ) {
                      var s = e[n];
                      r.push(s.high), r.push(s.low);
                    }
                    return i.create(r, this.sigBytes);
                  },
                  clone: function () {
                    for (
                      var e = s.clone.call(this),
                        t = (e.words = this.words.slice(0)),
                        r = t.length,
                        n = 0;
                      n < r;
                      n++
                    )
                      t[n] = t[n].clone();
                    return e;
                  },
                }));
            })(),
            n);
        },
        3303: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.parse = void 0);
          const r = new RegExp("^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})");
          t.parse = function (e) {
            const t = r.exec(e || "");
            return t
              ? { spatialLayers: Number(t[1]), temporalLayers: Number(t[2]) }
              : { spatialLayers: 1, temporalLayers: 1 };
          };
        },
        3471: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.OfferMediaSection =
              t.AnswerMediaSection =
              t.MediaSection =
                void 0);
          const a = i(r(7363)),
            o = i(r(1765));
          class c {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              planB: n = !1,
            }) {
              if (
                ((this._mediaObject = {}),
                (this._planB = n),
                e && this.setIceParameters(e),
                t)
              ) {
                this._mediaObject.candidates = [];
                for (const e of t) {
                  const t = { component: 1 };
                  (t.foundation = e.foundation),
                    (t.ip = e.address ?? e.ip),
                    (t.port = e.port),
                    (t.priority = e.priority),
                    (t.transport = e.protocol),
                    (t.type = e.type),
                    e.tcpType && (t.tcptype = e.tcpType),
                    this._mediaObject.candidates.push(t);
                }
                (this._mediaObject.endOfCandidates = "end-of-candidates"),
                  (this._mediaObject.iceOptions = "renomination");
              }
              r && this.setDtlsRole(r.role);
            }
            get mid() {
              return String(this._mediaObject.mid);
            }
            get closed() {
              return 0 === this._mediaObject.port;
            }
            getObject() {
              return this._mediaObject;
            }
            setIceParameters(e) {
              (this._mediaObject.iceUfrag = e.usernameFragment),
                (this._mediaObject.icePwd = e.password);
            }
            pause() {
              this._mediaObject.direction = "inactive";
            }
            disable() {
              this.pause(),
                delete this._mediaObject.ext,
                delete this._mediaObject.ssrcs,
                delete this._mediaObject.ssrcGroups,
                delete this._mediaObject.simulcast,
                delete this._mediaObject.simulcast_03,
                delete this._mediaObject.rids,
                delete this._mediaObject.extmapAllowMixed;
            }
            close() {
              this.disable(), (this._mediaObject.port = 0);
            }
          }
          t.MediaSection = c;
          t.AnswerMediaSection = class extends c {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: n,
              plainRtpParameters: s,
              planB: i = !1,
              offerMediaObject: a,
              offerRtpParameters: c,
              answerRtpParameters: l,
              codecOptions: u,
              extmapAllowMixed: p = !1,
            }) {
              switch (
                (super({
                  iceParameters: e,
                  iceCandidates: t,
                  dtlsParameters: r,
                  planB: i,
                }),
                (this._mediaObject.mid = String(a.mid)),
                (this._mediaObject.type = a.type),
                (this._mediaObject.protocol = a.protocol),
                s
                  ? ((this._mediaObject.connection = {
                      ip: s.ip,
                      version: s.ipVersion,
                    }),
                    (this._mediaObject.port = s.port))
                  : ((this._mediaObject.connection = {
                      ip: "127.0.0.1",
                      version: 4,
                    }),
                    (this._mediaObject.port = 7)),
                a.type)
              ) {
                case "audio":
                case "video":
                  (this._mediaObject.direction = "recvonly"),
                    (this._mediaObject.rtp = []),
                    (this._mediaObject.rtcpFb = []),
                    (this._mediaObject.fmtp = []);
                  for (const e of l.codecs) {
                    const t = {
                      payload: e.payloadType,
                      codec: d(e),
                      rate: e.clockRate,
                    };
                    e.channels > 1 && (t.encoding = e.channels),
                      this._mediaObject.rtp.push(t);
                    const r = o.clone(e.parameters) ?? {};
                    let n = o.clone(e.rtcpFeedback) ?? [];
                    if (u) {
                      const {
                          opusStereo: t,
                          opusFec: s,
                          opusDtx: i,
                          opusMaxPlaybackRate: a,
                          opusMaxAverageBitrate: o,
                          opusPtime: d,
                          opusNack: l,
                          videoGoogleStartBitrate: p,
                          videoGoogleMaxBitrate: h,
                          videoGoogleMinBitrate: m,
                        } = u,
                        f = c.codecs.find(
                          (t) => t.payloadType === e.payloadType
                        );
                      switch (e.mimeType.toLowerCase()) {
                        case "audio/opus":
                        case "audio/multiopus":
                          void 0 !== t &&
                            ((f.parameters["sprop-stereo"] = t ? 1 : 0),
                            (r.stereo = t ? 1 : 0)),
                            void 0 !== s &&
                              ((f.parameters.useinbandfec = s ? 1 : 0),
                              (r.useinbandfec = s ? 1 : 0)),
                            void 0 !== i &&
                              ((f.parameters.usedtx = i ? 1 : 0),
                              (r.usedtx = i ? 1 : 0)),
                            void 0 !== a && (r.maxplaybackrate = a),
                            void 0 !== o && (r.maxaveragebitrate = o),
                            void 0 !== d &&
                              ((f.parameters.ptime = d), (r.ptime = d)),
                            l ||
                              ((f.rtcpFeedback = f.rtcpFeedback.filter(
                                (e) => "nack" !== e.type || e.parameter
                              )),
                              (n = n.filter(
                                (e) => "nack" !== e.type || e.parameter
                              )));
                          break;
                        case "video/vp8":
                        case "video/vp9":
                        case "video/h264":
                        case "video/h265":
                          void 0 !== p && (r["x-google-start-bitrate"] = p),
                            void 0 !== h && (r["x-google-max-bitrate"] = h),
                            void 0 !== m && (r["x-google-min-bitrate"] = m);
                      }
                    }
                    const s = { payload: e.payloadType, config: "" };
                    for (const e of Object.keys(r))
                      s.config && (s.config += ";"),
                        (s.config += `${e}=${r[e]}`);
                    s.config && this._mediaObject.fmtp.push(s);
                    for (const t of n)
                      this._mediaObject.rtcpFb.push({
                        payload: e.payloadType,
                        type: t.type,
                        subtype: t.parameter,
                      });
                  }
                  (this._mediaObject.payloads = l.codecs
                    .map((e) => e.payloadType)
                    .join(" ")),
                    (this._mediaObject.ext = []);
                  for (const e of l.headerExtensions) {
                    (a.ext || []).some((t) => t.uri === e.uri) &&
                      this._mediaObject.ext.push({ uri: e.uri, value: e.id });
                  }
                  if (
                    (p &&
                      "extmap-allow-mixed" === a.extmapAllowMixed &&
                      (this._mediaObject.extmapAllowMixed =
                        "extmap-allow-mixed"),
                    a.simulcast)
                  ) {
                    (this._mediaObject.simulcast = {
                      dir1: "recv",
                      list1: a.simulcast.list1,
                    }),
                      (this._mediaObject.rids = []);
                    for (const e of a.rids || [])
                      "send" === e.direction &&
                        this._mediaObject.rids.push({
                          id: e.id,
                          direction: "recv",
                        });
                  } else if (a.simulcast_03) {
                    (this._mediaObject.simulcast_03 = {
                      value: a.simulcast_03.value.replace(/send/g, "recv"),
                    }),
                      (this._mediaObject.rids = []);
                    for (const e of a.rids || [])
                      "send" === e.direction &&
                        this._mediaObject.rids.push({
                          id: e.id,
                          direction: "recv",
                        });
                  }
                  (this._mediaObject.rtcpMux = "rtcp-mux"),
                    (this._mediaObject.rtcpRsize = "rtcp-rsize"),
                    this._planB &&
                      "video" === this._mediaObject.type &&
                      (this._mediaObject.xGoogleFlag = "conference");
                  break;
                case "application":
                  "number" == typeof a.sctpPort
                    ? ((this._mediaObject.payloads = "webrtc-datachannel"),
                      (this._mediaObject.sctpPort = n.port),
                      (this._mediaObject.maxMessageSize = n.maxMessageSize))
                    : a.sctpmap &&
                      ((this._mediaObject.payloads = n.port),
                      (this._mediaObject.sctpmap = {
                        app: "webrtc-datachannel",
                        sctpmapNumber: n.port,
                        maxMessageSize: n.maxMessageSize,
                      }));
              }
            }
            setDtlsRole(e) {
              switch (e) {
                case "client":
                  this._mediaObject.setup = "active";
                  break;
                case "server":
                  this._mediaObject.setup = "passive";
                  break;
                case "auto":
                  this._mediaObject.setup = "actpass";
              }
            }
            resume() {
              this._mediaObject.direction = "recvonly";
            }
            muxSimulcastStreams(e) {
              if (
                !this._mediaObject.simulcast ||
                !this._mediaObject.simulcast.list1
              )
                return;
              const t = {};
              for (const r of e) r.rid && (t[r.rid] = r);
              const r = this._mediaObject.simulcast.list1,
                n = a.parseSimulcastStreamList(r);
              for (const e of n)
                for (const r of e) r.paused = !t[r.scid]?.active;
              this._mediaObject.simulcast.list1 = n
                .map((e) =>
                  e.map((e) => `${e.paused ? "~" : ""}${e.scid}`).join(",")
                )
                .join(";");
            }
          };
          function d(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i").exec(e.mimeType);
            if (!t) throw new TypeError("invalid codec.mimeType");
            return t[2];
          }
          t.OfferMediaSection = class extends c {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: n,
              plainRtpParameters: s,
              planB: i = !1,
              mid: a,
              kind: o,
              offerRtpParameters: c,
              streamId: l,
              trackId: u,
              oldDataChannelSpec: p = !1,
            }) {
              switch (
                (super({
                  iceParameters: e,
                  iceCandidates: t,
                  dtlsParameters: r,
                  planB: i,
                }),
                (this._mediaObject.mid = String(a)),
                (this._mediaObject.type = o),
                s
                  ? ((this._mediaObject.connection = {
                      ip: s.ip,
                      version: s.ipVersion,
                    }),
                    (this._mediaObject.protocol = "RTP/AVP"),
                    (this._mediaObject.port = s.port))
                  : ((this._mediaObject.connection = {
                      ip: "127.0.0.1",
                      version: 4,
                    }),
                    (this._mediaObject.protocol = n
                      ? "UDP/DTLS/SCTP"
                      : "UDP/TLS/RTP/SAVPF"),
                    (this._mediaObject.port = 7)),
                o)
              ) {
                case "audio":
                case "video": {
                  (this._mediaObject.direction = "sendonly"),
                    (this._mediaObject.rtp = []),
                    (this._mediaObject.rtcpFb = []),
                    (this._mediaObject.fmtp = []),
                    this._planB ||
                      (this._mediaObject.msid = `${l || "-"} ${u}`);
                  for (const e of c.codecs) {
                    const t = {
                      payload: e.payloadType,
                      codec: d(e),
                      rate: e.clockRate,
                    };
                    e.channels > 1 && (t.encoding = e.channels),
                      this._mediaObject.rtp.push(t);
                    const r = { payload: e.payloadType, config: "" };
                    for (const t of Object.keys(e.parameters))
                      r.config && (r.config += ";"),
                        (r.config += `${t}=${e.parameters[t]}`);
                    r.config && this._mediaObject.fmtp.push(r);
                    for (const t of e.rtcpFeedback)
                      this._mediaObject.rtcpFb.push({
                        payload: e.payloadType,
                        type: t.type,
                        subtype: t.parameter,
                      });
                  }
                  (this._mediaObject.payloads = c.codecs
                    .map((e) => e.payloadType)
                    .join(" ")),
                    (this._mediaObject.ext = []);
                  for (const e of c.headerExtensions)
                    this._mediaObject.ext.push({ uri: e.uri, value: e.id });
                  (this._mediaObject.rtcpMux = "rtcp-mux"),
                    (this._mediaObject.rtcpRsize = "rtcp-rsize");
                  const e = c.encodings[0],
                    t = e.ssrc,
                    r = e.rtx && e.rtx.ssrc ? e.rtx.ssrc : void 0;
                  (this._mediaObject.ssrcs = []),
                    (this._mediaObject.ssrcGroups = []),
                    c.rtcp.cname &&
                      this._mediaObject.ssrcs.push({
                        id: t,
                        attribute: "cname",
                        value: c.rtcp.cname,
                      }),
                    this._planB &&
                      this._mediaObject.ssrcs.push({
                        id: t,
                        attribute: "msid",
                        value: `${l || "-"} ${u}`,
                      }),
                    r &&
                      (c.rtcp.cname &&
                        this._mediaObject.ssrcs.push({
                          id: r,
                          attribute: "cname",
                          value: c.rtcp.cname,
                        }),
                      this._planB &&
                        this._mediaObject.ssrcs.push({
                          id: r,
                          attribute: "msid",
                          value: `${l || "-"} ${u}`,
                        }),
                      this._mediaObject.ssrcGroups.push({
                        semantics: "FID",
                        ssrcs: `${t} ${r}`,
                      }));
                  break;
                }
                case "application":
                  p
                    ? ((this._mediaObject.payloads = n.port),
                      (this._mediaObject.sctpmap = {
                        app: "webrtc-datachannel",
                        sctpmapNumber: n.port,
                        maxMessageSize: n.maxMessageSize,
                      }))
                    : ((this._mediaObject.payloads = "webrtc-datachannel"),
                      (this._mediaObject.sctpPort = n.port),
                      (this._mediaObject.maxMessageSize = n.maxMessageSize));
              }
            }
            setDtlsRole(e) {
              this._mediaObject.setup = "actpass";
            }
            resume() {
              this._mediaObject.direction = "sendonly";
            }
            planBReceive({ offerRtpParameters: e, streamId: t, trackId: r }) {
              const n = e.encodings[0],
                s = n.ssrc,
                i = n.rtx && n.rtx.ssrc ? n.rtx.ssrc : void 0,
                a = this._mediaObject.payloads.split(" ");
              for (const t of e.codecs) {
                if (a.includes(String(t.payloadType))) continue;
                const e = {
                  payload: t.payloadType,
                  codec: d(t),
                  rate: t.clockRate,
                };
                t.channels > 1 && (e.encoding = t.channels),
                  this._mediaObject.rtp.push(e);
                const r = { payload: t.payloadType, config: "" };
                for (const e of Object.keys(t.parameters))
                  r.config && (r.config += ";"),
                    (r.config += `${e}=${t.parameters[e]}`);
                r.config && this._mediaObject.fmtp.push(r);
                for (const e of t.rtcpFeedback)
                  this._mediaObject.rtcpFb.push({
                    payload: t.payloadType,
                    type: e.type,
                    subtype: e.parameter,
                  });
              }
              (this._mediaObject.payloads += ` ${e.codecs
                .filter(
                  (e) => !this._mediaObject.payloads.includes(e.payloadType)
                )
                .map((e) => e.payloadType)
                .join(" ")}`),
                (this._mediaObject.payloads =
                  this._mediaObject.payloads.trim()),
                e.rtcp.cname &&
                  this._mediaObject.ssrcs.push({
                    id: s,
                    attribute: "cname",
                    value: e.rtcp.cname,
                  }),
                this._mediaObject.ssrcs.push({
                  id: s,
                  attribute: "msid",
                  value: `${t || "-"} ${r}`,
                }),
                i &&
                  (e.rtcp.cname &&
                    this._mediaObject.ssrcs.push({
                      id: i,
                      attribute: "cname",
                      value: e.rtcp.cname,
                    }),
                  this._mediaObject.ssrcs.push({
                    id: i,
                    attribute: "msid",
                    value: `${t || "-"} ${r}`,
                  }),
                  this._mediaObject.ssrcGroups.push({
                    semantics: "FID",
                    ssrcs: `${s} ${i}`,
                  }));
            }
            planBStopReceiving({ offerRtpParameters: e }) {
              const t = e.encodings[0],
                r = t.ssrc,
                n = t.rtx && t.rtx.ssrc ? t.rtx.ssrc : void 0;
              (this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(
                (e) => e.id !== r && e.id !== n
              )),
                n &&
                  (this._mediaObject.ssrcGroups =
                    this._mediaObject.ssrcGroups.filter(
                      (e) => e.ssrcs !== `${r} ${n}`
                    ));
            }
          };
        },
        3518: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Consumer = void 0);
          const n = r(2994),
            s = r(2010),
            i = r(4893),
            a = new n.Logger("Consumer");
          class o extends s.EnhancedEventEmitter {
            constructor({
              id: e,
              localId: t,
              producerId: r,
              rtpReceiver: n,
              track: i,
              rtpParameters: o,
              appData: c,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new s.EnhancedEventEmitter()),
                a.debug("constructor()"),
                (this._id = e),
                (this._localId = t),
                (this._producerId = r),
                (this._rtpReceiver = n),
                (this._track = i),
                (this._rtpParameters = o),
                (this._paused = !i.enabled),
                (this._appData = c || {}),
                (this.onTrackEnded = this.onTrackEnded.bind(this)),
                this.handleTrack();
            }
            get id() {
              return this._id;
            }
            get localId() {
              return this._localId;
            }
            get producerId() {
              return this._producerId;
            }
            get closed() {
              return this._closed;
            }
            get kind() {
              return this._track.kind;
            }
            get rtpReceiver() {
              return this._rtpReceiver;
            }
            get track() {
              return this._track;
            }
            get rtpParameters() {
              return this._rtpParameters;
            }
            get paused() {
              return this._paused;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (a.debug("close()"),
                (this._closed = !0),
                this.destroyTrack(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (a.debug("transportClosed()"),
                (this._closed = !0),
                this.destroyTrack(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            async getStats() {
              if (this._closed) throw new i.InvalidStateError("closed");
              return new Promise((e, t) => {
                this.safeEmit("@getstats", e, t);
              });
            }
            pause() {
              a.debug("pause()"),
                this._closed
                  ? a.error("pause() | Consumer closed")
                  : this._paused
                  ? a.debug("pause() | Consumer is already paused")
                  : ((this._paused = !0),
                    (this._track.enabled = !1),
                    this.emit("@pause"),
                    this._observer.safeEmit("pause"));
            }
            resume() {
              a.debug("resume()"),
                this._closed
                  ? a.error("resume() | Consumer closed")
                  : this._paused
                  ? ((this._paused = !1),
                    (this._track.enabled = !0),
                    this.emit("@resume"),
                    this._observer.safeEmit("resume"))
                  : a.debug("resume() | Consumer is already resumed");
            }
            onTrackEnded() {
              a.debug('track "ended" event'),
                this.safeEmit("trackended"),
                this._observer.safeEmit("trackended");
            }
            handleTrack() {
              this._track.addEventListener("ended", this.onTrackEnded);
            }
            destroyTrack() {
              try {
                this._track.removeEventListener("ended", this.onTrackEnded),
                  this._track.stop();
              } catch (e) {}
            }
          }
          t.Consumer = o;
        },
        3582: function (e, t, r) {
          "use strict";
          var n =
            (this && this.__importDefault) ||
            function (e) {
              return e && e.__esModule ? e : { default: e };
            };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Logger = void 0);
          const s = n(r(7833)),
            i = "h264-profile-level-id";
          t.Logger = class {
            constructor(e) {
              e
                ? ((this._debug = (0, s.default)(`${i}:${e}`)),
                  (this._warn = (0, s.default)(`${i}:WARN:${e}`)),
                  (this._error = (0, s.default)(`${i}:ERROR:${e}`)))
                : ((this._debug = (0, s.default)(i)),
                  (this._warn = (0, s.default)(`${i}:WARN`)),
                  (this._error = (0, s.default)(`${i}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        3662: (e, t, r) => {
          "use strict";
          function n(e, t) {
            return (
              (n = Object.setPrototypeOf
                ? Object.setPrototypeOf.bind()
                : function (e, t) {
                    return (e.__proto__ = t), e;
                  }),
              n(e, t)
            );
          }
          r.d(t, { A: () => n });
        },
        3738: (e) => {
          function t(r) {
            return (
              (e.exports = t =
                "function" == typeof Symbol &&
                "symbol" == typeof Symbol.iterator
                  ? function (e) {
                      return typeof e;
                    }
                  : function (e) {
                      return e &&
                        "function" == typeof Symbol &&
                        e.constructor === Symbol &&
                        e !== Symbol.prototype
                        ? "symbol"
                        : typeof e;
                    }),
              (e.exports.__esModule = !0),
              (e.exports.default = e.exports),
              t(r)
            );
          }
          (e.exports = t),
            (e.exports.__esModule = !0),
            (e.exports.default = e.exports);
        },
        3797: function (e, t, r) {
          var n, s, i;
          e.exports =
            ((i = r(9021)),
            r(7165),
            (i.mode.OFB =
              ((n = i.lib.BlockCipherMode.extend()),
              (s = n.Encryptor =
                n.extend({
                  processBlock: function (e, t) {
                    var r = this._cipher,
                      n = r.blockSize,
                      s = this._iv,
                      i = this._keystream;
                    s &&
                      ((i = this._keystream = s.slice(0)), (this._iv = void 0)),
                      r.encryptBlock(i, 0);
                    for (var a = 0; a < n; a++) e[t + a] ^= i[a];
                  },
                })),
              (n.Decryptor = s),
              n)),
            i.mode.OFB);
        },
        3804: (e, t, r) => {
          var n = r(5602),
            s = /%[sdv%]/g,
            i = function (e) {
              var t = 1,
                r = arguments,
                n = r.length;
              return e.replace(s, function (e) {
                if (t >= n) return e;
                var s = r[t];
                switch (((t += 1), e)) {
                  case "%%":
                    return "%";
                  case "%s":
                    return String(s);
                  case "%d":
                    return Number(s);
                  case "%v":
                    return "";
                }
              });
            },
            a = function (e, t, r) {
              var n = [
                e +
                  "=" +
                  (t.format instanceof Function
                    ? t.format(t.push ? r : r[t.name])
                    : t.format),
              ];
              if (t.names)
                for (var s = 0; s < t.names.length; s += 1) {
                  var a = t.names[s];
                  t.name ? n.push(r[t.name][a]) : n.push(r[t.names[s]]);
                }
              else n.push(r[t.name]);
              return i.apply(null, n);
            },
            o = [
              "v",
              "o",
              "s",
              "i",
              "u",
              "e",
              "p",
              "c",
              "b",
              "t",
              "r",
              "z",
              "a",
            ],
            c = ["i", "c", "b", "a"];
          e.exports = function (e, t) {
            (t = t || {}),
              null == e.version && (e.version = 0),
              null == e.name && (e.name = " "),
              e.media.forEach(function (e) {
                null == e.payloads && (e.payloads = "");
              });
            var r = t.outerOrder || o,
              s = t.innerOrder || c,
              i = [];
            return (
              r.forEach(function (t) {
                n[t].forEach(function (r) {
                  r.name in e && null != e[r.name]
                    ? i.push(a(t, r, e))
                    : r.push in e &&
                      null != e[r.push] &&
                      e[r.push].forEach(function (e) {
                        i.push(a(t, r, e));
                      });
                });
              }),
              e.media.forEach(function (e) {
                i.push(a("m", n.m[0], e)),
                  s.forEach(function (t) {
                    n[t].forEach(function (r) {
                      r.name in e && null != e[r.name]
                        ? i.push(a(t, r, e))
                        : r.push in e &&
                          null != e[r.push] &&
                          e[r.push].forEach(function (e) {
                            i.push(a(t, r, e));
                          });
                    });
                  });
              }),
              i.join("\r\n") + "\r\n"
            );
          };
        },
        3954: (e, t, r) => {
          "use strict";
          function n(e) {
            return (
              (n = Object.setPrototypeOf
                ? Object.getPrototypeOf.bind()
                : function (e) {
                    return e.__proto__ || Object.getPrototypeOf(e);
                  }),
              n(e)
            );
          }
          r.d(t, { A: () => n });
        },
        4039: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.ReactNativeUnifiedPlan = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = i(r(1765)),
            d = i(r(8046)),
            l = i(r(5544)),
            u = i(r(5938)),
            p = i(r(4256)),
            h = r(4893),
            m = r(521),
            f = r(1305),
            g = r(3303),
            v = new o.Logger("ReactNativeUnifiedPlan"),
            _ = { OS: 1024, MIS: 1024 };
          class y extends m.HandlerInterface {
            static createFactory() {
              return () => new y();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "ReactNativeUnifiedPlan";
            }
            close() {
              if ((v.debug("close()"), !this._closed)) {
                if (
                  ((this._closed = !0), this._sendStream.release(!1), this._pc)
                )
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              v.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = a.parse(t.sdp),
                  n = l.extractRtpCapabilities({ sdpObject: r });
                return p.addNackSuppportForOpus(n), n;
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return v.debug("getNativeSctpCapabilities()"), { numStreams: _ };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              this.assertNotClosed(),
                v.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (v.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              this.assertNotClosed(), v.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                v.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  v.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  v.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  t.length > 1 &&
                  t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  });
              const s = c.clone(this._sendingRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, n);
              const i = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                p = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                });
              let h,
                m = await this._pc.createOffer(),
                f = a.parse(m.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f,
                }));
              let _ = !1;
              const y = (0, g.parse)((t || [{}])[0].scalabilityMode);
              t &&
                1 === t.length &&
                y.spatialLayers > 1 &&
                "video/vp9" === s.codecs[0].mimeType.toLowerCase() &&
                (v.debug("send() | enabling legacy simulcast for VP9 SVC"),
                (_ = !0),
                (f = a.parse(m.sdp)),
                (h = f.media[o.idx]),
                u.addLegacySimulcast({
                  offerMediaObject: h,
                  numStreams: y.spatialLayers,
                }),
                (m = { type: "offer", sdp: a.write(f) })),
                v.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m
                ),
                await this._pc.setLocalDescription(m);
              let b = p.mid ?? void 0;
              if (
                (b ||
                  v.warn(
                    "send() | missing transceiver.mid (bug in react-native-webrtc, using a workaround"
                  ),
                (s.mid = b),
                (f = a.parse(this._pc.localDescription.sdp)),
                (h = f.media[o.idx]),
                (s.rtcp.cname = l.getCname({ offerMediaObject: h })),
                t)
              )
                if (1 === t.length) {
                  let e = u.getRtpEncodings({ offerMediaObject: h });
                  Object.assign(e[0], t[0]),
                    _ && (e = [e[0]]),
                    (s.encodings = e);
                } else s.encodings = t;
              else s.encodings = u.getRtpEncodings({ offerMediaObject: h });
              if (
                s.encodings.length > 1 &&
                ("video/vp8" === s.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === s.codecs[0].mimeType.toLowerCase())
              )
                for (const e of s.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${y.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: h,
                reuseMid: o.reuseMid,
                offerRtpParameters: s,
                answerRtpParameters: i,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                v.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ),
                await this._pc.setRemoteDescription(w),
                b || ((b = p.mid), (s.mid = b)),
                this._mapMidTransceiver.set(b, p),
                { localId: b, rtpParameters: s, rtpSender: p.sender }
              );
            }
            async stopSending(e) {
              if ((this.assertSendDirection(), this._closed)) return;
              v.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              v.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              v.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if ((this._remoteSdp.resumeSendingMediaSection(e), !t))
                throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "sendonly";
              const r = await this._pc.createOffer();
              v.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? v.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : v.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              v.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              v.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              v.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % _.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  v.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: n,
                  rtpParameters: s,
                  streamId: i,
                } = t;
                v.debug("receive() [trackId:%s, kind:%s]", e, n);
                const a = s.mid || String(this._mapMidTransceiver.size);
                r.set(e, a),
                  this._remoteSdp.receive({
                    mid: a,
                    kind: n,
                    offerRtpParameters: s,
                    streamId: i || s.rtcp.cname,
                    trackId: e,
                  });
              }
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              let s = await this._pc.createAnswer();
              const i = a.parse(s.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: n } = t,
                  s = r.get(e),
                  a = i.media.find((e) => String(e.mid) === s);
                l.applyCodecParameters({
                  offerRtpParameters: n,
                  answerMediaObject: a,
                });
              }
              (s = { type: "answer", sdp: a.write(i) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: i,
                  })),
                v.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s);
              for (const n of e) {
                const { trackId: e } = n,
                  s = r.get(e),
                  i = this._pc.getTransceivers().find((e) => e.mid === s);
                if (!i) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(s, i),
                  t.push({
                    localId: s,
                    track: i.receiver.track,
                    rtpReceiver: i.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                v.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                v.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                v.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              v.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                v.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new h.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.ReactNativeUnifiedPlan = y;
        },
        4160: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 });
        },
        4253: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.AwaitQueueRemovedTaskError = t.AwaitQueueStoppedError = void 0);
          class r extends Error {
            constructor(e) {
              super(e ?? "queue stopped"),
                (this.name = "AwaitQueueStoppedError"),
                "function" == typeof Error.captureStackTrace &&
                  Error.captureStackTrace(this, r);
            }
          }
          t.AwaitQueueStoppedError = r;
          class n extends Error {
            constructor(e) {
              super(e ?? "queue task removed"),
                (this.name = "AwaitQueueRemovedTaskError"),
                "function" == typeof Error.captureStackTrace &&
                  Error.captureStackTrace(this, n);
            }
          }
          t.AwaitQueueRemovedTaskError = n;
        },
        4256: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addNackSuppportForOpus = void 0),
            (t.addNackSuppportForOpus = function (e) {
              for (const t of e.codecs || [])
                ("audio/opus" !== t.mimeType.toLowerCase() &&
                  "audio/multiopus" !== t.mimeType.toLowerCase()) ||
                  t.rtcpFeedback?.some(
                    (e) => "nack" === e.type && !e.parameter
                  ) ||
                  (t.rtcpFeedback || (t.rtcpFeedback = []),
                  t.rtcpFeedback.push({ type: "nack" }));
            });
        },
        4467: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => s });
          var n = r(816);
          function s(e, t, r) {
            return (
              (t = (0, n.A)(t)) in e
                ? Object.defineProperty(e, t, {
                    value: r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (e[t] = r),
              e
            );
          }
        },
        4496: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addLegacySimulcast = t.getRtpEncodings = void 0),
            (t.getRtpEncodings = function ({ offerMediaObject: e, track: t }) {
              let r;
              const n = new Set();
              for (const s of e.ssrcs || []) {
                if ("msid" !== s.attribute) continue;
                if (s.value.split(" ")[1] === t.id) {
                  const e = s.id;
                  n.add(e), r || (r = e);
                }
              }
              if (0 === n.size)
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t.id}]`
                );
              const s = new Map();
              for (const t of e.ssrcGroups || []) {
                if ("FID" !== t.semantics) continue;
                let [e, r] = t.ssrcs.split(/\s+/);
                (e = Number(e)),
                  (r = Number(r)),
                  n.has(e) && (n.delete(e), n.delete(r), s.set(e, r));
              }
              for (const e of n) s.set(e, null);
              const i = [];
              for (const [e, t] of s) {
                const r = { ssrc: e };
                t && (r.rtx = { ssrc: t }), i.push(r);
              }
              return i;
            }),
            (t.addLegacySimulcast = function ({
              offerMediaObject: e,
              track: t,
              numStreams: r,
            }) {
              if (r <= 1)
                throw new TypeError("numStreams must be greater than 1");
              let n, s, i;
              if (
                !(e.ssrcs || []).find((e) => {
                  if ("msid" !== e.attribute) return !1;
                  return (
                    e.value.split(" ")[1] === t.id &&
                    ((n = e.id), (i = e.value.split(" ")[0]), !0)
                  );
                })
              )
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t.id}]`
                );
              (e.ssrcGroups || []).some((e) => {
                if ("FID" !== e.semantics) return !1;
                const t = e.ssrcs.split(/\s+/);
                return Number(t[0]) === n && ((s = Number(t[1])), !0);
              });
              const a = e.ssrcs.find(
                (e) => "cname" === e.attribute && e.id === n
              );
              if (!a)
                throw new Error(
                  `a=ssrc line with cname information not found [track.id:${t.id}]`
                );
              const o = a.value,
                c = [],
                d = [];
              for (let e = 0; e < r; ++e) c.push(n + e), s && d.push(s + e);
              (e.ssrcGroups = e.ssrcGroups || []),
                (e.ssrcs = e.ssrcs || []),
                e.ssrcGroups.push({ semantics: "SIM", ssrcs: c.join(" ") });
              for (let r = 0; r < c.length; ++r) {
                const n = c[r];
                e.ssrcs.push({ id: n, attribute: "cname", value: o }),
                  e.ssrcs.push({
                    id: n,
                    attribute: "msid",
                    value: `${i} ${t.id}`,
                  });
              }
              for (let r = 0; r < d.length; ++r) {
                const n = c[r],
                  s = d[r];
                e.ssrcs.push({ id: s, attribute: "cname", value: o }),
                  e.ssrcs.push({
                    id: s,
                    attribute: "msid",
                    value: `${i} ${t.id}`,
                  }),
                  e.ssrcGroups.push({ semantics: "FID", ssrcs: `${n} ${s}` });
              }
            });
        },
        4633: (e, t, r) => {
          var n = r(3738).default;
          function s() {
            "use strict";
            (e.exports = s =
              function () {
                return r;
              }),
              (e.exports.__esModule = !0),
              (e.exports.default = e.exports);
            var t,
              r = {},
              i = Object.prototype,
              a = i.hasOwnProperty,
              o = "function" == typeof Symbol ? Symbol : {},
              c = o.iterator || "@@iterator",
              d = o.asyncIterator || "@@asyncIterator",
              l = o.toStringTag || "@@toStringTag";
            function u(e, t, r, n) {
              return Object.defineProperty(e, t, {
                value: r,
                enumerable: !n,
                configurable: !n,
                writable: !n,
              });
            }
            try {
              u({}, "");
            } catch (t) {
              u = function (e, t, r) {
                return (e[t] = r);
              };
            }
            function p(e, r, n, s) {
              var i = r && r.prototype instanceof f ? r : f,
                a = Object.create(i.prototype);
              return (
                u(
                  a,
                  "_invoke",
                  (function (e, r, n) {
                    var s = 1;
                    return function (i, a) {
                      if (3 === s) throw Error("Generator is already running");
                      if (4 === s) {
                        if ("throw" === i) throw a;
                        return { value: t, done: !0 };
                      }
                      for (n.method = i, n.arg = a; ; ) {
                        var o = n.delegate;
                        if (o) {
                          var c = k(o, n);
                          if (c) {
                            if (c === m) continue;
                            return c;
                          }
                        }
                        if ("next" === n.method) n.sent = n._sent = n.arg;
                        else if ("throw" === n.method) {
                          if (1 === s) throw ((s = 4), n.arg);
                          n.dispatchException(n.arg);
                        } else
                          "return" === n.method && n.abrupt("return", n.arg);
                        s = 3;
                        var d = h(e, r, n);
                        if ("normal" === d.type) {
                          if (((s = n.done ? 4 : 2), d.arg === m)) continue;
                          return { value: d.arg, done: n.done };
                        }
                        "throw" === d.type &&
                          ((s = 4), (n.method = "throw"), (n.arg = d.arg));
                      }
                    };
                  })(e, n, new T(s || [])),
                  !0
                ),
                a
              );
            }
            function h(e, t, r) {
              try {
                return { type: "normal", arg: e.call(t, r) };
              } catch (e) {
                return { type: "throw", arg: e };
              }
            }
            r.wrap = p;
            var m = {};
            function f() {}
            function g() {}
            function v() {}
            var _ = {};
            u(_, c, function () {
              return this;
            });
            var y = Object.getPrototypeOf,
              b = y && y(y(P([])));
            b && b !== i && a.call(b, c) && (_ = b);
            var w = (v.prototype = f.prototype = Object.create(_));
            function S(e) {
              ["next", "throw", "return"].forEach(function (t) {
                u(e, t, function (e) {
                  return this._invoke(t, e);
                });
              });
            }
            function R(e, t) {
              function r(s, i, o, c) {
                var d = h(e[s], e, i);
                if ("throw" !== d.type) {
                  var l = d.arg,
                    u = l.value;
                  return u && "object" == n(u) && a.call(u, "__await")
                    ? t.resolve(u.__await).then(
                        function (e) {
                          r("next", e, o, c);
                        },
                        function (e) {
                          r("throw", e, o, c);
                        }
                      )
                    : t.resolve(u).then(
                        function (e) {
                          (l.value = e), o(l);
                        },
                        function (e) {
                          return r("throw", e, o, c);
                        }
                      );
                }
                c(d.arg);
              }
              var s;
              u(
                this,
                "_invoke",
                function (e, n) {
                  function i() {
                    return new t(function (t, s) {
                      r(e, n, t, s);
                    });
                  }
                  return (s = s ? s.then(i, i) : i());
                },
                !0
              );
            }
            function k(e, r) {
              var n = r.method,
                s = e.i[n];
              if (s === t)
                return (
                  (r.delegate = null),
                  ("throw" === n &&
                    e.i.return &&
                    ((r.method = "return"),
                    (r.arg = t),
                    k(e, r),
                    "throw" === r.method)) ||
                    ("return" !== n &&
                      ((r.method = "throw"),
                      (r.arg = new TypeError(
                        "The iterator does not provide a '" + n + "' method"
                      )))),
                  m
                );
              var i = h(s, e.i, r.arg);
              if ("throw" === i.type)
                return (
                  (r.method = "throw"), (r.arg = i.arg), (r.delegate = null), m
                );
              var a = i.arg;
              return a
                ? a.done
                  ? ((r[e.r] = a.value),
                    (r.next = e.n),
                    "return" !== r.method && ((r.method = "next"), (r.arg = t)),
                    (r.delegate = null),
                    m)
                  : a
                : ((r.method = "throw"),
                  (r.arg = new TypeError("iterator result is not an object")),
                  (r.delegate = null),
                  m);
            }
            function E(e) {
              this.tryEntries.push(e);
            }
            function C(e) {
              var r = e[4] || {};
              (r.type = "normal"), (r.arg = t), (e[4] = r);
            }
            function T(e) {
              (this.tryEntries = [[-1]]), e.forEach(E, this), this.reset(!0);
            }
            function P(e) {
              if (null != e) {
                var r = e[c];
                if (r) return r.call(e);
                if ("function" == typeof e.next) return e;
                if (!isNaN(e.length)) {
                  var s = -1,
                    i = function r() {
                      for (; ++s < e.length; )
                        if (a.call(e, s))
                          return (r.value = e[s]), (r.done = !1), r;
                      return (r.value = t), (r.done = !0), r;
                    };
                  return (i.next = i);
                }
              }
              throw new TypeError(n(e) + " is not iterable");
            }
            return (
              (g.prototype = v),
              u(w, "constructor", v),
              u(v, "constructor", g),
              (g.displayName = u(v, l, "GeneratorFunction")),
              (r.isGeneratorFunction = function (e) {
                var t = "function" == typeof e && e.constructor;
                return (
                  !!t &&
                  (t === g || "GeneratorFunction" === (t.displayName || t.name))
                );
              }),
              (r.mark = function (e) {
                return (
                  Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, v)
                    : ((e.__proto__ = v), u(e, l, "GeneratorFunction")),
                  (e.prototype = Object.create(w)),
                  e
                );
              }),
              (r.awrap = function (e) {
                return { __await: e };
              }),
              S(R.prototype),
              u(R.prototype, d, function () {
                return this;
              }),
              (r.AsyncIterator = R),
              (r.async = function (e, t, n, s, i) {
                void 0 === i && (i = Promise);
                var a = new R(p(e, t, n, s), i);
                return r.isGeneratorFunction(t)
                  ? a
                  : a.next().then(function (e) {
                      return e.done ? e.value : a.next();
                    });
              }),
              S(w),
              u(w, l, "Generator"),
              u(w, c, function () {
                return this;
              }),
              u(w, "toString", function () {
                return "[object Generator]";
              }),
              (r.keys = function (e) {
                var t = Object(e),
                  r = [];
                for (var n in t) r.unshift(n);
                return function e() {
                  for (; r.length; )
                    if ((n = r.pop()) in t)
                      return (e.value = n), (e.done = !1), e;
                  return (e.done = !0), e;
                };
              }),
              (r.values = P),
              (T.prototype = {
                constructor: T,
                reset: function (e) {
                  if (
                    ((this.prev = this.next = 0),
                    (this.sent = this._sent = t),
                    (this.done = !1),
                    (this.delegate = null),
                    (this.method = "next"),
                    (this.arg = t),
                    this.tryEntries.forEach(C),
                    !e)
                  )
                    for (var r in this)
                      "t" === r.charAt(0) &&
                        a.call(this, r) &&
                        !isNaN(+r.slice(1)) &&
                        (this[r] = t);
                },
                stop: function () {
                  this.done = !0;
                  var e = this.tryEntries[0][4];
                  if ("throw" === e.type) throw e.arg;
                  return this.rval;
                },
                dispatchException: function (e) {
                  if (this.done) throw e;
                  var r = this;
                  function n(t) {
                    (a.type = "throw"), (a.arg = e), (r.next = t);
                  }
                  for (var s = r.tryEntries.length - 1; s >= 0; --s) {
                    var i = this.tryEntries[s],
                      a = i[4],
                      o = this.prev,
                      c = i[1],
                      d = i[2];
                    if (-1 === i[0]) return n("end"), !1;
                    if (!c && !d)
                      throw Error("try statement without catch or finally");
                    if (null != i[0] && i[0] <= o) {
                      if (o < c)
                        return (this.method = "next"), (this.arg = t), n(c), !0;
                      if (o < d) return n(d), !1;
                    }
                  }
                },
                abrupt: function (e, t) {
                  for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                    var n = this.tryEntries[r];
                    if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) {
                      var s = n;
                      break;
                    }
                  }
                  s &&
                    ("break" === e || "continue" === e) &&
                    s[0] <= t &&
                    t <= s[2] &&
                    (s = null);
                  var i = s ? s[4] : {};
                  return (
                    (i.type = e),
                    (i.arg = t),
                    s
                      ? ((this.method = "next"), (this.next = s[2]), m)
                      : this.complete(i)
                  );
                },
                complete: function (e, t) {
                  if ("throw" === e.type) throw e.arg;
                  return (
                    "break" === e.type || "continue" === e.type
                      ? (this.next = e.arg)
                      : "return" === e.type
                      ? ((this.rval = this.arg = e.arg),
                        (this.method = "return"),
                        (this.next = "end"))
                      : "normal" === e.type && t && (this.next = t),
                    m
                  );
                },
                finish: function (e) {
                  for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var r = this.tryEntries[t];
                    if (r[2] === e) return this.complete(r[4], r[3]), C(r), m;
                  }
                },
                catch: function (e) {
                  for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var r = this.tryEntries[t];
                    if (r[0] === e) {
                      var n = r[4];
                      if ("throw" === n.type) {
                        var s = n.arg;
                        C(r);
                      }
                      return s;
                    }
                  }
                  throw Error("illegal catch attempt");
                },
                delegateYield: function (e, r, n) {
                  return (
                    (this.delegate = { i: P(e), r, n }),
                    "next" === this.method && (this.arg = t),
                    m
                  );
                },
              }),
              r
            );
          }
          (e.exports = s),
            (e.exports.__esModule = !0),
            (e.exports.default = e.exports);
        },
        4636: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            (function (e) {
              var t = n,
                r = t.lib,
                s = r.WordArray,
                i = r.Hasher,
                a = t.algo,
                o = [];
              !(function () {
                for (var t = 0; t < 64; t++)
                  o[t] = (4294967296 * e.abs(e.sin(t + 1))) | 0;
              })();
              var c = (a.MD5 = i.extend({
                _doReset: function () {
                  this._hash = new s.init([
                    1732584193, 4023233417, 2562383102, 271733878,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (var r = 0; r < 16; r++) {
                    var n = t + r,
                      s = e[n];
                    e[n] =
                      (16711935 & ((s << 8) | (s >>> 24))) |
                      (4278255360 & ((s << 24) | (s >>> 8)));
                  }
                  var i = this._hash.words,
                    a = e[t + 0],
                    c = e[t + 1],
                    h = e[t + 2],
                    m = e[t + 3],
                    f = e[t + 4],
                    g = e[t + 5],
                    v = e[t + 6],
                    _ = e[t + 7],
                    y = e[t + 8],
                    b = e[t + 9],
                    w = e[t + 10],
                    S = e[t + 11],
                    R = e[t + 12],
                    k = e[t + 13],
                    E = e[t + 14],
                    C = e[t + 15],
                    T = i[0],
                    P = i[1],
                    O = i[2],
                    x = i[3];
                  (T = d(T, P, O, x, a, 7, o[0])),
                    (x = d(x, T, P, O, c, 12, o[1])),
                    (O = d(O, x, T, P, h, 17, o[2])),
                    (P = d(P, O, x, T, m, 22, o[3])),
                    (T = d(T, P, O, x, f, 7, o[4])),
                    (x = d(x, T, P, O, g, 12, o[5])),
                    (O = d(O, x, T, P, v, 17, o[6])),
                    (P = d(P, O, x, T, _, 22, o[7])),
                    (T = d(T, P, O, x, y, 7, o[8])),
                    (x = d(x, T, P, O, b, 12, o[9])),
                    (O = d(O, x, T, P, w, 17, o[10])),
                    (P = d(P, O, x, T, S, 22, o[11])),
                    (T = d(T, P, O, x, R, 7, o[12])),
                    (x = d(x, T, P, O, k, 12, o[13])),
                    (O = d(O, x, T, P, E, 17, o[14])),
                    (T = l(
                      T,
                      (P = d(P, O, x, T, C, 22, o[15])),
                      O,
                      x,
                      c,
                      5,
                      o[16]
                    )),
                    (x = l(x, T, P, O, v, 9, o[17])),
                    (O = l(O, x, T, P, S, 14, o[18])),
                    (P = l(P, O, x, T, a, 20, o[19])),
                    (T = l(T, P, O, x, g, 5, o[20])),
                    (x = l(x, T, P, O, w, 9, o[21])),
                    (O = l(O, x, T, P, C, 14, o[22])),
                    (P = l(P, O, x, T, f, 20, o[23])),
                    (T = l(T, P, O, x, b, 5, o[24])),
                    (x = l(x, T, P, O, E, 9, o[25])),
                    (O = l(O, x, T, P, m, 14, o[26])),
                    (P = l(P, O, x, T, y, 20, o[27])),
                    (T = l(T, P, O, x, k, 5, o[28])),
                    (x = l(x, T, P, O, h, 9, o[29])),
                    (O = l(O, x, T, P, _, 14, o[30])),
                    (T = u(
                      T,
                      (P = l(P, O, x, T, R, 20, o[31])),
                      O,
                      x,
                      g,
                      4,
                      o[32]
                    )),
                    (x = u(x, T, P, O, y, 11, o[33])),
                    (O = u(O, x, T, P, S, 16, o[34])),
                    (P = u(P, O, x, T, E, 23, o[35])),
                    (T = u(T, P, O, x, c, 4, o[36])),
                    (x = u(x, T, P, O, f, 11, o[37])),
                    (O = u(O, x, T, P, _, 16, o[38])),
                    (P = u(P, O, x, T, w, 23, o[39])),
                    (T = u(T, P, O, x, k, 4, o[40])),
                    (x = u(x, T, P, O, a, 11, o[41])),
                    (O = u(O, x, T, P, m, 16, o[42])),
                    (P = u(P, O, x, T, v, 23, o[43])),
                    (T = u(T, P, O, x, b, 4, o[44])),
                    (x = u(x, T, P, O, R, 11, o[45])),
                    (O = u(O, x, T, P, C, 16, o[46])),
                    (T = p(
                      T,
                      (P = u(P, O, x, T, h, 23, o[47])),
                      O,
                      x,
                      a,
                      6,
                      o[48]
                    )),
                    (x = p(x, T, P, O, _, 10, o[49])),
                    (O = p(O, x, T, P, E, 15, o[50])),
                    (P = p(P, O, x, T, g, 21, o[51])),
                    (T = p(T, P, O, x, R, 6, o[52])),
                    (x = p(x, T, P, O, m, 10, o[53])),
                    (O = p(O, x, T, P, w, 15, o[54])),
                    (P = p(P, O, x, T, c, 21, o[55])),
                    (T = p(T, P, O, x, y, 6, o[56])),
                    (x = p(x, T, P, O, C, 10, o[57])),
                    (O = p(O, x, T, P, v, 15, o[58])),
                    (P = p(P, O, x, T, k, 21, o[59])),
                    (T = p(T, P, O, x, f, 6, o[60])),
                    (x = p(x, T, P, O, S, 10, o[61])),
                    (O = p(O, x, T, P, h, 15, o[62])),
                    (P = p(P, O, x, T, b, 21, o[63])),
                    (i[0] = (i[0] + T) | 0),
                    (i[1] = (i[1] + P) | 0),
                    (i[2] = (i[2] + O) | 0),
                    (i[3] = (i[3] + x) | 0);
                },
                _doFinalize: function () {
                  var t = this._data,
                    r = t.words,
                    n = 8 * this._nDataBytes,
                    s = 8 * t.sigBytes;
                  r[s >>> 5] |= 128 << (24 - (s % 32));
                  var i = e.floor(n / 4294967296),
                    a = n;
                  (r[15 + (((s + 64) >>> 9) << 4)] =
                    (16711935 & ((i << 8) | (i >>> 24))) |
                    (4278255360 & ((i << 24) | (i >>> 8)))),
                    (r[14 + (((s + 64) >>> 9) << 4)] =
                      (16711935 & ((a << 8) | (a >>> 24))) |
                      (4278255360 & ((a << 24) | (a >>> 8)))),
                    (t.sigBytes = 4 * (r.length + 1)),
                    this._process();
                  for (var o = this._hash, c = o.words, d = 0; d < 4; d++) {
                    var l = c[d];
                    c[d] =
                      (16711935 & ((l << 8) | (l >>> 24))) |
                      (4278255360 & ((l << 24) | (l >>> 8)));
                  }
                  return o;
                },
                clone: function () {
                  var e = i.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              }));
              function d(e, t, r, n, s, i, a) {
                var o = e + ((t & r) | (~t & n)) + s + a;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              function l(e, t, r, n, s, i, a) {
                var o = e + ((t & n) | (r & ~n)) + s + a;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              function u(e, t, r, n, s, i, a) {
                var o = e + (t ^ r ^ n) + s + a;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              function p(e, t, r, n, s, i, a) {
                var o = e + (r ^ (t | ~n)) + s + a;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              (t.MD5 = i._createHelper(c)),
                (t.HmacMD5 = i._createHmacHelper(c));
            })(Math),
            n.MD5);
        },
        4725: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            (function () {
              var e = n,
                t = e.lib.WordArray;
              function r(e, r, n) {
                for (var s = [], i = 0, a = 0; a < r; a++)
                  if (a % 4) {
                    var o =
                      (n[e.charCodeAt(a - 1)] << ((a % 4) * 2)) |
                      (n[e.charCodeAt(a)] >>> (6 - (a % 4) * 2));
                    (s[i >>> 2] |= o << (24 - (i % 4) * 8)), i++;
                  }
                return t.create(s, i);
              }
              e.enc.Base64url = {
                stringify: function (e, t) {
                  void 0 === t && (t = !0);
                  var r = e.words,
                    n = e.sigBytes,
                    s = t ? this._safe_map : this._map;
                  e.clamp();
                  for (var i = [], a = 0; a < n; a += 3)
                    for (
                      var o =
                          (((r[a >>> 2] >>> (24 - (a % 4) * 8)) & 255) << 16) |
                          (((r[(a + 1) >>> 2] >>> (24 - ((a + 1) % 4) * 8)) &
                            255) <<
                            8) |
                          ((r[(a + 2) >>> 2] >>> (24 - ((a + 2) % 4) * 8)) &
                            255),
                        c = 0;
                      c < 4 && a + 0.75 * c < n;
                      c++
                    )
                      i.push(s.charAt((o >>> (6 * (3 - c))) & 63));
                  var d = s.charAt(64);
                  if (d) for (; i.length % 4; ) i.push(d);
                  return i.join("");
                },
                parse: function (e, t) {
                  void 0 === t && (t = !0);
                  var n = e.length,
                    s = t ? this._safe_map : this._map,
                    i = this._reverseMap;
                  if (!i) {
                    i = this._reverseMap = [];
                    for (var a = 0; a < s.length; a++) i[s.charCodeAt(a)] = a;
                  }
                  var o = s.charAt(64);
                  if (o) {
                    var c = e.indexOf(o);
                    -1 !== c && (n = c);
                  }
                  return r(e, n, i);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                _safe_map:
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
              };
            })(),
            n.enc.Base64url);
        },
        4756: (e, t, r) => {
          var n = r(4633)();
          e.exports = n;
          try {
            regeneratorRuntime = n;
          } catch (e) {
            "object" == typeof globalThis
              ? (globalThis.regeneratorRuntime = n)
              : Function("r", "regeneratorRuntime = r")(n);
          }
        },
        4893: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.InvalidStateError = t.UnsupportedError = void 0);
          class r extends Error {
            constructor(e) {
              super(e),
                (this.name = "UnsupportedError"),
                Error.hasOwnProperty("captureStackTrace")
                  ? Error.captureStackTrace(this, r)
                  : (this.stack = new Error(e).stack);
            }
          }
          t.UnsupportedError = r;
          class n extends Error {
            constructor(e) {
              super(e),
                (this.name = "InvalidStateError"),
                Error.hasOwnProperty("captureStackTrace")
                  ? Error.captureStackTrace(this, n)
                  : (this.stack = new Error(e).stack);
            }
          }
          t.InvalidStateError = n;
        },
        4905: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(7165),
            (n.pad.Iso10126 = {
              pad: function (e, t) {
                var r = 4 * t,
                  s = r - (e.sigBytes % r);
                e.concat(n.lib.WordArray.random(s - 1)).concat(
                  n.lib.WordArray.create([s << 24], 1)
                );
              },
              unpad: function (e) {
                var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                e.sigBytes -= t;
              },
            }),
            n.pad.Iso10126);
        },
        4973: (e, t, r) => {
          "use strict";
          r.d(t, { Zu: () => o, lp: () => a });
          var n = r(467),
            s = r(4756),
            i = r.n(s),
            a =
              (r(9027),
              (function () {
                var e = (0, n.A)(
                  i().mark(function e(t) {
                    return i().wrap(function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            return (
                              void 0 === navigator.mediaDevices &&
                                (navigator.mediaDevices = {}),
                              void 0 === navigator.mediaDevices.getUserMedia &&
                                (navigator.mediaDevices.getUserMedia =
                                  function (e) {
                                    var t =
                                      navigator.webkitGetUserMedia ||
                                      navigator.mozGetUserMedia;
                                    return t
                                      ? new Promise(function (r, n) {
                                          t.call(navigator, e, r, n);
                                        })
                                      : Promise.reject(
                                          new Error(
                                            "getUserMedia is not implemented in this browser"
                                          )
                                        );
                                  }),
                              (e.next = 4),
                              navigator.mediaDevices.getUserMedia(t)
                            );
                          case 4:
                            return e.abrupt("return", e.sent);
                          case 5:
                          case "end":
                            return e.stop();
                        }
                    }, e);
                  })
                );
                return function (t) {
                  return e.apply(this, arguments);
                };
              })()),
            o = (function () {
              var e = (0, n.A)(
                i().mark(function e(t) {
                  return i().wrap(function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            void 0 === navigator.mediaDevices &&
                              (navigator.mediaDevices = {}),
                            void 0 === navigator.mediaDevices.getDisplayMedia &&
                              (navigator.mediaDevices.getDisplayMedia =
                                function (e) {
                                  var t =
                                    navigator.webkitGetDisplayMedia ||
                                    navigator.mozGetDisplayMedia;
                                  return t
                                    ? new Promise(function (r, n) {
                                        t.call(navigator, e, r, n);
                                      })
                                    : Promise.reject(
                                        new Error(
                                          "getDisplayMedia is not implemented in this browser"
                                        )
                                      );
                                }),
                            (e.next = 4),
                            navigator.mediaDevices.getDisplayMedia(t)
                          );
                        case 4:
                          return e.abrupt("return", e.sent);
                        case 5:
                        case "end":
                          return e.stop();
                      }
                  }, e);
                })
              );
              return function (t) {
                return e.apply(this, arguments);
              };
            })();
        },
        5020: (e, t, r) => {
          var n = function (e) {
              return String(Number(e)) === e ? Number(e) : e;
            },
            s = function (e, t, r) {
              var s = e.name && e.names;
              e.push && !t[e.push]
                ? (t[e.push] = [])
                : s && !t[e.name] && (t[e.name] = {});
              var i = e.push ? {} : s ? t[e.name] : t;
              !(function (e, t, r, s) {
                if (s && !r) t[s] = n(e[1]);
                else
                  for (var i = 0; i < r.length; i += 1)
                    null != e[i + 1] && (t[r[i]] = n(e[i + 1]));
              })(r.match(e.reg), i, e.names, e.name),
                e.push && t[e.push].push(i);
            },
            i = r(5602),
            a = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
          t.parse = function (e) {
            var t = {},
              r = [],
              n = t;
            return (
              e
                .split(/(\r\n|\r|\n)/)
                .filter(a)
                .forEach(function (e) {
                  var t = e[0],
                    a = e.slice(2);
                  "m" === t &&
                    (r.push({ rtp: [], fmtp: [] }), (n = r[r.length - 1]));
                  for (var o = 0; o < (i[t] || []).length; o += 1) {
                    var c = i[t][o];
                    if (c.reg.test(a)) return s(c, n, a);
                  }
                }),
              (t.media = r),
              t
            );
          };
          var o = function (e, t) {
            var r = t.split(/=(.+)/, 2);
            return (
              2 === r.length
                ? (e[r[0]] = n(r[1]))
                : 1 === r.length && t.length > 1 && (e[r[0]] = void 0),
              e
            );
          };
          (t.parseParams = function (e) {
            return e.split(/;\s?/).reduce(o, {});
          }),
            (t.parseFmtpConfig = t.parseParams),
            (t.parsePayloads = function (e) {
              return e.toString().split(" ").map(Number);
            }),
            (t.parseRemoteCandidates = function (e) {
              for (
                var t = [], r = e.split(" ").map(n), s = 0;
                s < r.length;
                s += 3
              )
                t.push({ component: r[s], ip: r[s + 1], port: r[s + 2] });
              return t;
            }),
            (t.parseImageAttributes = function (e) {
              return e.split(" ").map(function (e) {
                return e
                  .substring(1, e.length - 1)
                  .split(",")
                  .reduce(o, {});
              });
            }),
            (t.parseSimulcastStreamList = function (e) {
              return e.split(";").map(function (e) {
                return e.split(",").map(function (e) {
                  var t,
                    r = !1;
                  return (
                    "~" !== e[0]
                      ? (t = n(e))
                      : ((t = n(e.substring(1, e.length))), (r = !0)),
                    { scid: t, paused: r }
                  );
                });
              });
            });
        },
        5071: (e, t, r) => {
          "use strict";
          r.d(t, { V: () => n });
          var n = {
            HLS_STARTING: "HLS_STARTING",
            HLS_STARTED: "HLS_STARTED",
            HLS_PLAYABLE: "HLS_PLAYABLE",
            HLS_STOPPING: "HLS_STOPPING",
            HLS_STOPPED: "HLS_STOPPED",
          };
        },
        5370: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 });
        },
        5414: (e) => {
          self,
            (e.exports = (() => {
              var e = {
                  43: function (e, t, r) {
                    var n, s;
                    !(function () {
                      "use strict";
                      (n = function () {
                        var e = function () {},
                          t = "undefined",
                          r =
                            typeof window !== t &&
                            typeof window.navigator !== t &&
                            /Trident\/|MSIE /.test(window.navigator.userAgent),
                          n = ["trace", "debug", "info", "warn", "error"];
                        function s(e, t) {
                          var r = e[t];
                          if ("function" == typeof r.bind) return r.bind(e);
                          try {
                            return Function.prototype.bind.call(r, e);
                          } catch (t) {
                            return function () {
                              return Function.prototype.apply.apply(r, [
                                e,
                                arguments,
                              ]);
                            };
                          }
                        }
                        function i() {
                          console.log &&
                            (console.log.apply
                              ? console.log.apply(console, arguments)
                              : Function.prototype.apply.apply(console.log, [
                                  console,
                                  arguments,
                                ])),
                            console.trace && console.trace();
                        }
                        function a(t, r) {
                          for (var s = 0; s < n.length; s++) {
                            var i = n[s];
                            this[i] = s < t ? e : this.methodFactory(i, t, r);
                          }
                          this.log = this.debug;
                        }
                        function o(e, r, n) {
                          return function () {
                            typeof console !== t &&
                              (a.call(this, r, n),
                              this[e].apply(this, arguments));
                          };
                        }
                        function c(n, a, c) {
                          return (
                            (function (n) {
                              return (
                                "debug" === n && (n = "log"),
                                typeof console !== t &&
                                  ("trace" === n && r
                                    ? i
                                    : void 0 !== console[n]
                                    ? s(console, n)
                                    : void 0 !== console.log
                                    ? s(console, "log")
                                    : e)
                              );
                            })(n) || o.apply(this, arguments)
                          );
                        }
                        function d(e, r, s) {
                          var i,
                            o = this,
                            d = "loglevel";
                          function l() {
                            var e;
                            if (typeof window !== t && d) {
                              try {
                                e = window.localStorage[d];
                              } catch (e) {}
                              if (typeof e === t)
                                try {
                                  var r = window.document.cookie,
                                    n = r.indexOf(encodeURIComponent(d) + "=");
                                  -1 !== n &&
                                    (e = /^([^;]+)/.exec(r.slice(n))[1]);
                                } catch (e) {}
                              return void 0 === o.levels[e] && (e = void 0), e;
                            }
                          }
                          "string" == typeof e
                            ? (d += ":" + e)
                            : "symbol" == typeof e && (d = void 0),
                            (o.name = e),
                            (o.levels = {
                              TRACE: 0,
                              DEBUG: 1,
                              INFO: 2,
                              WARN: 3,
                              ERROR: 4,
                              SILENT: 5,
                            }),
                            (o.methodFactory = s || c),
                            (o.getLevel = function () {
                              return i;
                            }),
                            (o.setLevel = function (r, s) {
                              if (
                                ("string" == typeof r &&
                                  void 0 !== o.levels[r.toUpperCase()] &&
                                  (r = o.levels[r.toUpperCase()]),
                                !(
                                  "number" == typeof r &&
                                  r >= 0 &&
                                  r <= o.levels.SILENT
                                ))
                              )
                                throw (
                                  "log.setLevel() called with invalid level: " +
                                  r
                                );
                              if (
                                ((i = r),
                                !1 !== s &&
                                  (function (e) {
                                    var r = (n[e] || "silent").toUpperCase();
                                    if (typeof window !== t && d) {
                                      try {
                                        return void (window.localStorage[d] =
                                          r);
                                      } catch (e) {}
                                      try {
                                        window.document.cookie =
                                          encodeURIComponent(d) + "=" + r + ";";
                                      } catch (e) {}
                                    }
                                  })(r),
                                a.call(o, r, e),
                                typeof console === t && r < o.levels.SILENT)
                              )
                                return "No console available for logging";
                            }),
                            (o.setDefaultLevel = function (e) {
                              l() || o.setLevel(e, !1);
                            }),
                            (o.enableAll = function (e) {
                              o.setLevel(o.levels.TRACE, e);
                            }),
                            (o.disableAll = function (e) {
                              o.setLevel(o.levels.SILENT, e);
                            });
                          var u = l();
                          null == u && (u = null == r ? "WARN" : r),
                            o.setLevel(u, !1);
                        }
                        var l = new d(),
                          u = {};
                        l.getLogger = function (e) {
                          if (
                            ("symbol" != typeof e && "string" != typeof e) ||
                            "" === e
                          )
                            throw new TypeError(
                              "You must supply a name when creating a logger."
                            );
                          var t = u[e];
                          return (
                            t ||
                              (t = u[e] =
                                new d(e, l.getLevel(), l.methodFactory)),
                            t
                          );
                        };
                        var p = typeof window !== t ? window.log : void 0;
                        return (
                          (l.noConflict = function () {
                            return (
                              typeof window !== t &&
                                window.log === l &&
                                (window.log = p),
                              l
                            );
                          }),
                          (l.getLoggers = function () {
                            return u;
                          }),
                          (l.default = l),
                          l
                        );
                      }),
                        void 0 === (s = n.call(t, r, t, e)) || (e.exports = s);
                    })();
                  },
                },
                t = {};
              function r(n) {
                var s = t[n];
                if (void 0 !== s) return s.exports;
                var i = (t[n] = { exports: {} });
                return e[n].call(i.exports, i, i.exports, r), i.exports;
              }
              (r.d = (e, t) => {
                for (var n in t)
                  r.o(t, n) &&
                    !r.o(e, n) &&
                    Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
              }),
                (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
                (r.r = (e) => {
                  "undefined" != typeof Symbol &&
                    Symbol.toStringTag &&
                    Object.defineProperty(e, Symbol.toStringTag, {
                      value: "Module",
                    }),
                    Object.defineProperty(e, "__esModule", { value: !0 });
                });
              var n = {};
              return (
                (() => {
                  "use strict";
                  r.r(n), r.d(n, { VideoSDKMetrics: () => fe });
                  const e = "inbound",
                    t = "outbound",
                    s = {
                      codec_id_in: "",
                      codec_in: {
                        mime_type: null,
                        clock_rate: null,
                        sdp_fmtp_line: null,
                      },
                      delta_jitter_ms_in: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_in: 0,
                      delta_packets_in: 0,
                      delta_packets_lost_in: 0,
                      total_packets_in: 0,
                      total_packets_lost_in: 0,
                      total_KBytes_in: 0,
                      delta_KBytes_in: 0,
                      delta_kbs_in: 0,
                      timestamp_in: null,
                      ssrc: "",
                      total_concealment_events: 0,
                      delta_concealment_events: 0,
                      total_inserted_samples_for_decelaration: 0,
                      delta_inserted_samples_for_decelaration: 0,
                      total_removed_samples_for_accelaration: 0,
                      delta_removed_samples_for_accelaration: 0,
                      direction: e,
                    },
                    i = {
                      codec_id_out: "",
                      codec_out: {
                        mime_type: null,
                        clock_rate: null,
                        sdp_fmtp_line: null,
                      },
                      delta_jitter_ms_out: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_out: 0,
                      delta_packets_out: 0,
                      delta_packets_lost_out: 0,
                      total_packets_out: 0,
                      total_packets_lost_out: 0,
                      total_KBytes_out: 0,
                      delta_KBytes_out: 0,
                      delta_kbs_out: 0,
                      timestamp_out: null,
                      ssrc: "",
                      direction: t,
                    },
                    a = {
                      codec_id_in: "",
                      size_in: { width: null, height: null, framerate: null },
                      codec_in: { mime_type: null, clock_rate: null },
                      delta_jitter_ms_in: 0,
                      percent_packets_lost_in: 0,
                      delta_packets_in: 0,
                      delta_packets_lost_in: 0,
                      total_packets_in: 0,
                      total_packets_lost_in: 0,
                      total_KBytes_in: 0,
                      delta_KBytes_in: 0,
                      delta_kbs_in: 0,
                      ssrc: "",
                      direction: e,
                    },
                    o = {
                      codec_id_out: "",
                      size_out: { width: null, height: null, framerate: null },
                      codec_out: { mime_type: null, clock_rate: null },
                      delta_jitter_ms_out: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_out: 0,
                      delta_packets_out: 0,
                      delta_packets_lost_out: 0,
                      total_packets_out: 0,
                      total_packets_lost_out: 0,
                      total_KBytes_out: 0,
                      delta_KBytes_out: 0,
                      delta_kbs_out: 0,
                      limitation_out: {
                        reason: null,
                        durations: null,
                        resolutionChanges: 0,
                      },
                      timestamp_out: null,
                      ssrc: "",
                      direction: t,
                    },
                    c = "inbound-rtp",
                    d = "bytesReceived",
                    l = "bytesSent",
                    u = "clockRate",
                    p = "codecId",
                    h = "currentRoundTripTime",
                    m = "roundTripTime",
                    f = "fractionLost",
                    g = "frameHeight",
                    v = "frameWidth",
                    _ = "qualityLimitationReason",
                    y = "qualityLimitationDurations",
                    b = "qualityLimitationResolutionChanges",
                    w = "id",
                    S = "jitter",
                    R = "kind",
                    k = "mimeType",
                    E = "packetsLost",
                    C = "packetsReceived",
                    T = "packetsSent",
                    P = "responsesReceived",
                    O = "ssrc",
                    x = "selected",
                    D = "timestamp",
                    I = "totalRoundTripTime",
                    A = "roundTripTimeMeasurements",
                    M = "type",
                    L = "framesDecoded",
                    N = "framesEncoded",
                    j = "totalDecodeTime",
                    B = "totalEncodeTime",
                    F = "pliCount",
                    U = "nackCount",
                    W = "trackId",
                    q = "trackIdentifier",
                    V = "mediaSourceId",
                    H = "audio",
                    z = "video",
                    G = {
                      0: "ETHERNET",
                      2: "CELLULAR_5G",
                      3: "WIFI",
                      5: "CELLULAR_4G",
                      10: "CELLULAR",
                    },
                    K = "audio",
                    $ = "video",
                    J = "network",
                    Q = "data";
                  var Y = r(43);
                  const X = () => `${new Date().toISOString()} | metrics`,
                    Z = (e, t, r) => `${e} | ${t} | ${r}`;
                  Y.setDefaultLevel(Y.levels.TRACE);
                  const ee = (e, t, r) => {
                      r ? Y.debug(Z(X(), e, t), r) : Y.debug(Z(X(), e, t));
                    },
                    te = (e, t) => {
                      Y.warn(Z(X(), e, t));
                    },
                    re = (e, t) => {
                      Y.error(Z(X(), e, t));
                    },
                    ne = "extractor   ",
                    se = (t, r, n) => {
                      if (!r) return null;
                      const c = {};
                      let d = r[H][t];
                      d || (d = n === e ? { ...s } : { ...i }), (c[H] = d);
                      let l = r[z][t];
                      return (
                        l || (l = n === e ? { ...a } : { ...o }), (c[z] = l), c
                      );
                    },
                    ie = (e, t, r, n) => {
                      let s = !1;
                      const i = n[t].total_rtt_ms_out,
                        a = n[t].total_rtt_measure_out,
                        o = r ? r[t].total_rtt_ms_out : 0,
                        c = r ? r[t].total_rtt_measure_out : 0,
                        d = { rtt: null, totalRTT: i, totalRTTMeasurements: a };
                      if (e[D] === n[t].timestamp_out) return d;
                      if (!Object.prototype.hasOwnProperty.call(e, m)) return d;
                      if (
                        Object.prototype.hasOwnProperty.call(e, A) &&
                        ((s = !0), 0 === Number(e[A]) || Number(e[A]) - c === a)
                      )
                        return d;
                      const l = Number(1e3) * Number(e[m]);
                      let u = i + l,
                        p = a + 1;
                      return (
                        s &&
                          ((u = Number(1e3) * Number(e[I]) - o),
                          (p = Number(e[A]) - c)),
                        { rtt: l, totalRTT: u, totalRTTMeasurements: p }
                      );
                    },
                    ae = (e, t, r) =>
                      e[D] === r[t].timestamp_out
                        ? null
                        : Object.prototype.hasOwnProperty.call(e, S)
                        ? Number(1e3) * (Number(e[S]) || 0)
                        : null,
                    oe = (e, t, r, n) => {
                      if (
                        !Object.prototype.hasOwnProperty.call(e, T) ||
                        !Object.prototype.hasOwnProperty.call(e, l)
                      )
                        return {
                          packetsSent: r[t].total_packets_out,
                          packetsLost: r[t].total_packets_lost_out,
                          bytesSent: r[t].total_KBytes_out,
                        };
                      const s =
                          Number(e[T]) || 0 - (n ? n[t].total_packets_out : 0),
                        i = s - r[t].total_packets_out,
                        a =
                          Number(e[l]) / 1024 - (n ? n[t].total_KBytes_out : 0),
                        o = a - r[t].total_KBytes_out,
                        c = e[D] || Date.now(),
                        d = n ? n.timestamp : null;
                      let u = r.timestamp;
                      !u && d && (u = d);
                      const p = u ? c - u : 0;
                      return {
                        packetsSent: s,
                        deltaPacketsSent: i,
                        KBytesSent: a,
                        deltaKBytesSent: o,
                        kbsSent: p > 0 ? ((0.008 * o * 1024) / p) * 1e3 : 0,
                      };
                    },
                    ce = (e, t, r, n) => {
                      let s = r[t].total_packets_lost_out,
                        i = 0,
                        a = 0;
                      return (
                        Object.prototype.hasOwnProperty.call(e, E) &&
                          ((s =
                            Number(e[E]) ||
                            0 - (n ? n[t].total_packets_lost_out : 0)),
                          (i = s - r[t].total_packets_lost_out)),
                        Object.prototype.hasOwnProperty.call(e, f) &&
                          (a = Number(100 * e[f])),
                        { packetsLost: s, deltaPacketsLost: i, fractionLost: a }
                      );
                    },
                    de = (e, t, r, n) => {
                      if (
                        !Object.prototype.hasOwnProperty.call(e, C) ||
                        !Object.prototype.hasOwnProperty.call(e, E) ||
                        !Object.prototype.hasOwnProperty.call(e, d)
                      )
                        return {
                          percent_packets_lost: r[t].percent_packets_lost_in,
                          packetsReceived: r[t].total_packets_in,
                          packetsLost: r[t].total_packets_lost_in,
                          bytesReceived: r[t].total_KBytes_in,
                        };
                      const s =
                          (Number(e[C]) || 0) - (n ? n[t].total_packets_in : 0),
                        i =
                          (Number(e[E]) || 0) -
                          (n ? n[t].total_packets_lost_in : 0),
                        a = i - r[t].total_packets_lost_in,
                        o = s - r[t].total_packets_in,
                        c =
                          s !== r[t].total_packets_in ? (100 * a) / (a + o) : 0,
                        l =
                          Number(e[d]) / 1024 - (n ? n[t].total_KBytes_in : 0),
                        u = l - r[t].total_KBytes_in,
                        p = e[D] || Date.now(),
                        h = n ? n.timestamp : null;
                      let m = r.timestamp;
                      !m && h && (m = h);
                      const f = m ? p - m : 0;
                      return {
                        percentPacketsLost: c,
                        packetsReceived: s,
                        deltaPacketsReceived: o,
                        packetsLost: i,
                        deltaPacketsLost: a,
                        KBytesReceived: l,
                        deltaKBytesReceived: u,
                        kbsReceived: f > 0 ? ((0.008 * u * 1024) / f) * 1e3 : 0,
                      };
                    },
                    le = (e) =>
                      "relay" !== e.candidateType ? "" : e.relayProtocol || "",
                    ue = (e) =>
                      Object.prototype.hasOwnProperty.call(e, g) &&
                      Object.prototype.hasOwnProperty.call(e, v)
                        ? {
                            width: e[v] || null,
                            height: e[g] || null,
                            framerate: e.framesPerSecond,
                          }
                        : { width: null, height: null, framerate: null };
                  class pe {
                    constructor(e, t) {
                      (this._callbacks = { onStatsCollected: null }),
                        (this._id = `collector-${t}`),
                        (this._moduleName = this._id),
                        (this._probeId = t),
                        (this._config = e),
                        (this._state = "idle"),
                        (this._statsReports = []);
                    }
                    registerCallback(e, t, r) {
                      e in this._callbacks
                        ? ((this._callbacks[e] = { callback: t, context: r }),
                          ee(this._moduleName, `registered callback '${e}'`))
                        : re(
                            this._moduleName,
                            `can't register callback for '${e}' - not found`
                          );
                    }
                    unregisterCallback(e) {
                      e in this._callbacks
                        ? ((this._callbacks[e] = null),
                          delete this._callbacks[e],
                          ee(this._moduleName, `unregistered callback '${e}'`))
                        : re(
                            this._moduleName,
                            `can't unregister callback for '${e}' - not found`
                          );
                    }
                    analyze(r, n) {
                      const m = ((e) => {
                        const t = {
                          name: "",
                          meetingId: "",
                          peerId: "",
                          timestamp: null,
                          count: 0,
                          audio: {},
                          video: {},
                          network: { infrastructure: 3 },
                          data: {
                            delta_kbs_bandwidth_in: 0,
                            delta_kbs_bandwidth_out: 0,
                            delta_rtt_connectivity_ms: null,
                            total_rtt_connectivity_ms: 0,
                          },
                        };
                        if (e) {
                          const t = {
                            ...e,
                            audio: {},
                            video: {},
                            data: { ...e.data },
                            network: { ...e.network },
                          };
                          return (
                            Object.keys(e.audio).forEach((r) => {
                              t.audio[r] = { ...e.audio[r] };
                            }),
                            Object.keys(e.video).forEach((r) => {
                              t.video[r] = { ...e.video[r] };
                            }),
                            t
                          );
                        }
                        return {
                          ...t,
                          audio: {},
                          video: {},
                          data: { ...t.data },
                          network: { ...t.network },
                        };
                      })(n);
                      (m.name = this._config.name),
                        (m.meetingId = this._config.meetingId),
                        (m.peerId = this._config.peerId),
                        (m.count = n ? n.count + 1 : 1);
                      let f = null;
                      return (
                        r.forEach((r) => {
                          !f && r.timestamp && (f = r.timestamp),
                            ((r, n, s, i) => {
                              if (!r) return [];
                              switch (r[M]) {
                                case "candidate-pair":
                                  let a = !1;
                                  if (
                                    (r.nominated &&
                                      "succeeded" === r.state &&
                                      ((a = !0),
                                      ee(
                                        ne,
                                        `analyze() - got stats ${r[M]} for ${s}`,
                                        r
                                      ),
                                      x in r && !r[x] && (a = !1)),
                                    a)
                                  ) {
                                    r.localCandidateId, r.remoteCandidateId;
                                    const e = ((e, t, r) => {
                                        const n =
                                            (e[d] || 0) / 1024 -
                                            (r ? r.data.total_KBytes_in : 0),
                                          s =
                                            (e[l] || 0) / 1024 -
                                            (r ? r.data.total_KBytes_out : 0),
                                          i = e[D] || Date.now(),
                                          a = n - t.data.total_KBytes_in,
                                          o = s - t.data.total_KBytes_out,
                                          c = r ? r.timestamp : null;
                                        let u = t.timestamp;
                                        !u && c && (u = c);
                                        const p = u ? i - u : 0;
                                        return {
                                          total_KBytes_received: n,
                                          total_KBytes_sent: s,
                                          delta_KBytes_received: a,
                                          delta_KBytes_sent: o,
                                          kbs_speed_received:
                                            p > 0
                                              ? ((0.008 * a * 1024) / p) * 1e3
                                              : 0,
                                          kbs_speed_sent:
                                            p > 0
                                              ? ((0.008 * o * 1024) / p) * 1e3
                                              : 0,
                                        };
                                      })(r, n, i),
                                      t =
                                        (((e) => {
                                          e.availableIncomingBitrate,
                                            e.availableOutgoingBitrate;
                                        })(r),
                                        ((e, t, r, n) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              h
                                            )
                                          )
                                            return {
                                              rtt: null,
                                              totalRTT:
                                                n[t].total_rtt_connectivity_ms,
                                              totalRTTMeasurements:
                                                n[t]
                                                  .total_rtt_connectivity_measure,
                                            };
                                          const s = Number(1e3) * Number(e[h]);
                                          let i =
                                              n[t].total_rtt_connectivity_ms +
                                              s,
                                            a =
                                              n[t]
                                                .total_rtt_connectivity_measure +
                                              1;
                                          return (
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              I
                                            ) &&
                                              (i =
                                                Number(1e3) * Number(e[I]) -
                                                (r
                                                  ? r[t]
                                                      .total_rtt_connectivity_ms
                                                  : 0)),
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              P
                                            ) &&
                                              (a =
                                                Number(e[P]) -
                                                (r
                                                  ? r[t]
                                                      .total_rtt_connectivity_measure
                                                  : 0)),
                                            {
                                              rtt: s,
                                              totalRTT: i,
                                              totalRTTMeasurements: a,
                                            }
                                          );
                                        })(r, "data", i, n));
                                    return [
                                      {
                                        type: Q,
                                        value: {
                                          total_KBytes_in:
                                            e.total_KBytes_received,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          total_KBytes_out: e.total_KBytes_sent,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_KBytes_in:
                                            e.delta_KBytes_received,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_KBytes_out: e.delta_KBytes_sent,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_kbs_in: e.kbs_speed_received,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_kbs_out: e.kbs_speed_sent,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_rtt_connectivity_ms: t.rtt,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                case "local-candidate":
                                  if (r[w] === n.network.local_candidate_id)
                                    return [
                                      {
                                        type: J,
                                        value: {
                                          infrastructure: r.networkType,
                                        },
                                      },
                                      {
                                        type: J,
                                        value: {
                                          local_candidate_protocol:
                                            r.protocol || "",
                                        },
                                      },
                                      {
                                        type: J,
                                        value: {
                                          local_candidate_relay_protocol: le(r),
                                        },
                                      },
                                    ];
                                  break;
                                case c: {
                                  ee(
                                    ne,
                                    `analyze() - got stats ${r[M]} for ${s}`,
                                    r
                                  );
                                  const t = r[O],
                                    a = se(t, n, e);
                                  a && (a.timestamp = n.timestamp);
                                  const o = se(t, i, e);
                                  if (
                                    (o && (o.timestamp = i.timestamp),
                                    r[R] === H)
                                  ) {
                                    const e = de(r, H, a, o),
                                      n = ae(r, H, a),
                                      s = r[p] || "",
                                      i = ((e, t, r) => {
                                        const n =
                                            Number(e.concealmentEvents) || 0,
                                          s =
                                            n -
                                            (r[t].total_concealment_events ||
                                              0),
                                          i =
                                            Number(
                                              e.insertedSamplesForDeceleration
                                            ) || 0,
                                          a =
                                            i -
                                            (r[t]
                                              .total_inserted_samples_for_decelaration ||
                                              0),
                                          o =
                                            Number(
                                              e.removedSamplesForAcceleration
                                            ) || 0;
                                        return {
                                          totalConcealmentEvents: n,
                                          deltaConcealmentEvents: s,
                                          totalInsertedSamplesForDecelaration:
                                            i,
                                          deltaInsertedSamplesForDecelaration:
                                            a,
                                          totalRemovedSamplesForAccelaration: o,
                                          deltaRemovedSampleForAccelaration:
                                            o -
                                            (r[t]
                                              .total_removed_samples_for_accelaration ||
                                              0),
                                        };
                                      })(r, H, a);
                                    return [
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: { codec_id_in: s },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          total_packets_in: e.packetsReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          delta_packets_in:
                                            e.deltaPacketsReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          total_packets_lost_in: e.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          delta_packets_lost_in:
                                            e.deltaPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          percent_packets_lost_in:
                                            e.percentPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          total_KBytes_in: e.KBytesReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          delta_KBytes_in:
                                            e.deltaKBytesReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: { delta_kbs_in: e.kbsReceived },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: { delta_jitter_ms_in: n },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          total_concealment_events:
                                            i.totalConcealmentEvents,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          delta_concealment_events:
                                            i.deltaConcealmentEvents,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          total_inserted_samples_for_decelaration:
                                            i.totalInsertedSamplesForDecelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          delta_inserted_samples_for_decelaration:
                                            i.deltaInsertedSamplesForDecelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          total_removed_samples_for_accelaration:
                                            i.totalRemovedSamplesForAccelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: {
                                          delta_removed_samples_for_accelaration:
                                            i.deltaRemovedSampleForAccelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: { track_in: r[W] },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: { track_id_in: r[q] },
                                      },
                                      {
                                        ssrc: t,
                                        type: K,
                                        value: { media_source_id: r[V] },
                                      },
                                    ];
                                  }
                                  if (r[R] === z) {
                                    ((e, t) => {
                                      if (
                                        !Object.prototype.hasOwnProperty.call(
                                          e,
                                          L
                                        ) ||
                                        !Object.prototype.hasOwnProperty.call(
                                          e,
                                          j
                                        )
                                      )
                                        return {
                                          delta_ms_decode_frame:
                                            t[z].delta_ms_decode_frame_in,
                                          frames_decoded:
                                            t[z].total_frames_decoded_in,
                                          total_decode_time:
                                            t[z].total_time_decoded_in,
                                        };
                                      e[L],
                                        e[j],
                                        t[z].total_time_decoded_in,
                                        t[z].total_frames_decoded_in;
                                    })(r, a);
                                    const e = de(r, z, a, o),
                                      n = ae(r, z, a),
                                      s =
                                        (r.decoderImplementation, r[p] || null),
                                      i = ue(r);
                                    return (
                                      ((e, t, r) => {
                                        if (
                                          !Object.prototype.hasOwnProperty.call(
                                            e,
                                            F
                                          ) ||
                                          !Object.prototype.hasOwnProperty.call(
                                            e,
                                            U
                                          )
                                        )
                                          return {
                                            pliCount: t.total_pli_sent_in,
                                            nackCount: t.total_nack_sent_in,
                                            deltaPliCount: 0,
                                            deltaNackCount: 0,
                                          };
                                        e[F],
                                          r && r[z].total_pli_sent_in,
                                          e[U],
                                          r && r[z].total_nack_sent_in,
                                          t[z].total_pli_sent_in,
                                          t[z].total_nack_sent_in;
                                      })(r, a, o),
                                      [
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: { codec_id_in: s },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            total_packets_in: e.packetsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            delta_packets_in:
                                              e.deltaPacketsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            total_packets_lost_in:
                                              e.packetsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            delta_packets_lost_in:
                                              e.deltaPacketsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            percent_packets_lost_in:
                                              e.percentPacketsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            total_KBytes_in: e.KBytesReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            delta_KBytes_in:
                                              e.deltaKBytesReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            delta_kbs_in: e.kbsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: { delta_jitter_ms_in: n },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: { size_in: i },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: { track_in: r[W] },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: { track_id_in: r[q] },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: { media_source_id: r[V] },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: { pause_count: r.pauseCount },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            total_pauses_duration:
                                              r.totalPausesDuration,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            freeze_count: r.freezeCount,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: $,
                                          value: {
                                            total_freezes_duration:
                                              r.totalFreezesDuration,
                                          },
                                        },
                                      ]
                                    );
                                  }
                                  break;
                                }
                                case "outbound-rtp": {
                                  ee(
                                    ne,
                                    `analyze() - got stats ${r[M]} for ${s}`,
                                    r
                                  );
                                  const e = r[O],
                                    a = se(e, n, t);
                                  a && (a.timestamp = n.timestamp);
                                  const o = se(e, i, t);
                                  if (
                                    (o && (o.timestamp = i.timestamp),
                                    r[R] === H)
                                  ) {
                                    const t = r[p] || null,
                                      n = oe(r, H, a, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { codec_id_out: t },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          total_packets_out: n.packetsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          delta_packets_out: n.deltaPacketsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          total_KBytes_out: n.KBytesSent,
                                        },
                                      },
                                      {
                                        type: K,
                                        value: {
                                          delta_KBytes_out: n.deltaKBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { delta_kbs_out: n.kbsSent },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { track_out: r[W] },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { track_id_out: r[q] },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { media_source_id: r[V] },
                                      },
                                    ];
                                  }
                                  if (r[R] === z) {
                                    r.encoderImplementation;
                                    const t = r[p] || null,
                                      n =
                                        (((e, t) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              N
                                            ) ||
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              B
                                            )
                                          )
                                            return {
                                              delta_ms_encode_frame:
                                                t[z].delta_ms_encode_frame_out,
                                              frames_encoded:
                                                t[z].total_frames_encoded_out,
                                              total_encode_time:
                                                t[z].total_time_encoded_out,
                                            };
                                          e[N],
                                            e[B],
                                            t[z].total_time_encoded_out,
                                            t[z].total_frames_encoded_out;
                                        })(r, a),
                                        ue(r)),
                                      s = ((e) => {
                                        const t =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              _
                                            )
                                              ? e[_]
                                              : null,
                                          r =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              b
                                            )
                                              ? e[b]
                                              : null,
                                          n =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              y
                                            )
                                              ? e[y]
                                              : null;
                                        return (
                                          n &&
                                            Object.keys(n).forEach((e) => {
                                              n[e] > 1e3 &&
                                                (n[e] = Number(n[e] / 1e3));
                                            }),
                                          {
                                            reason: t,
                                            durations: n,
                                            resolutionChanges: r,
                                          }
                                        );
                                      })(r),
                                      i =
                                        (((e, t, r) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              F
                                            ) ||
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              U
                                            )
                                          )
                                            return {
                                              pliCount:
                                                t.total_pli_received_out,
                                              nackCount:
                                                t.total_nack_received_out,
                                              deltaPliCount: 0,
                                              deltaNackCount: 0,
                                            };
                                          e[F],
                                            r && r[z].total_pli_received_out,
                                            e[U],
                                            r && r[z].total_nack_received_out,
                                            t[z].total_pli_received_out,
                                            t[z].total_nack_received_out;
                                        })(r, a, o),
                                        oe(r, z, a, o));
                                    return [
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { codec_id_out: t },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          total_packets_out: i.packetsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          delta_packets_out: i.deltaPacketsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          total_KBytes_out: i.KBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          delta_KBytes_out: i.deltaKBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { delta_kbs_out: i.kbsSent },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { size_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { limitation_out: s },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { track_out: r[W] },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { track_id_out: r[q] },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { media_source_id: r[V] },
                                      },
                                    ];
                                  }
                                  break;
                                }
                                case "media-source": {
                                  ee(
                                    ne,
                                    `analyze() - got stats ${r[M]} for ${s}`,
                                    r
                                  );
                                  const e = [];
                                  return (
                                    Object.keys(n[H]).forEach((t) => {
                                      const s = n[H][t];
                                      if (s.media_source_id === r[w]) {
                                        var i = r[q];
                                        e.push({
                                          ssrc: s.ssrc,
                                          type: K,
                                          value: { track_id_out: i },
                                        });
                                      }
                                    }),
                                    Object.keys(n[z]).forEach((t) => {
                                      const s = n[z][t];
                                      if (s.media_source_id === r[w]) {
                                        var i = r[q];
                                        e.push({
                                          ssrc: s.ssrc,
                                          type: $,
                                          value: { track_id_out: i },
                                        });
                                      }
                                    }),
                                    e
                                  );
                                }
                                case "track": {
                                  ee(
                                    ne,
                                    `analyze() - got stats ${r[M]} for ${s}`,
                                    r
                                  );
                                  const e = [];
                                  return (
                                    Object.keys(n[H]).forEach((t) => {
                                      const i = n[H][t];
                                      if (
                                        i.track_in === r[w] ||
                                        i.track_out === r[w]
                                      ) {
                                        ee(
                                          ne,
                                          `analyze() - got stats ${r[M]} for ${s}`,
                                          r
                                        );
                                        var a = r[q];
                                        r[w] === i.track_in
                                          ? e.push({
                                              ssrc: i.ssrc,
                                              type: K,
                                              value: { track_id_in: a },
                                            })
                                          : e.push({
                                              ssrc: i.ssrc,
                                              type: K,
                                              value: { track_id_out: a },
                                            });
                                      }
                                    }),
                                    Object.keys(n[z]).forEach((t) => {
                                      const i = n[z][t];
                                      if (
                                        i.track_in === r[w] ||
                                        i.track_out === r[w]
                                      ) {
                                        ee(
                                          ne,
                                          `analyze() - got stats ${r[M]} for ${s}`,
                                          r
                                        );
                                        var a = r[q];
                                        r[w] === i.track_in
                                          ? e.push({
                                              ssrc: i.ssrc,
                                              type: $,
                                              value: { track_id_in: a },
                                            })
                                          : e.push({
                                              ssrc: i.ssrc,
                                              type: $,
                                              value: { track_id_out: a },
                                            });
                                      }
                                    }),
                                    e
                                  );
                                }
                                case "codec":
                                  const o = [];
                                  return (
                                    Object.keys(n[H]).forEach((e) => {
                                      const t = n[H][e];
                                      if (
                                        t.codec_id_in === r[w] ||
                                        t.codec_id_out === r[w]
                                      ) {
                                        ee(
                                          ne,
                                          `analyze() - got stats ${r[M]} for ${s}`,
                                          r
                                        );
                                        const e = ((e) => ({
                                          channels: e.channels || null,
                                          clock_rate: e[u] || null,
                                          mime_type: e[k] || null,
                                          sdp_fmtp_line: e.sdpFmtpLine || null,
                                        }))(r);
                                        r[w] === t.codec_id_in
                                          ? o.push({
                                              ssrc: t.ssrc,
                                              type: K,
                                              value: { codec_in: e },
                                            })
                                          : o.push({
                                              ssrc: t.ssrc,
                                              type: K,
                                              value: { codec_out: e },
                                            });
                                      }
                                    }),
                                    Object.keys(n[z]).forEach((e) => {
                                      const t = n[z][e];
                                      if (
                                        t.codec_id_in === r[w] ||
                                        t.codec_id_out === r[w]
                                      ) {
                                        ee(
                                          ne,
                                          `analyze() - got stats ${r[M]} for ${s}`,
                                          r
                                        );
                                        const e = ((e) => ({
                                          clock_rate: e[u] || null,
                                          mime_type: e[k] || null,
                                        }))(r);
                                        r[w] === t.codec_id_in
                                          ? o.push({
                                              ssrc: t.ssrc,
                                              type: $,
                                              value: { codec_in: e },
                                            })
                                          : o.push({
                                              ssrc: t.ssrc,
                                              type: $,
                                              value: { codec_out: e },
                                            });
                                      }
                                    }),
                                    o
                                  );
                                case "remote-inbound-rtp": {
                                  ee(
                                    ne,
                                    `analyze() - got stats ${r[M]} for ${s}`,
                                    r
                                  );
                                  const e = r[O],
                                    a = se(e, n, t),
                                    o = se(e, i, t);
                                  if (r[R] === H) {
                                    const t = ie(r, H, o, a),
                                      n = ae(r, H, a),
                                      s = ce(r, H, a, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { delta_rtt_ms_out: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { delta_jitter_ms_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { timestamp_out: r[D] },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          total_packets_lost_out: s.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          delta_packets_lost_out:
                                            s.deltaPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          percent_packets_lost_out:
                                            s.fractionLost,
                                        },
                                      },
                                    ];
                                  }
                                  if (r[R] === z) {
                                    const t = ie(r, z, o, a),
                                      n = ae(r, z, a),
                                      s = ce(r, z, a, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { delta_rtt_ms_out: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { delta_jitter_ms_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { timestamp_out: r[D] },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          total_packets_lost_out: s.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          delta_packets_lost_out:
                                            s.deltaPacketsLost,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                }
                                case "remote-outbound-rtp": {
                                  ee(
                                    ne,
                                    `analyze() - got stats ${r[M]} for ${s}`,
                                    r
                                  );
                                  const e = r[O],
                                    a = se(e, n, t),
                                    o = se(e, i, t);
                                  if (r[R] === H) {
                                    const t = ie(r, H, o, a);
                                    return [
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { delta_rtt_ms_in: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { timestamp_in: r[D] },
                                      },
                                    ];
                                  }
                                  break;
                                }
                              }
                              return [];
                            })(r, m, m.name, null).forEach((e) => {
                              if (e.value && e.type)
                                if (e.ssrc) {
                                  let d = m[e.type][e.ssrc];
                                  d ||
                                    ((t = e.type),
                                    (n = r.type),
                                    (d =
                                      t === H
                                        ? n === c
                                          ? { ...s }
                                          : { ...i }
                                        : n === c
                                        ? { ...a }
                                        : { ...o }),
                                    (d.ssrc = e.ssrc),
                                    (m[e.type][e.ssrc] = d)),
                                    Object.keys(e.value).forEach((t) => {
                                      void 0 !== e.value[t] &&
                                        (d[t] = e.value[t]);
                                    });
                                } else
                                  Object.keys(e.value).forEach((t) => {
                                    void 0 !== e.value[t] &&
                                      (m[e.type][t] = e.value[t]);
                                  });
                              var t, n;
                            });
                        }),
                        (m.timestamp = f),
                        m
                      );
                    }
                    async collectStats() {
                      try {
                        const e =
                            await this._config.monitoringObject.getStats(),
                          t = this.analyze(
                            e,
                            this._statsReports.slice().pop() || null
                          );
                        return (
                          this._statsReports.push(t),
                          this.fireOnStatsCollected(t),
                          e
                        );
                      } catch (e) {
                        return re(this._moduleName, `got error ${e}`), null;
                      }
                    }
                    fireOnStatsCollected(r) {
                      if (this._callbacks.onStatsCollected) {
                        const n = {};
                        (n.meetingId = r.meetingId),
                          (n.peerId = r.peerId),
                          (n.name = r.name),
                          (n.audio = []),
                          (n.video = []),
                          Object.values(r.audio).forEach((s) => {
                            const i = {};
                            if (
                              ((i.network = G[r.network.infrastructure]),
                              (i.timestamp = r.timestamp),
                              s.direction == e)
                            ) {
                              (i.codec = s.codec_in.mime_type),
                                (i.jitter = s.delta_jitter_ms_in),
                                (i.bitrate = s.delta_kbs_in),
                                (i.packetsLost = s.delta_packets_lost_in),
                                (i.rtt = r.data.delta_rtt_connectivity_ms || 0),
                                (i.totalPackets = s.delta_packets_in),
                                (i.concealmentEvents =
                                  s.delta_concealment_events),
                                (i.removedSampleForAccelaration =
                                  s.delta_removed_samples_for_accelaration),
                                (i.insertedSamplesForDecelaration =
                                  s.delta_inserted_samples_for_decelaration);
                              const e = JSON.stringify(s.track_id_in).replace(
                                /[{}"]/g,
                                ""
                              );
                              i.trackId = e;
                            } else
                              s.direction == t &&
                                ((i.codec = s.codec_out.mime_type),
                                (i.jitter = s.delta_jitter_ms_out),
                                (i.bitrate = s.delta_kbs_out),
                                (i.packetsLost = s.delta_packets_lost_out),
                                (i.rtt = r.data.delta_rtt_connectivity_ms || 0),
                                (i.totalPackets = s.delta_packets_out),
                                (i.trackId = s.track_id_out));
                            n.audio.push(i);
                          }),
                          Object.values(r.video).forEach((s) => {
                            const i = {};
                            if (
                              ((i.network = G[r.network.infrastructure]),
                              (i.timestamp = r.timestamp),
                              s.direction == e)
                            ) {
                              (i.codec = s.codec_in.mime_type),
                                (i.jitter = s.delta_jitter_ms_in),
                                (i.bitrate = s.delta_kbs_in),
                                (i.packetsLost = s.delta_packets_lost_in),
                                (i.rtt = r.data.delta_rtt_connectivity_ms || 0),
                                (i.totalPackets = s.delta_packets_in),
                                (i.size = s.size_in),
                                (i.pauseCount = s.pause_count),
                                (i.totalPausesDuration =
                                  s.total_pauses_duration),
                                (i.freezeCount = s.freeze_count),
                                (i.totalFreezesDuration =
                                  s.total_freezes_duration);
                              const e = JSON.stringify(s.track_id_in).replace(
                                /[{}"]/g,
                                ""
                              );
                              i.trackId = e;
                            } else
                              s.direction == t &&
                                ((i.codec = s.codec_out.mime_type),
                                (i.jitter = s.delta_jitter_ms_out),
                                (i.bitrate = s.delta_kbs_out),
                                (i.packetsLost = s.delta_packets_lost_out),
                                (i.rtt = r.data.delta_rtt_connectivity_ms || 0),
                                (i.totalPackets = s.delta_packets_out),
                                (i.limitation = s.limitation_out),
                                (i.size = s.size_out),
                                (i.trackId = s.track_id_out));
                            n.video.push(i);
                          }),
                          this._callbacks.onStatsCollected.callback(n);
                      }
                    }
                  }
                  class he {
                    constructor(e) {
                      (this._id =
                        e.name && e.name.substr(0, 12).padEnd(12, " ")),
                        (this._moduleName = this._id),
                        (this._config = e),
                        (this._collector = new pe(this._config, this._id));
                    }
                    get id() {
                      return this._id;
                    }
                    start() {
                      this._collectorIntervalId
                        ? te("Probe already started.")
                        : (ee(this._moduleName, "Probe Started"),
                          (this._collectorIntervalId = setInterval(() => {
                            ee(this._moduleName, "Collector collecting stats"),
                              this._collector.collectStats();
                          }, this._config.refreshEvery)));
                    }
                    stop() {
                      this._collectorIntervalId
                        ? (clearInterval(this._collectorIntervalId),
                          ee(this._moduleName, "Probe Stopped"))
                        : te("Probe not running, Please start first.");
                    }
                    set onStatsCollected(e) {
                      e
                        ? this._collector.registerCallback(
                            "onStatsCollected",
                            e
                          )
                        : this._collector.unregisterCallback(
                            "onStatsCollected"
                          );
                    }
                  }
                  const me = {
                    refreshEvery: 2e3,
                    startAfter: 0,
                    stopAfter: -1,
                    verbose: !1,
                    peerId: "peerId",
                    meetingId: "meetingId",
                    name: "name",
                  };
                  class fe {
                    constructor(e) {
                      var t;
                      (this._config = { defaultConfig: me, ...e }),
                        (this._probes = []),
                        (t = this._config.verbose || !1),
                        Y.setLevel(t ? Y.levels.TRACE : Y.levels.INFO),
                        ee("VideoSDKMetrics", "VideoSDKMetrics initialized");
                    }
                    get probes() {
                      return this._probes;
                    }
                    addNewProbe(e, t) {
                      if (!e) throw new Error("undefined monitoring object");
                      const r = { monitoringObject: e, ...t, ...this._config },
                        n = new he(r);
                      return this._probes.push(n), n;
                    }
                    removeExistingProbe(e) {
                      if (!e) throw new Error("undefined probe");
                      e.stop(),
                        (this._probes = this._probes.filter(
                          (t) => e.id !== t.id
                        ));
                    }
                    getProbe(e) {
                      for (let t of this.probes) if (t.id == e) return t;
                    }
                    startAllProbes() {
                      this._probes.forEach((e, t) => {
                        e.start();
                      });
                    }
                    stopAllProbes() {
                      this._probes.forEach((e) => e.stop());
                    }
                  }
                })(),
                n
              );
            })());
        },
        5458: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => i });
          var n = r(3145);
          var s = r(7800);
          function i(e) {
            return (
              (function (e) {
                if (Array.isArray(e)) return (0, n.A)(e);
              })(e) ||
              (function (e) {
                if (
                  ("undefined" != typeof Symbol &&
                    null != e[Symbol.iterator]) ||
                  null != e["@@iterator"]
                )
                  return Array.from(e);
              })(e) ||
              (0, s.A)(e) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
        },
        5471: function (e, t, r) {
          var n, s, i, a, o, c, d, l;
          e.exports =
            ((l = r(9021)),
            (s = (n = l).lib),
            (i = s.WordArray),
            (a = s.Hasher),
            (o = n.algo),
            (c = []),
            (d = o.SHA1 =
              a.extend({
                _doReset: function () {
                  this._hash = new i.init([
                    1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._hash.words,
                      n = r[0],
                      s = r[1],
                      i = r[2],
                      a = r[3],
                      o = r[4],
                      d = 0;
                    d < 80;
                    d++
                  ) {
                    if (d < 16) c[d] = 0 | e[t + d];
                    else {
                      var l = c[d - 3] ^ c[d - 8] ^ c[d - 14] ^ c[d - 16];
                      c[d] = (l << 1) | (l >>> 31);
                    }
                    var u = ((n << 5) | (n >>> 27)) + o + c[d];
                    (u +=
                      d < 20
                        ? 1518500249 + ((s & i) | (~s & a))
                        : d < 40
                        ? 1859775393 + (s ^ i ^ a)
                        : d < 60
                        ? ((s & i) | (s & a) | (i & a)) - 1894007588
                        : (s ^ i ^ a) - 899497514),
                      (o = a),
                      (a = i),
                      (i = (s << 30) | (s >>> 2)),
                      (s = n),
                      (n = u);
                  }
                  (r[0] = (r[0] + n) | 0),
                    (r[1] = (r[1] + s) | 0),
                    (r[2] = (r[2] + i) | 0),
                    (r[3] = (r[3] + a) | 0),
                    (r[4] = (r[4] + o) | 0);
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    r = 8 * this._nDataBytes,
                    n = 8 * e.sigBytes;
                  return (
                    (t[n >>> 5] |= 128 << (24 - (n % 32))),
                    (t[14 + (((n + 64) >>> 9) << 4)] = Math.floor(
                      r / 4294967296
                    )),
                    (t[15 + (((n + 64) >>> 9) << 4)] = r),
                    (e.sigBytes = 4 * t.length),
                    this._process(),
                    this._hash
                  );
                },
                clone: function () {
                  var e = a.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              })),
            (n.SHA1 = a._createHelper(d)),
            (n.HmacSHA1 = a._createHmacHelper(d)),
            l.SHA1);
        },
        5501: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => s });
          var n = r(3662);
          function s(e, t) {
            if ("function" != typeof t && null !== t)
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            (e.prototype = Object.create(t && t.prototype, {
              constructor: { value: e, writable: !0, configurable: !0 },
            })),
              Object.defineProperty(e, "prototype", { writable: !1 }),
              t && (0, n.A)(e, t);
          }
        },
        5503: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            (function () {
              var e = n,
                t = e.lib.WordArray,
                r = e.enc;
              function s(e) {
                return ((e << 8) & 4278255360) | ((e >>> 8) & 16711935);
              }
              (r.Utf16 = r.Utf16BE =
                {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, n = [], s = 0;
                      s < r;
                      s += 2
                    ) {
                      var i = (t[s >>> 2] >>> (16 - (s % 4) * 8)) & 65535;
                      n.push(String.fromCharCode(i));
                    }
                    return n.join("");
                  },
                  parse: function (e) {
                    for (var r = e.length, n = [], s = 0; s < r; s++)
                      n[s >>> 1] |= e.charCodeAt(s) << (16 - (s % 2) * 16);
                    return t.create(n, 2 * r);
                  },
                }),
                (r.Utf16LE = {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, n = [], i = 0;
                      i < r;
                      i += 2
                    ) {
                      var a = s((t[i >>> 2] >>> (16 - (i % 4) * 8)) & 65535);
                      n.push(String.fromCharCode(a));
                    }
                    return n.join("");
                  },
                  parse: function (e) {
                    for (var r = e.length, n = [], i = 0; i < r; i++)
                      n[i >>> 1] |= s(e.charCodeAt(i) << (16 - (i % 2) * 16));
                    return t.create(n, 2 * r);
                  },
                });
            })(),
            n.enc.Utf16);
        },
        5535: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome70 = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = i(r(1765)),
            d = i(r(8046)),
            l = i(r(5544)),
            u = i(r(5938)),
            p = r(521),
            h = r(1305),
            m = r(3303),
            f = new o.Logger("Chrome70"),
            g = { OS: 1024, MIS: 1024 };
          class v extends p.HandlerInterface {
            static createFactory() {
              return () => new v();
            }
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome70";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = a.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (f.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id);
              const s = c.clone(this._sendingRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, n);
              const i = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                p = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                });
              let h,
                g = await this._pc.createOffer(),
                v = a.parse(g.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: v,
                })),
                t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling legacy simulcast"),
                  (v = a.parse(g.sdp)),
                  (h = v.media[o.idx]),
                  u.addLegacySimulcast({
                    offerMediaObject: h,
                    numStreams: t.length,
                  }),
                  (g = { type: "offer", sdp: a.write(v) }));
              let _ = !1;
              const y = (0, m.parse)((t || [{}])[0].scalabilityMode);
              if (
                (t &&
                  1 === t.length &&
                  y.spatialLayers > 1 &&
                  "video/vp9" === s.codecs[0].mimeType.toLowerCase() &&
                  (f.debug("send() | enabling legacy simulcast for VP9 SVC"),
                  (_ = !0),
                  (v = a.parse(g.sdp)),
                  (h = v.media[o.idx]),
                  u.addLegacySimulcast({
                    offerMediaObject: h,
                    numStreams: y.spatialLayers,
                  }),
                  (g = { type: "offer", sdp: a.write(v) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  g
                ),
                await this._pc.setLocalDescription(g),
                t)
              ) {
                f.debug("send() | applying given encodings");
                const e = p.sender.getParameters();
                for (let r = 0; r < (e.encodings || []).length; ++r) {
                  const n = e.encodings[r],
                    s = t[r];
                  if (!s) break;
                  e.encodings[r] = Object.assign(n, s);
                }
                await p.sender.setParameters(e);
              }
              const b = p.mid;
              if (
                ((s.mid = b),
                (v = a.parse(this._pc.localDescription.sdp)),
                (h = v.media[o.idx]),
                (s.rtcp.cname = l.getCname({ offerMediaObject: h })),
                (s.encodings = u.getRtpEncodings({ offerMediaObject: h })),
                t)
              )
                for (let e = 0; e < s.encodings.length; ++e)
                  t[e] && Object.assign(s.encodings[e], t[e]);
              if (
                (_ && (s.encodings = [s.encodings[0]]),
                s.encodings.length > 1 &&
                  ("video/vp8" === s.codecs[0].mimeType.toLowerCase() ||
                    "video/h264" === s.codecs[0].mimeType.toLowerCase()))
              )
                for (const e of s.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: h,
                reuseMid: o.reuseMid,
                offerRtpParameters: s,
                answerRtpParameters: i,
                codecOptions: r,
              });
              const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ),
                await this._pc.setRemoteDescription(w),
                this._mapMidTransceiver.set(b, p),
                { localId: b, rtpParameters: s, rtpSender: p.sender }
              );
            }
            async stopSending(e) {
              this.assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              this.assertSendDirection(),
                t
                  ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : f.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertSendDirection(),
                f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              f.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertSendDirection(),
                f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              f.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async getSenderStats(e) {
              this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              f.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % g.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: n,
                  rtpParameters: s,
                  streamId: i,
                } = t;
                f.debug("receive() [trackId:%s, kind:%s]", e, n);
                const a = s.mid || String(this._mapMidTransceiver.size);
                r.set(e, a),
                  this._remoteSdp.receive({
                    mid: a,
                    kind: n,
                    offerRtpParameters: s,
                    streamId: i || s.rtcp.cname,
                    trackId: e,
                  });
              }
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              let s = await this._pc.createAnswer();
              const i = a.parse(s.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: n } = t,
                  s = r.get(e),
                  a = i.media.find((e) => String(e.mid) === s);
                l.applyCodecParameters({
                  offerRtpParameters: n,
                  answerMediaObject: a,
                });
              }
              (s = { type: "answer", sdp: a.write(i) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: i,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s);
              for (const n of e) {
                const { trackId: e } = n,
                  s = r.get(e),
                  i = this._pc.getTransceivers().find((e) => e.mid === s);
                if (!i) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(s, i),
                  t.push({
                    localId: s,
                    track: i.receiver.track,
                    rtpReceiver: i.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                f.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmitTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome70 = v;
        },
        5544: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.applyCodecParameters =
              t.getCname =
              t.extractDtlsParameters =
              t.extractRtpCapabilities =
                void 0);
          const a = i(r(7363));
          (t.extractRtpCapabilities = function ({ sdpObject: e }) {
            const t = new Map(),
              r = [];
            let n = !1,
              s = !1;
            for (const i of e.media) {
              const e = i.type;
              switch (e) {
                case "audio":
                  if (n) continue;
                  n = !0;
                  break;
                case "video":
                  if (s) continue;
                  s = !0;
                  break;
                default:
                  continue;
              }
              for (const r of i.rtp) {
                const n = {
                  kind: e,
                  mimeType: `${e}/${r.codec}`,
                  preferredPayloadType: r.payload,
                  clockRate: r.rate,
                  channels: r.encoding,
                  parameters: {},
                  rtcpFeedback: [],
                };
                t.set(n.preferredPayloadType, n);
              }
              for (const e of i.fmtp || []) {
                const r = a.parseParams(e.config),
                  n = t.get(e.payload);
                n &&
                  (r &&
                    r.hasOwnProperty("profile-level-id") &&
                    (r["profile-level-id"] = String(r["profile-level-id"])),
                  (n.parameters = r));
              }
              for (const r of i.rtcpFb || []) {
                const n = { type: r.type, parameter: r.subtype };
                if ((n.parameter || delete n.parameter, "*" !== r.payload)) {
                  const e = t.get(r.payload);
                  if (!e) continue;
                  e.rtcpFeedback.push(n);
                } else
                  for (const r of t.values())
                    r.kind !== e ||
                      /.+\/rtx$/i.test(r.mimeType) ||
                      r.rtcpFeedback.push(n);
              }
              for (const t of i.ext || []) {
                if (t["encrypt-uri"]) continue;
                const n = { kind: e, uri: t.uri, preferredId: t.value };
                r.push(n);
              }
            }
            return { codecs: Array.from(t.values()), headerExtensions: r };
          }),
            (t.extractDtlsParameters = function ({ sdpObject: e }) {
              let t,
                r = e.setup,
                n = e.fingerprint;
              if (!r || !n) {
                const t = (e.media || []).find((e) => 0 !== e.port);
                t && (r ?? (r = t.setup), n ?? (n = t.fingerprint));
              }
              if (!r)
                throw new Error(
                  "no a=setup found at SDP session or media level"
                );
              if (!n)
                throw new Error(
                  "no a=fingerprint found at SDP session or media level"
                );
              switch (r) {
                case "active":
                  t = "client";
                  break;
                case "passive":
                  t = "server";
                  break;
                case "actpass":
                  t = "auto";
              }
              return {
                role: t,
                fingerprints: [{ algorithm: n.type, value: n.hash }],
              };
            }),
            (t.getCname = function ({ offerMediaObject: e }) {
              const t = (e.ssrcs || []).find((e) => "cname" === e.attribute);
              return t ? t.value : "";
            }),
            (t.applyCodecParameters = function ({
              offerRtpParameters: e,
              answerMediaObject: t,
            }) {
              for (const r of e.codecs) {
                const e = r.mimeType.toLowerCase();
                if ("audio/opus" !== e) continue;
                if (!(t.rtp || []).find((e) => e.payload === r.payloadType))
                  continue;
                t.fmtp = t.fmtp || [];
                let n = t.fmtp.find((e) => e.payload === r.payloadType);
                n ||
                  ((n = { payload: r.payloadType, config: "" }),
                  t.fmtp.push(n));
                const s = a.parseParams(n.config);
                switch (e) {
                  case "audio/opus": {
                    const e = r.parameters["sprop-stereo"];
                    void 0 !== e && (s.stereo = e ? 1 : 0);
                    break;
                  }
                }
                n.config = "";
                for (const e of Object.keys(s))
                  n.config && (n.config += ";"), (n.config += `${e}=${s[e]}`);
              }
            });
        },
        5601: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              },
            a =
              (this && this.__importDefault) ||
              function (e) {
                return e && e.__esModule ? e : { default: e };
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Transport = void 0);
          const o = r(8876),
            c = a(r(9596)),
            d = r(2994),
            l = r(2010),
            u = r(4893),
            p = i(r(1765)),
            h = i(r(8046)),
            m = r(9792),
            f = r(3518),
            g = r(7504),
            v = r(9166),
            _ = new d.Logger("Transport");
          class y {
            constructor(e) {
              (this.consumerOptions = e),
                (this.promise = new Promise((e, t) => {
                  (this.resolve = e), (this.reject = t);
                }));
            }
          }
          class b extends l.EnhancedEventEmitter {
            constructor({
              direction: e,
              id: t,
              iceParameters: r,
              iceCandidates: n,
              dtlsParameters: s,
              sctpParameters: i,
              iceServers: a,
              iceTransportPolicy: c,
              additionalSettings: d,
              proprietaryConstraints: u,
              appData: h,
              handlerFactory: m,
              extendedRtpCapabilities: f,
              canProduceByKind: g,
            }) {
              super(),
                (this._closed = !1),
                (this._iceGatheringState = "new"),
                (this._connectionState = "new"),
                (this._producers = new Map()),
                (this._consumers = new Map()),
                (this._dataProducers = new Map()),
                (this._dataConsumers = new Map()),
                (this._probatorConsumerCreated = !1),
                (this._awaitQueue = new o.AwaitQueue()),
                (this._pendingConsumerTasks = []),
                (this._consumerCreationInProgress = !1),
                (this._pendingPauseConsumers = new Map()),
                (this._consumerPauseInProgress = !1),
                (this._pendingResumeConsumers = new Map()),
                (this._consumerResumeInProgress = !1),
                (this._pendingCloseConsumers = new Map()),
                (this._consumerCloseInProgress = !1),
                (this._observer = new l.EnhancedEventEmitter()),
                _.debug("constructor() [id:%s, direction:%s]", t, e),
                (this._id = t),
                (this._direction = e),
                (this._extendedRtpCapabilities = f),
                (this._canProduceByKind = g),
                (this._maxSctpMessageSize = i ? i.maxMessageSize : null);
              const v = p.clone(d) || {};
              delete v.iceServers,
                delete v.iceTransportPolicy,
                delete v.bundlePolicy,
                delete v.rtcpMuxPolicy,
                delete v.sdpSemantics,
                (this._handler = m()),
                this._handler.run({
                  direction: e,
                  iceParameters: r,
                  iceCandidates: n,
                  dtlsParameters: s,
                  sctpParameters: i,
                  iceServers: a,
                  iceTransportPolicy: c,
                  additionalSettings: v,
                  proprietaryConstraints: u,
                  extendedRtpCapabilities: f,
                }),
                (this._appData = h || {}),
                this.handleHandler();
            }
            get id() {
              return this._id;
            }
            get closed() {
              return this._closed;
            }
            get direction() {
              return this._direction;
            }
            get handler() {
              return this._handler;
            }
            get iceGatheringState() {
              return this._iceGatheringState;
            }
            get connectionState() {
              return this._connectionState;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              if (!this._closed) {
                _.debug("close()"),
                  (this._closed = !0),
                  this._awaitQueue.stop(),
                  this._handler.close(),
                  (this._connectionState = "closed");
                for (const e of this._producers.values()) e.transportClosed();
                this._producers.clear();
                for (const e of this._consumers.values()) e.transportClosed();
                this._consumers.clear();
                for (const e of this._dataProducers.values())
                  e.transportClosed();
                this._dataProducers.clear();
                for (const e of this._dataConsumers.values())
                  e.transportClosed();
                this._dataConsumers.clear(), this._observer.safeEmit("close");
              }
            }
            async getStats() {
              if (this._closed) throw new u.InvalidStateError("closed");
              return this._handler.getTransportStats();
            }
            async restartIce({ iceParameters: e }) {
              if ((_.debug("restartIce()"), this._closed))
                throw new u.InvalidStateError("closed");
              if (!e) throw new TypeError("missing iceParameters");
              return this._awaitQueue.push(
                async () => await this._handler.restartIce(e),
                "transport.restartIce()"
              );
            }
            async updateIceServers({ iceServers: e } = {}) {
              if ((_.debug("updateIceServers()"), this._closed))
                throw new u.InvalidStateError("closed");
              if (!Array.isArray(e)) throw new TypeError("missing iceServers");
              return this._awaitQueue.push(
                async () => this._handler.updateIceServers(e),
                "transport.updateIceServers()"
              );
            }
            async produce({
              track: e,
              encodings: t,
              codecOptions: r,
              codec: n,
              stopTracks: s = !0,
              disableTrackOnPause: i = !0,
              zeroRtpOnPause: a = !1,
              appData: o = {},
            } = {}) {
              if ((_.debug("produce() [track:%o]", e), this._closed))
                throw new u.InvalidStateError("closed");
              if (!e) throw new TypeError("missing track");
              if ("send" !== this._direction)
                throw new u.UnsupportedError("not a sending Transport");
              if (!this._canProduceByKind[e.kind])
                throw new u.UnsupportedError(`cannot produce ${e.kind}`);
              if ("ended" === e.readyState)
                throw new u.InvalidStateError("track ended");
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (0 === this.listenerCount("produce"))
                throw new TypeError(
                  'no "produce" listener set into this transport'
                );
              if (o && "object" != typeof o)
                throw new TypeError("if given, appData must be an object");
              return this._awaitQueue
                .push(async () => {
                  let c;
                  if (t && !Array.isArray(t))
                    throw TypeError("encodings must be an array");
                  t && 0 === t.length
                    ? (c = void 0)
                    : t &&
                      (c = t.map((e) => {
                        const t = { active: !0 };
                        return (
                          !1 === e.active && (t.active = !1),
                          "boolean" == typeof e.dtx && (t.dtx = e.dtx),
                          "string" == typeof e.scalabilityMode &&
                            (t.scalabilityMode = e.scalabilityMode),
                          "number" == typeof e.scaleResolutionDownBy &&
                            (t.scaleResolutionDownBy = e.scaleResolutionDownBy),
                          "number" == typeof e.maxBitrate &&
                            (t.maxBitrate = e.maxBitrate),
                          "number" == typeof e.maxFramerate &&
                            (t.maxFramerate = e.maxFramerate),
                          "boolean" == typeof e.adaptivePtime &&
                            (t.adaptivePtime = e.adaptivePtime),
                          "string" == typeof e.priority &&
                            (t.priority = e.priority),
                          "string" == typeof e.networkPriority &&
                            (t.networkPriority = e.networkPriority),
                          t
                        );
                      }));
                  const {
                    localId: d,
                    rtpParameters: l,
                    rtpSender: u,
                  } = await this._handler.send({
                    track: e,
                    encodings: c,
                    codecOptions: r,
                    codec: n,
                  });
                  try {
                    h.validateRtpParameters(l);
                    const { id: t } = await new Promise((t, r) => {
                        this.safeEmit(
                          "produce",
                          { kind: e.kind, rtpParameters: l, appData: o },
                          t,
                          r
                        );
                      }),
                      r = new m.Producer({
                        id: t,
                        localId: d,
                        rtpSender: u,
                        track: e,
                        rtpParameters: l,
                        stopTracks: s,
                        disableTrackOnPause: i,
                        zeroRtpOnPause: a,
                        appData: o,
                      });
                    return (
                      this._producers.set(r.id, r),
                      this.handleProducer(r),
                      this._observer.safeEmit("newproducer", r),
                      r
                    );
                  } catch (e) {
                    throw (this._handler.stopSending(d).catch(() => {}), e);
                  }
                }, "transport.produce()")
                .catch((t) => {
                  if (s)
                    try {
                      e.stop();
                    } catch (e) {}
                  throw t;
                });
            }
            async consume({
              id: e,
              producerId: t,
              kind: r,
              rtpParameters: n,
              streamId: s,
              appData: i = {},
            }) {
              if ((_.debug("consume()"), this._closed))
                throw new u.InvalidStateError("closed");
              if ("recv" !== this._direction)
                throw new u.UnsupportedError("not a receiving Transport");
              if ("string" != typeof e) throw new TypeError("missing id");
              if ("string" != typeof t)
                throw new TypeError("missing producerId");
              if ("audio" !== r && "video" !== r)
                throw new TypeError(`invalid kind '${r}'`);
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (i && "object" != typeof i)
                throw new TypeError("if given, appData must be an object");
              const a = p.clone(n);
              if (!h.canReceive(a, this._extendedRtpCapabilities))
                throw new u.UnsupportedError("cannot consume this Producer");
              const o = new y({
                id: e,
                producerId: t,
                kind: r,
                rtpParameters: a,
                streamId: s,
                appData: i,
              });
              return (
                this._pendingConsumerTasks.push(o),
                (0, c.default)(() => {
                  this._closed ||
                    (!1 === this._consumerCreationInProgress &&
                      this.createPendingConsumers());
                }),
                o.promise
              );
            }
            async produceData({
              ordered: e = !0,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n = "",
              protocol: s = "",
              appData: i = {},
            } = {}) {
              if ((_.debug("produceData()"), this._closed))
                throw new u.InvalidStateError("closed");
              if ("send" !== this._direction)
                throw new u.UnsupportedError("not a sending Transport");
              if (!this._maxSctpMessageSize)
                throw new u.UnsupportedError(
                  "SCTP not enabled by remote Transport"
                );
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (0 === this.listenerCount("producedata"))
                throw new TypeError(
                  'no "producedata" listener set into this transport'
                );
              if (i && "object" != typeof i)
                throw new TypeError("if given, appData must be an object");
              return (
                (t || r) && (e = !1),
                this._awaitQueue.push(async () => {
                  const { dataChannel: a, sctpStreamParameters: o } =
                    await this._handler.sendDataChannel({
                      ordered: e,
                      maxPacketLifeTime: t,
                      maxRetransmits: r,
                      label: n,
                      protocol: s,
                    });
                  h.validateSctpStreamParameters(o);
                  const { id: c } = await new Promise((e, t) => {
                      this.safeEmit(
                        "producedata",
                        {
                          sctpStreamParameters: o,
                          label: n,
                          protocol: s,
                          appData: i,
                        },
                        e,
                        t
                      );
                    }),
                    d = new g.DataProducer({
                      id: c,
                      dataChannel: a,
                      sctpStreamParameters: o,
                      appData: i,
                    });
                  return (
                    this._dataProducers.set(d.id, d),
                    this.handleDataProducer(d),
                    this._observer.safeEmit("newdataproducer", d),
                    d
                  );
                }, "transport.produceData()")
              );
            }
            async consumeData({
              id: e,
              dataProducerId: t,
              sctpStreamParameters: r,
              label: n = "",
              protocol: s = "",
              appData: i = {},
            }) {
              if ((_.debug("consumeData()"), this._closed))
                throw new u.InvalidStateError("closed");
              if ("recv" !== this._direction)
                throw new u.UnsupportedError("not a receiving Transport");
              if (!this._maxSctpMessageSize)
                throw new u.UnsupportedError(
                  "SCTP not enabled by remote Transport"
                );
              if ("string" != typeof e) throw new TypeError("missing id");
              if ("string" != typeof t)
                throw new TypeError("missing dataProducerId");
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (i && "object" != typeof i)
                throw new TypeError("if given, appData must be an object");
              const a = p.clone(r);
              return (
                h.validateSctpStreamParameters(a),
                this._awaitQueue.push(async () => {
                  const { dataChannel: r } =
                      await this._handler.receiveDataChannel({
                        sctpStreamParameters: a,
                        label: n,
                        protocol: s,
                      }),
                    o = new v.DataConsumer({
                      id: e,
                      dataProducerId: t,
                      dataChannel: r,
                      sctpStreamParameters: a,
                      appData: i,
                    });
                  return (
                    this._dataConsumers.set(o.id, o),
                    this.handleDataConsumer(o),
                    this._observer.safeEmit("newdataconsumer", o),
                    o
                  );
                }, "transport.consumeData()")
              );
            }
            async createPendingConsumers() {
              (this._consumerCreationInProgress = !0),
                this._awaitQueue
                  .push(async () => {
                    if (0 === this._pendingConsumerTasks.length)
                      return void _.debug(
                        "createPendingConsumers() | there is no Consumer to be created"
                      );
                    const e = [...this._pendingConsumerTasks];
                    let t;
                    this._pendingConsumerTasks = [];
                    const r = [];
                    for (const t of e) {
                      const {
                        id: e,
                        kind: n,
                        rtpParameters: s,
                        streamId: i,
                      } = t.consumerOptions;
                      r.push({
                        trackId: e,
                        kind: n,
                        rtpParameters: s,
                        streamId: i,
                      });
                    }
                    try {
                      const n = await this._handler.receive(r);
                      for (let r = 0; r < n.length; ++r) {
                        const s = e[r],
                          i = n[r],
                          {
                            id: a,
                            producerId: o,
                            kind: c,
                            rtpParameters: d,
                            appData: l,
                          } = s.consumerOptions,
                          { localId: u, rtpReceiver: p, track: h } = i,
                          m = new f.Consumer({
                            id: a,
                            localId: u,
                            producerId: o,
                            rtpReceiver: p,
                            track: h,
                            rtpParameters: d,
                            appData: l,
                          });
                        this._consumers.set(m.id, m),
                          this.handleConsumer(m),
                          this._probatorConsumerCreated ||
                            t ||
                            "video" !== c ||
                            (t = m),
                          this._observer.safeEmit("newconsumer", m),
                          s.resolve(m);
                      }
                    } catch (t) {
                      for (const r of e) r.reject(t);
                    }
                    if (t)
                      try {
                        const e = h.generateProbatorRtpParameters(
                          t.rtpParameters
                        );
                        await this._handler.receive([
                          {
                            trackId: "probator",
                            kind: "video",
                            rtpParameters: e,
                          },
                        ]),
                          _.debug(
                            "createPendingConsumers() | Consumer for RTP probation created"
                          ),
                          (this._probatorConsumerCreated = !0);
                      } catch (e) {
                        _.error(
                          "createPendingConsumers() | failed to create Consumer for RTP probation:%o",
                          e
                        );
                      }
                  }, "transport.createPendingConsumers()")
                  .then(() => {
                    (this._consumerCreationInProgress = !1),
                      this._pendingConsumerTasks.length > 0 &&
                        this.createPendingConsumers();
                  })
                  .catch(() => {});
            }
            pausePendingConsumers() {
              (this._consumerPauseInProgress = !0),
                this._awaitQueue
                  .push(async () => {
                    if (0 === this._pendingPauseConsumers.size)
                      return void _.debug(
                        "pausePendingConsumers() | there is no Consumer to be paused"
                      );
                    const e = Array.from(this._pendingPauseConsumers.values());
                    this._pendingPauseConsumers.clear();
                    try {
                      const t = e.map((e) => e.localId);
                      await this._handler.pauseReceiving(t);
                    } catch (e) {
                      _.error(
                        "pausePendingConsumers() | failed to pause Consumers:",
                        e
                      );
                    }
                  }, "transport.pausePendingConsumers")
                  .then(() => {
                    (this._consumerPauseInProgress = !1),
                      this._pendingPauseConsumers.size > 0 &&
                        this.pausePendingConsumers();
                  })
                  .catch(() => {});
            }
            resumePendingConsumers() {
              (this._consumerResumeInProgress = !0),
                this._awaitQueue
                  .push(async () => {
                    if (0 === this._pendingResumeConsumers.size)
                      return void _.debug(
                        "resumePendingConsumers() | there is no Consumer to be resumed"
                      );
                    const e = Array.from(this._pendingResumeConsumers.values());
                    this._pendingResumeConsumers.clear();
                    try {
                      const t = e.map((e) => e.localId);
                      await this._handler.resumeReceiving(t);
                    } catch (e) {
                      _.error(
                        "resumePendingConsumers() | failed to resume Consumers:",
                        e
                      );
                    }
                  }, "transport.resumePendingConsumers")
                  .then(() => {
                    (this._consumerResumeInProgress = !1),
                      this._pendingResumeConsumers.size > 0 &&
                        this.resumePendingConsumers();
                  })
                  .catch(() => {});
            }
            closePendingConsumers() {
              (this._consumerCloseInProgress = !0),
                this._awaitQueue
                  .push(async () => {
                    if (0 === this._pendingCloseConsumers.size)
                      return void _.debug(
                        "closePendingConsumers() | there is no Consumer to be closed"
                      );
                    const e = Array.from(this._pendingCloseConsumers.values());
                    this._pendingCloseConsumers.clear();
                    try {
                      await this._handler.stopReceiving(
                        e.map((e) => e.localId)
                      );
                    } catch (e) {
                      _.error(
                        "closePendingConsumers() | failed to close Consumers:",
                        e
                      );
                    }
                  }, "transport.closePendingConsumers")
                  .then(() => {
                    (this._consumerCloseInProgress = !1),
                      this._pendingCloseConsumers.size > 0 &&
                        this.closePendingConsumers();
                  })
                  .catch(() => {});
            }
            handleHandler() {
              const e = this._handler;
              e.on("@connect", ({ dtlsParameters: e }, t, r) => {
                this._closed
                  ? r(new u.InvalidStateError("closed"))
                  : this.safeEmit("connect", { dtlsParameters: e }, t, r);
              }),
                e.on("@icegatheringstatechange", (e) => {
                  e !== this._iceGatheringState &&
                    (_.debug("ICE gathering state changed to %s", e),
                    (this._iceGatheringState = e),
                    this._closed ||
                      this.safeEmit("icegatheringstatechange", e));
                }),
                e.on("@connectionstatechange", (e) => {
                  e !== this._connectionState &&
                    (_.debug("connection state changed to %s", e),
                    (this._connectionState = e),
                    this._closed || this.safeEmit("connectionstatechange", e));
                });
            }
            handleProducer(e) {
              e.on("@close", () => {
                this._producers.delete(e.id),
                  this._closed ||
                    this._awaitQueue
                      .push(
                        async () => await this._handler.stopSending(e.localId),
                        "producer @close event"
                      )
                      .catch((e) => _.warn("producer.close() failed:%o", e));
              }),
                e.on("@pause", (t, r) => {
                  this._awaitQueue
                    .push(
                      async () => await this._handler.pauseSending(e.localId),
                      "producer @pause event"
                    )
                    .then(t)
                    .catch(r);
                }),
                e.on("@resume", (t, r) => {
                  this._awaitQueue
                    .push(
                      async () => await this._handler.resumeSending(e.localId),
                      "producer @resume event"
                    )
                    .then(t)
                    .catch(r);
                }),
                e.on("@replacetrack", (t, r, n) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        await this._handler.replaceTrack(e.localId, t),
                      "producer @replacetrack event"
                    )
                    .then(r)
                    .catch(n);
                }),
                e.on("@setmaxspatiallayer", (t, r, n) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        await this._handler.setMaxSpatialLayer(e.localId, t),
                      "producer @setmaxspatiallayer event"
                    )
                    .then(r)
                    .catch(n);
                }),
                e.on("@setrtpencodingparameters", (t, r, n) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        await this._handler.setRtpEncodingParameters(
                          e.localId,
                          t
                        ),
                      "producer @setrtpencodingparameters event"
                    )
                    .then(r)
                    .catch(n);
                }),
                e.on("@getstats", (t, r) => {
                  if (this._closed) return r(new u.InvalidStateError("closed"));
                  this._handler.getSenderStats(e.localId).then(t).catch(r);
                });
            }
            handleConsumer(e) {
              e.on("@close", () => {
                this._consumers.delete(e.id),
                  this._pendingPauseConsumers.delete(e.id),
                  this._pendingResumeConsumers.delete(e.id),
                  this._closed ||
                    (this._pendingCloseConsumers.set(e.id, e),
                    !1 === this._consumerCloseInProgress &&
                      this.closePendingConsumers());
              }),
                e.on("@pause", () => {
                  this._pendingResumeConsumers.has(e.id) &&
                    this._pendingResumeConsumers.delete(e.id),
                    this._pendingPauseConsumers.set(e.id, e),
                    (0, c.default)(() => {
                      this._closed ||
                        (!1 === this._consumerPauseInProgress &&
                          this.pausePendingConsumers());
                    });
                }),
                e.on("@resume", () => {
                  this._pendingPauseConsumers.has(e.id) &&
                    this._pendingPauseConsumers.delete(e.id),
                    this._pendingResumeConsumers.set(e.id, e),
                    (0, c.default)(() => {
                      this._closed ||
                        (!1 === this._consumerResumeInProgress &&
                          this.resumePendingConsumers());
                    });
                }),
                e.on("@getstats", (t, r) => {
                  if (this._closed) return r(new u.InvalidStateError("closed"));
                  this._handler.getReceiverStats(e.localId).then(t).catch(r);
                });
            }
            handleDataProducer(e) {
              e.on("@close", () => {
                this._dataProducers.delete(e.id);
              });
            }
            handleDataConsumer(e) {
              e.on("@close", () => {
                this._dataConsumers.delete(e.id);
              });
            }
          }
          t.Transport = b;
        },
        5602: (e) => {
          var t = (e.exports = {
            v: [{ name: "version", reg: /^(\d*)$/ }],
            o: [
              {
                name: "origin",
                reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
                names: [
                  "username",
                  "sessionId",
                  "sessionVersion",
                  "netType",
                  "ipVer",
                  "address",
                ],
                format: "%s %s %d %s IP%d %s",
              },
            ],
            s: [{ name: "name" }],
            i: [{ name: "description" }],
            u: [{ name: "uri" }],
            e: [{ name: "email" }],
            p: [{ name: "phone" }],
            z: [{ name: "timezones" }],
            r: [{ name: "repeats" }],
            t: [
              {
                name: "timing",
                reg: /^(\d*) (\d*)/,
                names: ["start", "stop"],
                format: "%d %d",
              },
            ],
            c: [
              {
                name: "connection",
                reg: /^IN IP(\d) (\S*)/,
                names: ["version", "ip"],
                format: "IN IP%d %s",
              },
            ],
            b: [
              {
                push: "bandwidth",
                reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
                names: ["type", "limit"],
                format: "%s:%s",
              },
            ],
            m: [
              {
                reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
                names: ["type", "port", "protocol", "payloads"],
                format: "%s %d %s %s",
              },
            ],
            a: [
              {
                push: "rtp",
                reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
                names: ["payload", "codec", "rate", "encoding"],
                format: function (e) {
                  return e.encoding
                    ? "rtpmap:%d %s/%s/%s"
                    : e.rate
                    ? "rtpmap:%d %s/%s"
                    : "rtpmap:%d %s";
                },
              },
              {
                push: "fmtp",
                reg: /^fmtp:(\d*) ([\S| ]*)/,
                names: ["payload", "config"],
                format: "fmtp:%d %s",
              },
              { name: "control", reg: /^control:(.*)/, format: "control:%s" },
              {
                name: "rtcp",
                reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
                names: ["port", "netType", "ipVer", "address"],
                format: function (e) {
                  return null != e.address ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
                },
              },
              {
                push: "rtcpFbTrrInt",
                reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
                names: ["payload", "value"],
                format: "rtcp-fb:%s trr-int %d",
              },
              {
                push: "rtcpFb",
                reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
                names: ["payload", "type", "subtype"],
                format: function (e) {
                  return null != e.subtype
                    ? "rtcp-fb:%s %s %s"
                    : "rtcp-fb:%s %s";
                },
              },
              {
                push: "ext",
                reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
                names: ["value", "direction", "encrypt-uri", "uri", "config"],
                format: function (e) {
                  return (
                    "extmap:%d" +
                    (e.direction ? "/%s" : "%v") +
                    (e["encrypt-uri"] ? " %s" : "%v") +
                    " %s" +
                    (e.config ? " %s" : "")
                  );
                },
              },
              { name: "extmapAllowMixed", reg: /^(extmap-allow-mixed)/ },
              {
                push: "crypto",
                reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
                names: ["id", "suite", "config", "sessionConfig"],
                format: function (e) {
                  return null != e.sessionConfig
                    ? "crypto:%d %s %s %s"
                    : "crypto:%d %s %s";
                },
              },
              { name: "setup", reg: /^setup:(\w*)/, format: "setup:%s" },
              {
                name: "connectionType",
                reg: /^connection:(new|existing)/,
                format: "connection:%s",
              },
              { name: "mid", reg: /^mid:([^\s]*)/, format: "mid:%s" },
              { name: "msid", reg: /^msid:(.*)/, format: "msid:%s" },
              {
                name: "ptime",
                reg: /^ptime:(\d*(?:\.\d*)*)/,
                format: "ptime:%d",
              },
              {
                name: "maxptime",
                reg: /^maxptime:(\d*(?:\.\d*)*)/,
                format: "maxptime:%d",
              },
              {
                name: "direction",
                reg: /^(sendrecv|recvonly|sendonly|inactive)/,
              },
              { name: "icelite", reg: /^(ice-lite)/ },
              {
                name: "iceUfrag",
                reg: /^ice-ufrag:(\S*)/,
                format: "ice-ufrag:%s",
              },
              { name: "icePwd", reg: /^ice-pwd:(\S*)/, format: "ice-pwd:%s" },
              {
                name: "fingerprint",
                reg: /^fingerprint:(\S*) (\S*)/,
                names: ["type", "hash"],
                format: "fingerprint:%s %s",
              },
              {
                push: "candidates",
                reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
                names: [
                  "foundation",
                  "component",
                  "transport",
                  "priority",
                  "ip",
                  "port",
                  "type",
                  "raddr",
                  "rport",
                  "tcptype",
                  "generation",
                  "network-id",
                  "network-cost",
                ],
                format: function (e) {
                  var t = "candidate:%s %d %s %d %s %d typ %s";
                  return (
                    (t += null != e.raddr ? " raddr %s rport %d" : "%v%v"),
                    (t += null != e.tcptype ? " tcptype %s" : "%v"),
                    null != e.generation && (t += " generation %d"),
                    (t += null != e["network-id"] ? " network-id %d" : "%v"),
                    (t += null != e["network-cost"] ? " network-cost %d" : "%v")
                  );
                },
              },
              { name: "endOfCandidates", reg: /^(end-of-candidates)/ },
              {
                name: "remoteCandidates",
                reg: /^remote-candidates:(.*)/,
                format: "remote-candidates:%s",
              },
              {
                name: "iceOptions",
                reg: /^ice-options:(\S*)/,
                format: "ice-options:%s",
              },
              {
                push: "ssrcs",
                reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
                names: ["id", "attribute", "value"],
                format: function (e) {
                  var t = "ssrc:%d";
                  return (
                    null != e.attribute &&
                      ((t += " %s"), null != e.value && (t += ":%s")),
                    t
                  );
                },
              },
              {
                push: "ssrcGroups",
                reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
                names: ["semantics", "ssrcs"],
                format: "ssrc-group:%s %s",
              },
              {
                name: "msidSemantic",
                reg: /^msid-semantic:\s?(\w*) (\S*)/,
                names: ["semantic", "token"],
                format: "msid-semantic: %s %s",
              },
              {
                push: "groups",
                reg: /^group:(\w*) (.*)/,
                names: ["type", "mids"],
                format: "group:%s %s",
              },
              { name: "rtcpMux", reg: /^(rtcp-mux)/ },
              { name: "rtcpRsize", reg: /^(rtcp-rsize)/ },
              {
                name: "sctpmap",
                reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
                names: ["sctpmapNumber", "app", "maxMessageSize"],
                format: function (e) {
                  return null != e.maxMessageSize
                    ? "sctpmap:%s %s %s"
                    : "sctpmap:%s %s";
                },
              },
              {
                name: "xGoogleFlag",
                reg: /^x-google-flag:([^\s]*)/,
                format: "x-google-flag:%s",
              },
              {
                push: "rids",
                reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
                names: ["id", "direction", "params"],
                format: function (e) {
                  return e.params ? "rid:%s %s %s" : "rid:%s %s";
                },
              },
              {
                push: "imageattrs",
                reg: new RegExp(
                  "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
                ),
                names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
                format: function (e) {
                  return "imageattr:%s %s %s" + (e.dir2 ? " %s %s" : "");
                },
              },
              {
                name: "simulcast",
                reg: new RegExp(
                  "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
                ),
                names: ["dir1", "list1", "dir2", "list2"],
                format: function (e) {
                  return "simulcast:%s %s" + (e.dir2 ? " %s %s" : "");
                },
              },
              {
                name: "simulcast_03",
                reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
                names: ["value"],
                format: "simulcast: %s",
              },
              {
                name: "framerate",
                reg: /^framerate:(\d+(?:$|\.\d+))/,
                format: "framerate:%s",
              },
              {
                name: "sourceFilter",
                reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
                names: [
                  "filterMode",
                  "netType",
                  "addressTypes",
                  "destAddress",
                  "srcList",
                ],
                format: "source-filter: %s %s %s %s %s",
              },
              { name: "bundleOnly", reg: /^(bundle-only)/ },
              { name: "label", reg: /^label:(.+)/, format: "label:%s" },
              {
                name: "sctpPort",
                reg: /^sctp-port:(\d+)$/,
                format: "sctp-port:%s",
              },
              {
                name: "maxMessageSize",
                reg: /^max-message-size:(\d+)$/,
                format: "max-message-size:%s",
              },
              {
                push: "tsRefClocks",
                reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
                names: ["clksrc", "clksrcExt"],
                format: function (e) {
                  return "ts-refclk:%s" + (null != e.clksrcExt ? "=%s" : "");
                },
              },
              {
                name: "mediaClk",
                reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
                names: [
                  "id",
                  "mediaClockName",
                  "mediaClockValue",
                  "rateNumerator",
                  "rateDenominator",
                ],
                format: function (e) {
                  var t = "mediaclk:";
                  return (
                    (t += null != e.id ? "id=%s %s" : "%v%s"),
                    (t += null != e.mediaClockValue ? "=%s" : ""),
                    (t += null != e.rateNumerator ? " rate=%s" : ""),
                    (t += null != e.rateDenominator ? "/%s" : "")
                  );
                },
              },
              { name: "keywords", reg: /^keywds:(.+)$/, format: "keywds:%s" },
              { name: "content", reg: /^content:(.+)/, format: "content:%s" },
              {
                name: "bfcpFloorCtrl",
                reg: /^floorctrl:(c-only|s-only|c-s)/,
                format: "floorctrl:%s",
              },
              { name: "bfcpConfId", reg: /^confid:(\d+)/, format: "confid:%s" },
              { name: "bfcpUserId", reg: /^userid:(\d+)/, format: "userid:%s" },
              {
                name: "bfcpFloorId",
                reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
                names: ["id", "mStream"],
                format: "floorid:%s mstrm:%s",
              },
              { push: "invalid", names: ["value"] },
            ],
          });
          Object.keys(t).forEach(function (e) {
            t[e].forEach(function (e) {
              e.reg || (e.reg = /(.*)/), e.format || (e.format = "%s");
            });
          });
        },
        5765: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Safari12 = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = i(r(1765)),
            d = i(r(8046)),
            l = i(r(5544)),
            u = i(r(5938)),
            p = i(r(4256)),
            h = r(4893),
            m = r(521),
            f = r(1305),
            g = r(3303),
            v = new o.Logger("Safari12"),
            _ = { OS: 1024, MIS: 1024 };
          class y extends m.HandlerInterface {
            static createFactory() {
              return () => new y();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Safari12";
            }
            close() {
              if ((v.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              v.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = a.parse(t.sdp),
                  n = l.extractRtpCapabilities({ sdpObject: r });
                return p.addNackSuppportForOpus(n), n;
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return v.debug("getNativeSctpCapabilities()"), { numStreams: _ };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              this.assertNotClosed(),
                v.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (v.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              this.assertNotClosed(), v.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                v.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  v.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  v.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("send() [kind:%s, track.id:%s]", e.kind, e.id);
              const s = c.clone(this._sendingRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, n);
              const i = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                p = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                });
              let h,
                m = await this._pc.createOffer(),
                f = a.parse(m.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f,
                }));
              const _ = (0, g.parse)((t || [{}])[0].scalabilityMode);
              t &&
                t.length > 1 &&
                (v.debug("send() | enabling legacy simulcast"),
                (f = a.parse(m.sdp)),
                (h = f.media[o.idx]),
                u.addLegacySimulcast({
                  offerMediaObject: h,
                  numStreams: t.length,
                }),
                (m = { type: "offer", sdp: a.write(f) })),
                v.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m
                ),
                await this._pc.setLocalDescription(m);
              const y = p.mid;
              if (
                ((s.mid = y),
                (f = a.parse(this._pc.localDescription.sdp)),
                (h = f.media[o.idx]),
                (s.rtcp.cname = l.getCname({ offerMediaObject: h })),
                (s.encodings = u.getRtpEncodings({ offerMediaObject: h })),
                t)
              )
                for (let e = 0; e < s.encodings.length; ++e)
                  t[e] && Object.assign(s.encodings[e], t[e]);
              if (
                s.encodings.length > 1 &&
                ("video/vp8" === s.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === s.codecs[0].mimeType.toLowerCase())
              )
                for (const e of s.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${_.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: h,
                reuseMid: o.reuseMid,
                offerRtpParameters: s,
                answerRtpParameters: i,
                codecOptions: r,
              });
              const b = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                v.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  b
                ),
                await this._pc.setRemoteDescription(b),
                this._mapMidTransceiver.set(y, p),
                { localId: y, rtpParameters: s, rtpSender: p.sender }
              );
            }
            async stopSending(e) {
              if ((this.assertSendDirection(), this._closed)) return;
              v.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              v.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              v.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "sendonly"),
                this._remoteSdp.resumeSendingMediaSection(e);
              const r = await this._pc.createOffer();
              v.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? v.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : v.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              v.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                v.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n),
                this._remoteSdp.muxMediaSectionSimulcast(e, n.encodings);
              const s = await this._pc.createOffer();
              v.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                s
              ),
                await this._pc.setLocalDescription(s);
              const i = { type: "answer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              v.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % _.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  v.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: n,
                  rtpParameters: s,
                  streamId: i,
                } = t;
                v.debug("receive() [trackId:%s, kind:%s]", e, n);
                const a = s.mid || String(this._mapMidTransceiver.size);
                r.set(e, a),
                  this._remoteSdp.receive({
                    mid: a,
                    kind: n,
                    offerRtpParameters: s,
                    streamId: i || s.rtcp.cname,
                    trackId: e,
                  });
              }
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              let s = await this._pc.createAnswer();
              const i = a.parse(s.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: n } = t,
                  s = r.get(e),
                  a = i.media.find((e) => String(e.mid) === s);
                l.applyCodecParameters({
                  offerRtpParameters: n,
                  answerMediaObject: a,
                });
              }
              (s = { type: "answer", sdp: a.write(i) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: i,
                  })),
                v.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s);
              for (const n of e) {
                const { trackId: e } = n,
                  s = r.get(e),
                  i = this._pc.getTransceivers().find((e) => e.mid === s);
                if (!i) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(s, i),
                  t.push({
                    localId: s,
                    track: i.receiver.track,
                    rtpReceiver: i.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                v.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                v.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                v.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              v.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              v.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              v.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                v.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new h.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Safari12 = y;
        },
        5938: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addLegacySimulcast = t.getRtpEncodings = void 0),
            (t.getRtpEncodings = function ({ offerMediaObject: e }) {
              const t = new Set();
              for (const r of e.ssrcs || []) {
                const e = r.id;
                t.add(e);
              }
              if (0 === t.size) throw new Error("no a=ssrc lines found");
              const r = new Map();
              for (const n of e.ssrcGroups || []) {
                if ("FID" !== n.semantics) continue;
                let [e, s] = n.ssrcs.split(/\s+/);
                (e = Number(e)),
                  (s = Number(s)),
                  t.has(e) && (t.delete(e), t.delete(s), r.set(e, s));
              }
              for (const e of t) r.set(e, null);
              const n = [];
              for (const [e, t] of r) {
                const r = { ssrc: e };
                t && (r.rtx = { ssrc: t }), n.push(r);
              }
              return n;
            }),
            (t.addLegacySimulcast = function ({
              offerMediaObject: e,
              numStreams: t,
            }) {
              if (t <= 1)
                throw new TypeError("numStreams must be greater than 1");
              const r = (e.ssrcs || []).find((e) => "msid" === e.attribute);
              if (!r)
                throw new Error("a=ssrc line with msid information not found");
              const [n, s] = r.value.split(" "),
                i = r.id;
              let a;
              (e.ssrcGroups || []).some((e) => {
                if ("FID" !== e.semantics) return !1;
                const t = e.ssrcs.split(/\s+/);
                return Number(t[0]) === i && ((a = Number(t[1])), !0);
              });
              const o = e.ssrcs.find((e) => "cname" === e.attribute);
              if (!o)
                throw new Error("a=ssrc line with cname information not found");
              const c = o.value,
                d = [],
                l = [];
              for (let e = 0; e < t; ++e) d.push(i + e), a && l.push(a + e);
              (e.ssrcGroups = []),
                (e.ssrcs = []),
                e.ssrcGroups.push({ semantics: "SIM", ssrcs: d.join(" ") });
              for (let t = 0; t < d.length; ++t) {
                const r = d[t];
                e.ssrcs.push({ id: r, attribute: "cname", value: c }),
                  e.ssrcs.push({
                    id: r,
                    attribute: "msid",
                    value: `${n} ${s}`,
                  });
              }
              for (let t = 0; t < l.length; ++t) {
                const r = d[t],
                  i = l[t];
                e.ssrcs.push({ id: i, attribute: "cname", value: c }),
                  e.ssrcs.push({
                    id: i,
                    attribute: "msid",
                    value: `${n} ${s}`,
                  }),
                  e.ssrcGroups.push({ semantics: "FID", ssrcs: `${r} ${i}` });
              }
            });
        },
        5953: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(3240),
            (function (e) {
              var t = n,
                r = t.lib,
                s = r.WordArray,
                i = r.Hasher,
                a = t.x64.Word,
                o = t.algo,
                c = [],
                d = [],
                l = [];
              !(function () {
                for (var e = 1, t = 0, r = 0; r < 24; r++) {
                  c[e + 5 * t] = (((r + 1) * (r + 2)) / 2) % 64;
                  var n = (2 * e + 3 * t) % 5;
                  (e = t % 5), (t = n);
                }
                for (e = 0; e < 5; e++)
                  for (t = 0; t < 5; t++)
                    d[e + 5 * t] = t + ((2 * e + 3 * t) % 5) * 5;
                for (var s = 1, i = 0; i < 24; i++) {
                  for (var o = 0, u = 0, p = 0; p < 7; p++) {
                    if (1 & s) {
                      var h = (1 << p) - 1;
                      h < 32 ? (u ^= 1 << h) : (o ^= 1 << (h - 32));
                    }
                    128 & s ? (s = (s << 1) ^ 113) : (s <<= 1);
                  }
                  l[i] = a.create(o, u);
                }
              })();
              var u = [];
              !(function () {
                for (var e = 0; e < 25; e++) u[e] = a.create();
              })();
              var p = (o.SHA3 = i.extend({
                cfg: i.cfg.extend({ outputLength: 512 }),
                _doReset: function () {
                  for (var e = (this._state = []), t = 0; t < 25; t++)
                    e[t] = new a.init();
                  this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._state, n = this.blockSize / 2, s = 0;
                    s < n;
                    s++
                  ) {
                    var i = e[t + 2 * s],
                      a = e[t + 2 * s + 1];
                    (i =
                      (16711935 & ((i << 8) | (i >>> 24))) |
                      (4278255360 & ((i << 24) | (i >>> 8)))),
                      (a =
                        (16711935 & ((a << 8) | (a >>> 24))) |
                        (4278255360 & ((a << 24) | (a >>> 8)))),
                      ((P = r[s]).high ^= a),
                      (P.low ^= i);
                  }
                  for (var o = 0; o < 24; o++) {
                    for (var p = 0; p < 5; p++) {
                      for (var h = 0, m = 0, f = 0; f < 5; f++)
                        (h ^= (P = r[p + 5 * f]).high), (m ^= P.low);
                      var g = u[p];
                      (g.high = h), (g.low = m);
                    }
                    for (p = 0; p < 5; p++) {
                      var v = u[(p + 4) % 5],
                        _ = u[(p + 1) % 5],
                        y = _.high,
                        b = _.low;
                      for (
                        h = v.high ^ ((y << 1) | (b >>> 31)),
                          m = v.low ^ ((b << 1) | (y >>> 31)),
                          f = 0;
                        f < 5;
                        f++
                      )
                        ((P = r[p + 5 * f]).high ^= h), (P.low ^= m);
                    }
                    for (var w = 1; w < 25; w++) {
                      var S = (P = r[w]).high,
                        R = P.low,
                        k = c[w];
                      k < 32
                        ? ((h = (S << k) | (R >>> (32 - k))),
                          (m = (R << k) | (S >>> (32 - k))))
                        : ((h = (R << (k - 32)) | (S >>> (64 - k))),
                          (m = (S << (k - 32)) | (R >>> (64 - k))));
                      var E = u[d[w]];
                      (E.high = h), (E.low = m);
                    }
                    var C = u[0],
                      T = r[0];
                    for (C.high = T.high, C.low = T.low, p = 0; p < 5; p++)
                      for (f = 0; f < 5; f++) {
                        var P = r[(w = p + 5 * f)],
                          O = u[w],
                          x = u[((p + 1) % 5) + 5 * f],
                          D = u[((p + 2) % 5) + 5 * f];
                        (P.high = O.high ^ (~x.high & D.high)),
                          (P.low = O.low ^ (~x.low & D.low));
                      }
                    P = r[0];
                    var I = l[o];
                    (P.high ^= I.high), (P.low ^= I.low);
                  }
                },
                _doFinalize: function () {
                  var t = this._data,
                    r = t.words,
                    n = (this._nDataBytes, 8 * t.sigBytes),
                    i = 32 * this.blockSize;
                  (r[n >>> 5] |= 1 << (24 - (n % 32))),
                    (r[((e.ceil((n + 1) / i) * i) >>> 5) - 1] |= 128),
                    (t.sigBytes = 4 * r.length),
                    this._process();
                  for (
                    var a = this._state,
                      o = this.cfg.outputLength / 8,
                      c = o / 8,
                      d = [],
                      l = 0;
                    l < c;
                    l++
                  ) {
                    var u = a[l],
                      p = u.high,
                      h = u.low;
                    (p =
                      (16711935 & ((p << 8) | (p >>> 24))) |
                      (4278255360 & ((p << 24) | (p >>> 8)))),
                      (h =
                        (16711935 & ((h << 8) | (h >>> 24))) |
                        (4278255360 & ((h << 24) | (h >>> 8)))),
                      d.push(h),
                      d.push(p);
                  }
                  return new s.init(d, o);
                },
                clone: function () {
                  for (
                    var e = i.clone.call(this),
                      t = (e._state = this._state.slice(0)),
                      r = 0;
                    r < 25;
                    r++
                  )
                    t[r] = t[r].clone();
                  return e;
                },
              }));
              (t.SHA3 = i._createHelper(p)),
                (t.HmacSHA3 = i._createHmacHelper(p));
            })(Math),
            n.SHA3);
        },
        6004: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Device = t.detectDevice = void 0);
          const a = r(7232),
            o = r(2994),
            c = r(2010),
            d = r(4893),
            l = i(r(1765)),
            u = i(r(8046)),
            p = r(5601),
            h = r(2183),
            m = r(11),
            f = r(5535),
            g = r(8155),
            v = r(7402),
            _ = r(2292),
            y = r(1767),
            b = r(5765),
            w = r(9676),
            S = r(8633),
            R = r(4039),
            k = r(9352),
            E = new o.Logger("Device");
          function C() {
            if (
              "object" == typeof navigator &&
              "ReactNative" === navigator.product
            )
              return (
                E.debug("detectDevice() | React-Native detected"),
                "undefined" == typeof RTCPeerConnection
                  ? void E.warn(
                      "detectDevice() | unsupported react-native-webrtc without RTCPeerConnection, forgot to call registerGlobals()?"
                    )
                  : "undefined" != typeof RTCRtpTransceiver
                  ? (E.debug(
                      "detectDevice() | ReactNative UnifiedPlan handler chosen"
                    ),
                    "ReactNativeUnifiedPlan")
                  : (E.debug(
                      "detectDevice() | ReactNative PlanB handler chosen"
                    ),
                    "ReactNative")
              );
            if (
              "object" != typeof navigator ||
              "string" != typeof navigator.userAgent
            )
              E.warn("detectDevice() | unknown device");
            else {
              const e = navigator.userAgent,
                t = new a.UAParser(e);
              E.debug(
                "detectDevice() | browser detected [ua:%s, parsed:%o]",
                e,
                t.getResult()
              );
              const r = t.getBrowser(),
                n = r.name?.toLowerCase(),
                s = parseInt(r.major ?? "0"),
                i = t.getEngine(),
                o = i.name?.toLowerCase(),
                c = t.getOS(),
                d = c.name?.toLowerCase(),
                l = parseFloat(c.version ?? "0"),
                u = t.getDevice(),
                p = u.model?.toLowerCase(),
                h = "ios" === d || "ipad" === p,
                m =
                  n &&
                  [
                    "chrome",
                    "chromium",
                    "mobile chrome",
                    "chrome webview",
                    "chrome headless",
                  ].includes(n),
                f =
                  n &&
                  ["firefox", "mobile firefox", "mobile focus"].includes(n),
                g = n && ["safari", "mobile safari"].includes(n),
                v = n && ["edge"].includes(n);
              if ((m || v) && !h && s >= 111) return "Chrome111";
              if ((m && !h && s >= 74) || (v && !h && s >= 88))
                return "Chrome74";
              if (m && !h && s >= 70) return "Chrome70";
              if (m && !h && s >= 67) return "Chrome67";
              if (m && !h && s >= 55) return "Chrome55";
              if (f && !h && s >= 120) return "Firefox120";
              if (f && !h && s >= 60) return "Firefox60";
              if (f && h && l >= 14.3) return "Safari12";
              if (
                g &&
                s >= 12 &&
                "undefined" != typeof RTCRtpTransceiver &&
                RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection")
              )
                return "Safari12";
              if (g && s >= 11) return "Safari11";
              if (v && !h && s >= 11 && s <= 18) return "Edge11";
              if (
                "webkit" === o &&
                h &&
                "undefined" != typeof RTCRtpTransceiver &&
                RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection")
              )
                return "Safari12";
              if ("blink" === o) {
                const t = e.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
                if (t) {
                  const e = Number(t[1]);
                  return e >= 111
                    ? "Chrome111"
                    : e >= 74
                    ? "Chrome74"
                    : e >= 70
                    ? "Chrome70"
                    : e >= 67
                    ? "Chrome67"
                    : "Chrome55";
                }
                return "Chrome111";
              }
              E.warn(
                "detectDevice() | browser not supported [name:%s, version:%s]",
                n,
                s
              );
            }
          }
          t.detectDevice = C;
          t.Device = class {
            constructor({
              handlerName: e,
              handlerFactory: t,
              Handler: r,
            } = {}) {
              if (
                ((this._loaded = !1),
                (this._observer = new c.EnhancedEventEmitter()),
                E.debug("constructor()"),
                r)
              ) {
                if (
                  (E.warn(
                    "constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead"
                  ),
                  "string" != typeof r)
                )
                  throw new TypeError(
                    "non string Handler option no longer supported, use handlerFactory instead"
                  );
                e = r;
              }
              if (e && t)
                throw new TypeError(
                  "just one of handlerName or handlerInterface can be given"
                );
              if (t) this._handlerFactory = t;
              else {
                if (e) E.debug("constructor() | handler given: %s", e);
                else {
                  if (!(e = C()))
                    throw new d.UnsupportedError("device not supported");
                  E.debug("constructor() | detected handler: %s", e);
                }
                switch (e) {
                  case "Chrome111":
                    this._handlerFactory = h.Chrome111.createFactory();
                    break;
                  case "Chrome74":
                    this._handlerFactory = m.Chrome74.createFactory();
                    break;
                  case "Chrome70":
                    this._handlerFactory = f.Chrome70.createFactory();
                    break;
                  case "Chrome67":
                    this._handlerFactory = g.Chrome67.createFactory();
                    break;
                  case "Chrome55":
                    this._handlerFactory = v.Chrome55.createFactory();
                    break;
                  case "Firefox120":
                    this._handlerFactory = _.Firefox120.createFactory();
                    break;
                  case "Firefox60":
                    this._handlerFactory = y.Firefox60.createFactory();
                    break;
                  case "Safari12":
                    this._handlerFactory = b.Safari12.createFactory();
                    break;
                  case "Safari11":
                    this._handlerFactory = w.Safari11.createFactory();
                    break;
                  case "Edge11":
                    this._handlerFactory = S.Edge11.createFactory();
                    break;
                  case "ReactNativeUnifiedPlan":
                    this._handlerFactory =
                      R.ReactNativeUnifiedPlan.createFactory();
                    break;
                  case "ReactNative":
                    this._handlerFactory = k.ReactNative.createFactory();
                    break;
                  default:
                    throw new TypeError(`unknown handlerName "${e}"`);
                }
              }
              const n = this._handlerFactory();
              (this._handlerName = n.name),
                n.close(),
                (this._extendedRtpCapabilities = void 0),
                (this._recvRtpCapabilities = void 0),
                (this._canProduceByKind = { audio: !1, video: !1 }),
                (this._sctpCapabilities = void 0);
            }
            get handlerName() {
              return this._handlerName;
            }
            get loaded() {
              return this._loaded;
            }
            get rtpCapabilities() {
              if (!this._loaded) throw new d.InvalidStateError("not loaded");
              return this._recvRtpCapabilities;
            }
            get sctpCapabilities() {
              if (!this._loaded) throw new d.InvalidStateError("not loaded");
              return this._sctpCapabilities;
            }
            get observer() {
              return this._observer;
            }
            async load({ routerRtpCapabilities: e }) {
              let t;
              E.debug("load() [routerRtpCapabilities:%o]", e);
              try {
                if (this._loaded)
                  throw new d.InvalidStateError("already loaded");
                const r = l.clone(e);
                u.validateRtpCapabilities(r), (t = this._handlerFactory());
                const n = await t.getNativeRtpCapabilities();
                E.debug("load() | got native RTP capabilities:%o", n);
                const s = l.clone(n);
                u.validateRtpCapabilities(s),
                  (this._extendedRtpCapabilities = u.getExtendedRtpCapabilities(
                    s,
                    r
                  )),
                  E.debug(
                    "load() | got extended RTP capabilities:%o",
                    this._extendedRtpCapabilities
                  ),
                  (this._canProduceByKind.audio = u.canSend(
                    "audio",
                    this._extendedRtpCapabilities
                  )),
                  (this._canProduceByKind.video = u.canSend(
                    "video",
                    this._extendedRtpCapabilities
                  )),
                  (this._recvRtpCapabilities = u.getRecvRtpCapabilities(
                    this._extendedRtpCapabilities
                  )),
                  u.validateRtpCapabilities(this._recvRtpCapabilities),
                  E.debug(
                    "load() | got receiving RTP capabilities:%o",
                    this._recvRtpCapabilities
                  ),
                  (this._sctpCapabilities =
                    await t.getNativeSctpCapabilities()),
                  E.debug(
                    "load() | got native SCTP capabilities:%o",
                    this._sctpCapabilities
                  ),
                  u.validateSctpCapabilities(this._sctpCapabilities),
                  E.debug("load() succeeded"),
                  (this._loaded = !0),
                  t.close();
              } catch (e) {
                throw (t && t.close(), e);
              }
            }
            canProduce(e) {
              if (!this._loaded) throw new d.InvalidStateError("not loaded");
              if ("audio" !== e && "video" !== e)
                throw new TypeError(`invalid kind "${e}"`);
              return this._canProduceByKind[e];
            }
            createSendTransport({
              id: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              appData: d,
            }) {
              return (
                E.debug("createSendTransport()"),
                this.createTransport({
                  direction: "send",
                  id: e,
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                  iceServers: i,
                  iceTransportPolicy: a,
                  additionalSettings: o,
                  proprietaryConstraints: c,
                  appData: d,
                })
              );
            }
            createRecvTransport({
              id: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              appData: d,
            }) {
              return (
                E.debug("createRecvTransport()"),
                this.createTransport({
                  direction: "recv",
                  id: e,
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                  iceServers: i,
                  iceTransportPolicy: a,
                  additionalSettings: o,
                  proprietaryConstraints: c,
                  appData: d,
                })
              );
            }
            createTransport({
              direction: e,
              id: t,
              iceParameters: r,
              iceCandidates: n,
              dtlsParameters: s,
              sctpParameters: i,
              iceServers: a,
              iceTransportPolicy: o,
              additionalSettings: c,
              proprietaryConstraints: l,
              appData: u,
            }) {
              if (!this._loaded) throw new d.InvalidStateError("not loaded");
              if ("string" != typeof t) throw new TypeError("missing id");
              if ("object" != typeof r)
                throw new TypeError("missing iceParameters");
              if (!Array.isArray(n))
                throw new TypeError("missing iceCandidates");
              if ("object" != typeof s)
                throw new TypeError("missing dtlsParameters");
              if (i && "object" != typeof i)
                throw new TypeError("wrong sctpParameters");
              if (u && "object" != typeof u)
                throw new TypeError("if given, appData must be an object");
              const h = new p.Transport({
                direction: e,
                id: t,
                iceParameters: r,
                iceCandidates: n,
                dtlsParameters: s,
                sctpParameters: i,
                iceServers: a,
                iceTransportPolicy: o,
                additionalSettings: c,
                proprietaryConstraints: l,
                appData: u,
                handlerFactory: this._handlerFactory,
                extendedRtpCapabilities: this._extendedRtpCapabilities,
                canProduceByKind: this._canProduceByKind,
              });
              return this._observer.safeEmit("newtransport", h), h;
            }
          };
        },
        6298: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = n,
                t = e.lib.StreamCipher,
                r = e.algo,
                s = [],
                i = [],
                a = [],
                o = (r.Rabbit = t.extend({
                  _doReset: function () {
                    for (
                      var e = this._key.words, t = this.cfg.iv, r = 0;
                      r < 4;
                      r++
                    )
                      e[r] =
                        (16711935 & ((e[r] << 8) | (e[r] >>> 24))) |
                        (4278255360 & ((e[r] << 24) | (e[r] >>> 8)));
                    var n = (this._X = [
                        e[0],
                        (e[3] << 16) | (e[2] >>> 16),
                        e[1],
                        (e[0] << 16) | (e[3] >>> 16),
                        e[2],
                        (e[1] << 16) | (e[0] >>> 16),
                        e[3],
                        (e[2] << 16) | (e[1] >>> 16),
                      ]),
                      s = (this._C = [
                        (e[2] << 16) | (e[2] >>> 16),
                        (4294901760 & e[0]) | (65535 & e[1]),
                        (e[3] << 16) | (e[3] >>> 16),
                        (4294901760 & e[1]) | (65535 & e[2]),
                        (e[0] << 16) | (e[0] >>> 16),
                        (4294901760 & e[2]) | (65535 & e[3]),
                        (e[1] << 16) | (e[1] >>> 16),
                        (4294901760 & e[3]) | (65535 & e[0]),
                      ]);
                    for (this._b = 0, r = 0; r < 4; r++) c.call(this);
                    for (r = 0; r < 8; r++) s[r] ^= n[(r + 4) & 7];
                    if (t) {
                      var i = t.words,
                        a = i[0],
                        o = i[1],
                        d =
                          (16711935 & ((a << 8) | (a >>> 24))) |
                          (4278255360 & ((a << 24) | (a >>> 8))),
                        l =
                          (16711935 & ((o << 8) | (o >>> 24))) |
                          (4278255360 & ((o << 24) | (o >>> 8))),
                        u = (d >>> 16) | (4294901760 & l),
                        p = (l << 16) | (65535 & d);
                      for (
                        s[0] ^= d,
                          s[1] ^= u,
                          s[2] ^= l,
                          s[3] ^= p,
                          s[4] ^= d,
                          s[5] ^= u,
                          s[6] ^= l,
                          s[7] ^= p,
                          r = 0;
                        r < 4;
                        r++
                      )
                        c.call(this);
                    }
                  },
                  _doProcessBlock: function (e, t) {
                    var r = this._X;
                    c.call(this),
                      (s[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                      (s[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                      (s[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                      (s[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                    for (var n = 0; n < 4; n++)
                      (s[n] =
                        (16711935 & ((s[n] << 8) | (s[n] >>> 24))) |
                        (4278255360 & ((s[n] << 24) | (s[n] >>> 8)))),
                        (e[t + n] ^= s[n]);
                  },
                  blockSize: 4,
                  ivSize: 2,
                }));
              function c() {
                for (var e = this._X, t = this._C, r = 0; r < 8; r++)
                  i[r] = t[r];
                for (
                  t[0] = (t[0] + 1295307597 + this._b) | 0,
                    t[1] =
                      (t[1] + 3545052371 + (t[0] >>> 0 < i[0] >>> 0 ? 1 : 0)) |
                      0,
                    t[2] =
                      (t[2] + 886263092 + (t[1] >>> 0 < i[1] >>> 0 ? 1 : 0)) |
                      0,
                    t[3] =
                      (t[3] + 1295307597 + (t[2] >>> 0 < i[2] >>> 0 ? 1 : 0)) |
                      0,
                    t[4] =
                      (t[4] + 3545052371 + (t[3] >>> 0 < i[3] >>> 0 ? 1 : 0)) |
                      0,
                    t[5] =
                      (t[5] + 886263092 + (t[4] >>> 0 < i[4] >>> 0 ? 1 : 0)) |
                      0,
                    t[6] =
                      (t[6] + 1295307597 + (t[5] >>> 0 < i[5] >>> 0 ? 1 : 0)) |
                      0,
                    t[7] =
                      (t[7] + 3545052371 + (t[6] >>> 0 < i[6] >>> 0 ? 1 : 0)) |
                      0,
                    this._b = t[7] >>> 0 < i[7] >>> 0 ? 1 : 0,
                    r = 0;
                  r < 8;
                  r++
                ) {
                  var n = e[r] + t[r],
                    s = 65535 & n,
                    o = n >>> 16,
                    c = ((((s * s) >>> 17) + s * o) >>> 15) + o * o,
                    d = (((4294901760 & n) * n) | 0) + (((65535 & n) * n) | 0);
                  a[r] = c ^ d;
                }
                (e[0] =
                  (a[0] +
                    ((a[7] << 16) | (a[7] >>> 16)) +
                    ((a[6] << 16) | (a[6] >>> 16))) |
                  0),
                  (e[1] = (a[1] + ((a[0] << 8) | (a[0] >>> 24)) + a[7]) | 0),
                  (e[2] =
                    (a[2] +
                      ((a[1] << 16) | (a[1] >>> 16)) +
                      ((a[0] << 16) | (a[0] >>> 16))) |
                    0),
                  (e[3] = (a[3] + ((a[2] << 8) | (a[2] >>> 24)) + a[1]) | 0),
                  (e[4] =
                    (a[4] +
                      ((a[3] << 16) | (a[3] >>> 16)) +
                      ((a[2] << 16) | (a[2] >>> 16))) |
                    0),
                  (e[5] = (a[5] + ((a[4] << 8) | (a[4] >>> 24)) + a[3]) | 0),
                  (e[6] =
                    (a[6] +
                      ((a[5] << 16) | (a[5] >>> 16)) +
                      ((a[4] << 16) | (a[4] >>> 16))) |
                    0),
                  (e[7] = (a[7] + ((a[6] << 8) | (a[6] >>> 24)) + a[5]) | 0);
              }
              e.Rabbit = t._createHelper(o);
            })(),
            n.Rabbit);
        },
        6308: function (e, t, r) {
          var n, s, i, a, o, c;
          e.exports =
            ((c = r(9021)),
            r(3009),
            (s = (n = c).lib.WordArray),
            (i = n.algo),
            (a = i.SHA256),
            (o = i.SHA224 =
              a.extend({
                _doReset: function () {
                  this._hash = new s.init([
                    3238371032, 914150663, 812702999, 4144912697, 4290775857,
                    1750603025, 1694076839, 3204075428,
                  ]);
                },
                _doFinalize: function () {
                  var e = a._doFinalize.call(this);
                  return (e.sigBytes -= 4), e;
                },
              })),
            (n.SHA224 = a._createHelper(o)),
            (n.HmacSHA224 = a._createHmacHelper(o)),
            c.SHA224);
        },
        6372: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(7165),
            (n.mode.CTRGladman = (function () {
              var e = n.lib.BlockCipherMode.extend();
              function t(e) {
                if (255 & ~(e >> 24)) e += 1 << 24;
                else {
                  var t = (e >> 16) & 255,
                    r = (e >> 8) & 255,
                    n = 255 & e;
                  255 === t
                    ? ((t = 0),
                      255 === r ? ((r = 0), 255 === n ? (n = 0) : ++n) : ++r)
                    : ++t,
                    (e = 0),
                    (e += t << 16),
                    (e += r << 8),
                    (e += n);
                }
                return e;
              }
              function r(e) {
                return 0 === (e[0] = t(e[0])) && (e[1] = t(e[1])), e;
              }
              var s = (e.Encryptor = e.extend({
                processBlock: function (e, t) {
                  var n = this._cipher,
                    s = n.blockSize,
                    i = this._iv,
                    a = this._counter;
                  i && ((a = this._counter = i.slice(0)), (this._iv = void 0)),
                    r(a);
                  var o = a.slice(0);
                  n.encryptBlock(o, 0);
                  for (var c = 0; c < s; c++) e[t + c] ^= o[c];
                },
              }));
              return (e.Decryptor = s), e;
            })()),
            n.mode.CTRGladman);
        },
        6440: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            (function () {
              if ("function" == typeof ArrayBuffer) {
                var e = n.lib.WordArray,
                  t = e.init,
                  r = (e.init = function (e) {
                    if (
                      (e instanceof ArrayBuffer && (e = new Uint8Array(e)),
                      (e instanceof Int8Array ||
                        ("undefined" != typeof Uint8ClampedArray &&
                          e instanceof Uint8ClampedArray) ||
                        e instanceof Int16Array ||
                        e instanceof Uint16Array ||
                        e instanceof Int32Array ||
                        e instanceof Uint32Array ||
                        e instanceof Float32Array ||
                        e instanceof Float64Array) &&
                        (e = new Uint8Array(
                          e.buffer,
                          e.byteOffset,
                          e.byteLength
                        )),
                      e instanceof Uint8Array)
                    ) {
                      for (var r = e.byteLength, n = [], s = 0; s < r; s++)
                        n[s >>> 2] |= e[s] << (24 - (s % 4) * 8);
                      t.call(this, n, r);
                    } else t.apply(this, arguments);
                  });
                r.prototype = e;
              }
            })(),
            n.lib.WordArray);
        },
        6585: (e) => {
          var t = 1e3,
            r = 60 * t,
            n = 60 * r,
            s = 24 * n,
            i = 7 * s,
            a = 365.25 * s;
          function o(e, t, r, n) {
            var s = t >= 1.5 * r;
            return Math.round(e / r) + " " + n + (s ? "s" : "");
          }
          e.exports = function (e, c) {
            c = c || {};
            var d = typeof e;
            if ("string" === d && e.length > 0)
              return (function (e) {
                if ((e = String(e)).length > 100) return;
                var o =
                  /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                    e
                  );
                if (!o) return;
                var c = parseFloat(o[1]);
                switch ((o[2] || "ms").toLowerCase()) {
                  case "years":
                  case "year":
                  case "yrs":
                  case "yr":
                  case "y":
                    return c * a;
                  case "weeks":
                  case "week":
                  case "w":
                    return c * i;
                  case "days":
                  case "day":
                  case "d":
                    return c * s;
                  case "hours":
                  case "hour":
                  case "hrs":
                  case "hr":
                  case "h":
                    return c * n;
                  case "minutes":
                  case "minute":
                  case "mins":
                  case "min":
                  case "m":
                    return c * r;
                  case "seconds":
                  case "second":
                  case "secs":
                  case "sec":
                  case "s":
                    return c * t;
                  case "milliseconds":
                  case "millisecond":
                  case "msecs":
                  case "msec":
                  case "ms":
                    return c;
                  default:
                    return;
                }
              })(e);
            if ("number" === d && isFinite(e))
              return c.long
                ? (function (e) {
                    var i = Math.abs(e);
                    if (i >= s) return o(e, i, s, "day");
                    if (i >= n) return o(e, i, n, "hour");
                    if (i >= r) return o(e, i, r, "minute");
                    if (i >= t) return o(e, i, t, "second");
                    return e + " ms";
                  })(e)
                : (function (e) {
                    var i = Math.abs(e);
                    if (i >= s) return Math.round(e / s) + "d";
                    if (i >= n) return Math.round(e / n) + "h";
                    if (i >= r) return Math.round(e / r) + "m";
                    if (i >= t) return Math.round(e / t) + "s";
                    return e + "ms";
                  })(e);
            throw new Error(
              "val is not a non-empty string or a valid number. val=" +
                JSON.stringify(e)
            );
          };
        },
        6746: (e, t, r) => {
          "use strict";
          r.d(t, { KS: () => s, fo: () => n });
          var n = Object.freeze({
              SetKey: "setKey",
              RatchetRequest: "ratchetRequest",
              KeyRatcheted: "keyRatcheted",
            }),
            s =
              (Object.freeze({ KeyRatcheted: "keyRatcheted" }),
              Object.freeze({
                ParticipantEncryptionStatusChanged:
                  "participantEncryptionStatusChanged",
                EncryptionError: "encryptionError",
                E2EEStateChange: "e2eeStateChange",
              }));
          Object.freeze({ Error: "cryptorError", Message: "cryptorMessage" }),
            Object.freeze({
              EncryptionSuccess: "encryptionSuccess",
              EncryptionFailed: "encryptionFailed",
              DecryptionSuccess: "decryptionSuccess",
              DecryptionFailed: "decryptionFailed",
              MissingKey: "missingKey",
              InternalError: "internalError",
              InvalidKey: "invalidKey",
            });
        },
        6880: function (e) {
          e.exports = (function (e) {
            var t = {};
            function r(n) {
              if (t[n]) return t[n].exports;
              var s = (t[n] = { i: n, l: !1, exports: {} });
              return (
                e[n].call(s.exports, s, s.exports, r), (s.l = !0), s.exports
              );
            }
            return (
              (r.m = e),
              (r.c = t),
              (r.d = function (e, t, n) {
                r.o(e, t) ||
                  Object.defineProperty(e, t, { enumerable: !0, get: n });
              }),
              (r.r = function (e) {
                "undefined" != typeof Symbol &&
                  Symbol.toStringTag &&
                  Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module",
                  }),
                  Object.defineProperty(e, "__esModule", { value: !0 });
              }),
              (r.t = function (e, t) {
                if ((1 & t && (e = r(e)), 8 & t)) return e;
                if (4 & t && "object" == typeof e && e && e.__esModule)
                  return e;
                var n = Object.create(null);
                if (
                  (r.r(n),
                  Object.defineProperty(n, "default", {
                    enumerable: !0,
                    value: e,
                  }),
                  2 & t && "string" != typeof e)
                )
                  for (var s in e)
                    r.d(
                      n,
                      s,
                      function (t) {
                        return e[t];
                      }.bind(null, s)
                    );
                return n;
              }),
              (r.n = function (e) {
                var t =
                  e && e.__esModule
                    ? function () {
                        return e.default;
                      }
                    : function () {
                        return e;
                      };
                return r.d(t, "a", t), t;
              }),
              (r.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              }),
              (r.p = ""),
              r((r.s = 90))
            );
          })({
            17: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n = r(18),
                s = (function () {
                  function e() {}
                  return (
                    (e.getFirstMatch = function (e, t) {
                      var r = t.match(e);
                      return (r && r.length > 0 && r[1]) || "";
                    }),
                    (e.getSecondMatch = function (e, t) {
                      var r = t.match(e);
                      return (r && r.length > 1 && r[2]) || "";
                    }),
                    (e.matchAndReturnConst = function (e, t, r) {
                      if (e.test(t)) return r;
                    }),
                    (e.getWindowsVersionName = function (e) {
                      switch (e) {
                        case "NT":
                          return "NT";
                        case "XP":
                        case "NT 5.1":
                          return "XP";
                        case "NT 5.0":
                          return "2000";
                        case "NT 5.2":
                          return "2003";
                        case "NT 6.0":
                          return "Vista";
                        case "NT 6.1":
                          return "7";
                        case "NT 6.2":
                          return "8";
                        case "NT 6.3":
                          return "8.1";
                        case "NT 10.0":
                          return "10";
                        default:
                          return;
                      }
                    }),
                    (e.getMacOSVersionName = function (e) {
                      var t = e
                        .split(".")
                        .splice(0, 2)
                        .map(function (e) {
                          return parseInt(e, 10) || 0;
                        });
                      if ((t.push(0), 10 === t[0]))
                        switch (t[1]) {
                          case 5:
                            return "Leopard";
                          case 6:
                            return "Snow Leopard";
                          case 7:
                            return "Lion";
                          case 8:
                            return "Mountain Lion";
                          case 9:
                            return "Mavericks";
                          case 10:
                            return "Yosemite";
                          case 11:
                            return "El Capitan";
                          case 12:
                            return "Sierra";
                          case 13:
                            return "High Sierra";
                          case 14:
                            return "Mojave";
                          case 15:
                            return "Catalina";
                          default:
                            return;
                        }
                    }),
                    (e.getAndroidVersionName = function (e) {
                      var t = e
                        .split(".")
                        .splice(0, 2)
                        .map(function (e) {
                          return parseInt(e, 10) || 0;
                        });
                      if ((t.push(0), !(1 === t[0] && t[1] < 5)))
                        return 1 === t[0] && t[1] < 6
                          ? "Cupcake"
                          : 1 === t[0] && t[1] >= 6
                          ? "Donut"
                          : 2 === t[0] && t[1] < 2
                          ? "Eclair"
                          : 2 === t[0] && 2 === t[1]
                          ? "Froyo"
                          : 2 === t[0] && t[1] > 2
                          ? "Gingerbread"
                          : 3 === t[0]
                          ? "Honeycomb"
                          : 4 === t[0] && t[1] < 1
                          ? "Ice Cream Sandwich"
                          : 4 === t[0] && t[1] < 4
                          ? "Jelly Bean"
                          : 4 === t[0] && t[1] >= 4
                          ? "KitKat"
                          : 5 === t[0]
                          ? "Lollipop"
                          : 6 === t[0]
                          ? "Marshmallow"
                          : 7 === t[0]
                          ? "Nougat"
                          : 8 === t[0]
                          ? "Oreo"
                          : 9 === t[0]
                          ? "Pie"
                          : void 0;
                    }),
                    (e.getVersionPrecision = function (e) {
                      return e.split(".").length;
                    }),
                    (e.compareVersions = function (t, r, n) {
                      void 0 === n && (n = !1);
                      var s = e.getVersionPrecision(t),
                        i = e.getVersionPrecision(r),
                        a = Math.max(s, i),
                        o = 0,
                        c = e.map([t, r], function (t) {
                          var r = a - e.getVersionPrecision(t),
                            n = t + new Array(r + 1).join(".0");
                          return e
                            .map(n.split("."), function (e) {
                              return new Array(20 - e.length).join("0") + e;
                            })
                            .reverse();
                        });
                      for (n && (o = a - Math.min(s, i)), a -= 1; a >= o; ) {
                        if (c[0][a] > c[1][a]) return 1;
                        if (c[0][a] === c[1][a]) {
                          if (a === o) return 0;
                          a -= 1;
                        } else if (c[0][a] < c[1][a]) return -1;
                      }
                    }),
                    (e.map = function (e, t) {
                      var r,
                        n = [];
                      if (Array.prototype.map)
                        return Array.prototype.map.call(e, t);
                      for (r = 0; r < e.length; r += 1) n.push(t(e[r]));
                      return n;
                    }),
                    (e.find = function (e, t) {
                      var r, n;
                      if (Array.prototype.find)
                        return Array.prototype.find.call(e, t);
                      for (r = 0, n = e.length; r < n; r += 1) {
                        var s = e[r];
                        if (t(s, r)) return s;
                      }
                    }),
                    (e.assign = function (e) {
                      for (
                        var t,
                          r,
                          n = e,
                          s = arguments.length,
                          i = new Array(s > 1 ? s - 1 : 0),
                          a = 1;
                        a < s;
                        a++
                      )
                        i[a - 1] = arguments[a];
                      if (Object.assign)
                        return Object.assign.apply(Object, [e].concat(i));
                      var o = function () {
                        var e = i[t];
                        "object" == typeof e &&
                          null !== e &&
                          Object.keys(e).forEach(function (t) {
                            n[t] = e[t];
                          });
                      };
                      for (t = 0, r = i.length; t < r; t += 1) o();
                      return e;
                    }),
                    (e.getBrowserAlias = function (e) {
                      return n.BROWSER_ALIASES_MAP[e];
                    }),
                    (e.getBrowserTypeByAlias = function (e) {
                      return n.BROWSER_MAP[e] || "";
                    }),
                    e
                  );
                })();
              (t.default = s), (e.exports = t.default);
            },
            18: function (e, t, r) {
              "use strict";
              (t.__esModule = !0),
                (t.ENGINE_MAP =
                  t.OS_MAP =
                  t.PLATFORMS_MAP =
                  t.BROWSER_MAP =
                  t.BROWSER_ALIASES_MAP =
                    void 0),
                (t.BROWSER_ALIASES_MAP = {
                  "Amazon Silk": "amazon_silk",
                  "Android Browser": "android",
                  Bada: "bada",
                  BlackBerry: "blackberry",
                  Chrome: "chrome",
                  Chromium: "chromium",
                  Electron: "electron",
                  Epiphany: "epiphany",
                  Firefox: "firefox",
                  Focus: "focus",
                  Generic: "generic",
                  "Google Search": "google_search",
                  Googlebot: "googlebot",
                  "Internet Explorer": "ie",
                  "K-Meleon": "k_meleon",
                  Maxthon: "maxthon",
                  "Microsoft Edge": "edge",
                  "MZ Browser": "mz",
                  "NAVER Whale Browser": "naver",
                  Opera: "opera",
                  "Opera Coast": "opera_coast",
                  PhantomJS: "phantomjs",
                  Puffin: "puffin",
                  QupZilla: "qupzilla",
                  QQ: "qq",
                  QQLite: "qqlite",
                  Safari: "safari",
                  Sailfish: "sailfish",
                  "Samsung Internet for Android": "samsung_internet",
                  SeaMonkey: "seamonkey",
                  Sleipnir: "sleipnir",
                  Swing: "swing",
                  Tizen: "tizen",
                  "UC Browser": "uc",
                  Vivaldi: "vivaldi",
                  "WebOS Browser": "webos",
                  WeChat: "wechat",
                  "Yandex Browser": "yandex",
                  Roku: "roku",
                }),
                (t.BROWSER_MAP = {
                  amazon_silk: "Amazon Silk",
                  android: "Android Browser",
                  bada: "Bada",
                  blackberry: "BlackBerry",
                  chrome: "Chrome",
                  chromium: "Chromium",
                  electron: "Electron",
                  epiphany: "Epiphany",
                  firefox: "Firefox",
                  focus: "Focus",
                  generic: "Generic",
                  googlebot: "Googlebot",
                  google_search: "Google Search",
                  ie: "Internet Explorer",
                  k_meleon: "K-Meleon",
                  maxthon: "Maxthon",
                  edge: "Microsoft Edge",
                  mz: "MZ Browser",
                  naver: "NAVER Whale Browser",
                  opera: "Opera",
                  opera_coast: "Opera Coast",
                  phantomjs: "PhantomJS",
                  puffin: "Puffin",
                  qupzilla: "QupZilla",
                  qq: "QQ Browser",
                  qqlite: "QQ Browser Lite",
                  safari: "Safari",
                  sailfish: "Sailfish",
                  samsung_internet: "Samsung Internet for Android",
                  seamonkey: "SeaMonkey",
                  sleipnir: "Sleipnir",
                  swing: "Swing",
                  tizen: "Tizen",
                  uc: "UC Browser",
                  vivaldi: "Vivaldi",
                  webos: "WebOS Browser",
                  wechat: "WeChat",
                  yandex: "Yandex Browser",
                }),
                (t.PLATFORMS_MAP = {
                  tablet: "tablet",
                  mobile: "mobile",
                  desktop: "desktop",
                  tv: "tv",
                }),
                (t.OS_MAP = {
                  WindowsPhone: "Windows Phone",
                  Windows: "Windows",
                  MacOS: "macOS",
                  iOS: "iOS",
                  Android: "Android",
                  WebOS: "WebOS",
                  BlackBerry: "BlackBerry",
                  Bada: "Bada",
                  Tizen: "Tizen",
                  Linux: "Linux",
                  ChromeOS: "Chrome OS",
                  PlayStation4: "PlayStation 4",
                  Roku: "Roku",
                }),
                (t.ENGINE_MAP = {
                  EdgeHTML: "EdgeHTML",
                  Blink: "Blink",
                  Trident: "Trident",
                  Presto: "Presto",
                  Gecko: "Gecko",
                  WebKit: "WebKit",
                });
            },
            90: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                s = (n = r(91)) && n.__esModule ? n : { default: n },
                i = r(18);
              function a(e, t) {
                for (var r = 0; r < t.length; r++) {
                  var n = t[r];
                  (n.enumerable = n.enumerable || !1),
                    (n.configurable = !0),
                    "value" in n && (n.writable = !0),
                    Object.defineProperty(e, n.key, n);
                }
              }
              var o = (function () {
                function e() {}
                var t, r, n;
                return (
                  (e.getParser = function (e, t) {
                    if ((void 0 === t && (t = !1), "string" != typeof e))
                      throw new Error("UserAgent should be a string");
                    return new s.default(e, t);
                  }),
                  (e.parse = function (e) {
                    return new s.default(e).getResult();
                  }),
                  (t = e),
                  (n = [
                    {
                      key: "BROWSER_MAP",
                      get: function () {
                        return i.BROWSER_MAP;
                      },
                    },
                    {
                      key: "ENGINE_MAP",
                      get: function () {
                        return i.ENGINE_MAP;
                      },
                    },
                    {
                      key: "OS_MAP",
                      get: function () {
                        return i.OS_MAP;
                      },
                    },
                    {
                      key: "PLATFORMS_MAP",
                      get: function () {
                        return i.PLATFORMS_MAP;
                      },
                    },
                  ]),
                  (r = null) && a(t.prototype, r),
                  n && a(t, n),
                  e
                );
              })();
              (t.default = o), (e.exports = t.default);
            },
            91: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n = c(r(92)),
                s = c(r(93)),
                i = c(r(94)),
                a = c(r(95)),
                o = c(r(17));
              function c(e) {
                return e && e.__esModule ? e : { default: e };
              }
              var d = (function () {
                function e(e, t) {
                  if ((void 0 === t && (t = !1), null == e || "" === e))
                    throw new Error("UserAgent parameter can't be empty");
                  (this._ua = e),
                    (this.parsedResult = {}),
                    !0 !== t && this.parse();
                }
                var t = e.prototype;
                return (
                  (t.getUA = function () {
                    return this._ua;
                  }),
                  (t.test = function (e) {
                    return e.test(this._ua);
                  }),
                  (t.parseBrowser = function () {
                    var e = this;
                    this.parsedResult.browser = {};
                    var t = o.default.find(n.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.browser = t.describe(this.getUA())),
                      this.parsedResult.browser
                    );
                  }),
                  (t.getBrowser = function () {
                    return this.parsedResult.browser
                      ? this.parsedResult.browser
                      : this.parseBrowser();
                  }),
                  (t.getBrowserName = function (e) {
                    return e
                      ? String(this.getBrowser().name).toLowerCase() || ""
                      : this.getBrowser().name || "";
                  }),
                  (t.getBrowserVersion = function () {
                    return this.getBrowser().version;
                  }),
                  (t.getOS = function () {
                    return this.parsedResult.os
                      ? this.parsedResult.os
                      : this.parseOS();
                  }),
                  (t.parseOS = function () {
                    var e = this;
                    this.parsedResult.os = {};
                    var t = o.default.find(s.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t && (this.parsedResult.os = t.describe(this.getUA())),
                      this.parsedResult.os
                    );
                  }),
                  (t.getOSName = function (e) {
                    var t = this.getOS().name;
                    return e ? String(t).toLowerCase() || "" : t || "";
                  }),
                  (t.getOSVersion = function () {
                    return this.getOS().version;
                  }),
                  (t.getPlatform = function () {
                    return this.parsedResult.platform
                      ? this.parsedResult.platform
                      : this.parsePlatform();
                  }),
                  (t.getPlatformType = function (e) {
                    void 0 === e && (e = !1);
                    var t = this.getPlatform().type;
                    return e ? String(t).toLowerCase() || "" : t || "";
                  }),
                  (t.parsePlatform = function () {
                    var e = this;
                    this.parsedResult.platform = {};
                    var t = o.default.find(i.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.platform = t.describe(this.getUA())),
                      this.parsedResult.platform
                    );
                  }),
                  (t.getEngine = function () {
                    return this.parsedResult.engine
                      ? this.parsedResult.engine
                      : this.parseEngine();
                  }),
                  (t.getEngineName = function (e) {
                    return e
                      ? String(this.getEngine().name).toLowerCase() || ""
                      : this.getEngine().name || "";
                  }),
                  (t.parseEngine = function () {
                    var e = this;
                    this.parsedResult.engine = {};
                    var t = o.default.find(a.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.engine = t.describe(this.getUA())),
                      this.parsedResult.engine
                    );
                  }),
                  (t.parse = function () {
                    return (
                      this.parseBrowser(),
                      this.parseOS(),
                      this.parsePlatform(),
                      this.parseEngine(),
                      this
                    );
                  }),
                  (t.getResult = function () {
                    return o.default.assign({}, this.parsedResult);
                  }),
                  (t.satisfies = function (e) {
                    var t = this,
                      r = {},
                      n = 0,
                      s = {},
                      i = 0;
                    if (
                      (Object.keys(e).forEach(function (t) {
                        var a = e[t];
                        "string" == typeof a
                          ? ((s[t] = a), (i += 1))
                          : "object" == typeof a && ((r[t] = a), (n += 1));
                      }),
                      n > 0)
                    ) {
                      var a = Object.keys(r),
                        c = o.default.find(a, function (e) {
                          return t.isOS(e);
                        });
                      if (c) {
                        var d = this.satisfies(r[c]);
                        if (void 0 !== d) return d;
                      }
                      var l = o.default.find(a, function (e) {
                        return t.isPlatform(e);
                      });
                      if (l) {
                        var u = this.satisfies(r[l]);
                        if (void 0 !== u) return u;
                      }
                    }
                    if (i > 0) {
                      var p = Object.keys(s),
                        h = o.default.find(p, function (e) {
                          return t.isBrowser(e, !0);
                        });
                      if (void 0 !== h) return this.compareVersion(s[h]);
                    }
                  }),
                  (t.isBrowser = function (e, t) {
                    void 0 === t && (t = !1);
                    var r = this.getBrowserName().toLowerCase(),
                      n = e.toLowerCase(),
                      s = o.default.getBrowserTypeByAlias(n);
                    return t && s && (n = s.toLowerCase()), n === r;
                  }),
                  (t.compareVersion = function (e) {
                    var t = [0],
                      r = e,
                      n = !1,
                      s = this.getBrowserVersion();
                    if ("string" == typeof s)
                      return (
                        ">" === e[0] || "<" === e[0]
                          ? ((r = e.substr(1)),
                            "=" === e[1]
                              ? ((n = !0), (r = e.substr(2)))
                              : (t = []),
                            ">" === e[0] ? t.push(1) : t.push(-1))
                          : "=" === e[0]
                          ? (r = e.substr(1))
                          : "~" === e[0] && ((n = !0), (r = e.substr(1))),
                        t.indexOf(o.default.compareVersions(s, r, n)) > -1
                      );
                  }),
                  (t.isOS = function (e) {
                    return this.getOSName(!0) === String(e).toLowerCase();
                  }),
                  (t.isPlatform = function (e) {
                    return this.getPlatformType(!0) === String(e).toLowerCase();
                  }),
                  (t.isEngine = function (e) {
                    return this.getEngineName(!0) === String(e).toLowerCase();
                  }),
                  (t.is = function (e, t) {
                    return (
                      void 0 === t && (t = !1),
                      this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e)
                    );
                  }),
                  (t.some = function (e) {
                    var t = this;
                    return (
                      void 0 === e && (e = []),
                      e.some(function (e) {
                        return t.is(e);
                      })
                    );
                  }),
                  e
                );
              })();
              (t.default = d), (e.exports = t.default);
            },
            92: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                s = (n = r(17)) && n.__esModule ? n : { default: n },
                i = /version\/(\d+(\.?_?\d+)+)/i,
                a = [
                  {
                    test: [/googlebot/i],
                    describe: function (e) {
                      var t = { name: "Googlebot" },
                        r =
                          s.default.getFirstMatch(
                            /googlebot\/(\d+(\.\d+))/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opera/i],
                    describe: function (e) {
                      var t = { name: "Opera" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:opera)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opr\/|opios/i],
                    describe: function (e) {
                      var t = { name: "Opera" },
                        r =
                          s.default.getFirstMatch(
                            /(?:opr|opios)[\s/](\S+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/SamsungBrowser/i],
                    describe: function (e) {
                      var t = { name: "Samsung Internet for Android" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/Whale/i],
                    describe: function (e) {
                      var t = { name: "NAVER Whale Browser" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:whale)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/MZBrowser/i],
                    describe: function (e) {
                      var t = { name: "MZ Browser" },
                        r =
                          s.default.getFirstMatch(
                            /(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/focus/i],
                    describe: function (e) {
                      var t = { name: "Focus" },
                        r =
                          s.default.getFirstMatch(
                            /(?:focus)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/swing/i],
                    describe: function (e) {
                      var t = { name: "Swing" },
                        r =
                          s.default.getFirstMatch(
                            /(?:swing)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/coast/i],
                    describe: function (e) {
                      var t = { name: "Opera Coast" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:coast)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opt\/\d+(?:.?_?\d+)+/i],
                    describe: function (e) {
                      var t = { name: "Opera Touch" },
                        r =
                          s.default.getFirstMatch(
                            /(?:opt)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/yabrowser/i],
                    describe: function (e) {
                      var t = { name: "Yandex Browser" },
                        r =
                          s.default.getFirstMatch(
                            /(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/ucbrowser/i],
                    describe: function (e) {
                      var t = { name: "UC Browser" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/Maxthon|mxios/i],
                    describe: function (e) {
                      var t = { name: "Maxthon" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/epiphany/i],
                    describe: function (e) {
                      var t = { name: "Epiphany" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/puffin/i],
                    describe: function (e) {
                      var t = { name: "Puffin" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/sleipnir/i],
                    describe: function (e) {
                      var t = { name: "Sleipnir" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/k-meleon/i],
                    describe: function (e) {
                      var t = { name: "K-Meleon" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/micromessenger/i],
                    describe: function (e) {
                      var t = { name: "WeChat" },
                        r =
                          s.default.getFirstMatch(
                            /(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/qqbrowser/i],
                    describe: function (e) {
                      var t = {
                          name: /qqbrowserlite/i.test(e)
                            ? "QQ Browser Lite"
                            : "QQ Browser",
                        },
                        r =
                          s.default.getFirstMatch(
                            /(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/msie|trident/i],
                    describe: function (e) {
                      var t = { name: "Internet Explorer" },
                        r = s.default.getFirstMatch(
                          /(?:msie |rv:)(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/\sedg\//i],
                    describe: function (e) {
                      var t = { name: "Microsoft Edge" },
                        r = s.default.getFirstMatch(
                          /\sedg\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/edg([ea]|ios)/i],
                    describe: function (e) {
                      var t = { name: "Microsoft Edge" },
                        r = s.default.getSecondMatch(
                          /edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/vivaldi/i],
                    describe: function (e) {
                      var t = { name: "Vivaldi" },
                        r = s.default.getFirstMatch(
                          /vivaldi\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/seamonkey/i],
                    describe: function (e) {
                      var t = { name: "SeaMonkey" },
                        r = s.default.getFirstMatch(
                          /seamonkey\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/sailfish/i],
                    describe: function (e) {
                      var t = { name: "Sailfish" },
                        r = s.default.getFirstMatch(
                          /sailfish\s?browser\/(\d+(\.\d+)?)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/silk/i],
                    describe: function (e) {
                      var t = { name: "Amazon Silk" },
                        r = s.default.getFirstMatch(
                          /silk\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/phantom/i],
                    describe: function (e) {
                      var t = { name: "PhantomJS" },
                        r = s.default.getFirstMatch(
                          /phantomjs\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/slimerjs/i],
                    describe: function (e) {
                      var t = { name: "SlimerJS" },
                        r = s.default.getFirstMatch(
                          /slimerjs\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function (e) {
                      var t = { name: "BlackBerry" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function (e) {
                      var t = { name: "WebOS Browser" },
                        r =
                          s.default.getFirstMatch(i, e) ||
                          s.default.getFirstMatch(
                            /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/bada/i],
                    describe: function (e) {
                      var t = { name: "Bada" },
                        r = s.default.getFirstMatch(
                          /dolfin\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/tizen/i],
                    describe: function (e) {
                      var t = { name: "Tizen" },
                        r =
                          s.default.getFirstMatch(
                            /(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/qupzilla/i],
                    describe: function (e) {
                      var t = { name: "QupZilla" },
                        r =
                          s.default.getFirstMatch(
                            /(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/firefox|iceweasel|fxios/i],
                    describe: function (e) {
                      var t = { name: "Firefox" },
                        r = s.default.getFirstMatch(
                          /(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/electron/i],
                    describe: function (e) {
                      var t = { name: "Electron" },
                        r = s.default.getFirstMatch(
                          /(?:electron)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/MiuiBrowser/i],
                    describe: function (e) {
                      var t = { name: "Miui" },
                        r = s.default.getFirstMatch(
                          /(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/chromium/i],
                    describe: function (e) {
                      var t = { name: "Chromium" },
                        r =
                          s.default.getFirstMatch(
                            /(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/chrome|crios|crmo/i],
                    describe: function (e) {
                      var t = { name: "Chrome" },
                        r = s.default.getFirstMatch(
                          /(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/GSA/i],
                    describe: function (e) {
                      var t = { name: "Google Search" },
                        r = s.default.getFirstMatch(
                          /(?:GSA)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      var t = !e.test(/like android/i),
                        r = e.test(/android/i);
                      return t && r;
                    },
                    describe: function (e) {
                      var t = { name: "Android Browser" },
                        r = s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/playstation 4/i],
                    describe: function (e) {
                      var t = { name: "PlayStation 4" },
                        r = s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/safari|applewebkit/i],
                    describe: function (e) {
                      var t = { name: "Safari" },
                        r = s.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/.*/i],
                    describe: function (e) {
                      var t =
                        -1 !== e.search("\\(")
                          ? /^(.*)\/(.*)[ \t]\((.*)/
                          : /^(.*)\/(.*) /;
                      return {
                        name: s.default.getFirstMatch(t, e),
                        version: s.default.getSecondMatch(t, e),
                      };
                    },
                  },
                ];
              (t.default = a), (e.exports = t.default);
            },
            93: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                s = (n = r(17)) && n.__esModule ? n : { default: n },
                i = r(18),
                a = [
                  {
                    test: [/Roku\/DVP/],
                    describe: function (e) {
                      var t = s.default.getFirstMatch(
                        /Roku\/DVP-(\d+\.\d+)/i,
                        e
                      );
                      return { name: i.OS_MAP.Roku, version: t };
                    },
                  },
                  {
                    test: [/windows phone/i],
                    describe: function (e) {
                      var t = s.default.getFirstMatch(
                        /windows phone (?:os)?\s?(\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.WindowsPhone, version: t };
                    },
                  },
                  {
                    test: [/windows /i],
                    describe: function (e) {
                      var t = s.default.getFirstMatch(
                          /Windows ((NT|XP)( \d\d?.\d)?)/i,
                          e
                        ),
                        r = s.default.getWindowsVersionName(t);
                      return {
                        name: i.OS_MAP.Windows,
                        version: t,
                        versionName: r,
                      };
                    },
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function (e) {
                      var t = { name: i.OS_MAP.iOS },
                        r = s.default.getSecondMatch(
                          /(Version\/)(\d[\d.]+)/,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/macintosh/i],
                    describe: function (e) {
                      var t = s.default
                          .getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e)
                          .replace(/[_\s]/g, "."),
                        r = s.default.getMacOSVersionName(t),
                        n = { name: i.OS_MAP.MacOS, version: t };
                      return r && (n.versionName = r), n;
                    },
                  },
                  {
                    test: [/(ipod|iphone|ipad)/i],
                    describe: function (e) {
                      var t = s.default
                        .getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e)
                        .replace(/[_\s]/g, ".");
                      return { name: i.OS_MAP.iOS, version: t };
                    },
                  },
                  {
                    test: function (e) {
                      var t = !e.test(/like android/i),
                        r = e.test(/android/i);
                      return t && r;
                    },
                    describe: function (e) {
                      var t = s.default.getFirstMatch(
                          /android[\s/-](\d+(\.\d+)*)/i,
                          e
                        ),
                        r = s.default.getAndroidVersionName(t),
                        n = { name: i.OS_MAP.Android, version: t };
                      return r && (n.versionName = r), n;
                    },
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function (e) {
                      var t = s.default.getFirstMatch(
                          /(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,
                          e
                        ),
                        r = { name: i.OS_MAP.WebOS };
                      return t && t.length && (r.version = t), r;
                    },
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function (e) {
                      var t =
                        s.default.getFirstMatch(
                          /rim\stablet\sos\s(\d+(\.\d+)*)/i,
                          e
                        ) ||
                        s.default.getFirstMatch(
                          /blackberry\d+\/(\d+([_\s]\d+)*)/i,
                          e
                        ) ||
                        s.default.getFirstMatch(/\bbb(\d+)/i, e);
                      return { name: i.OS_MAP.BlackBerry, version: t };
                    },
                  },
                  {
                    test: [/bada/i],
                    describe: function (e) {
                      var t = s.default.getFirstMatch(
                        /bada\/(\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.Bada, version: t };
                    },
                  },
                  {
                    test: [/tizen/i],
                    describe: function (e) {
                      var t = s.default.getFirstMatch(
                        /tizen[/\s](\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.Tizen, version: t };
                    },
                  },
                  {
                    test: [/linux/i],
                    describe: function () {
                      return { name: i.OS_MAP.Linux };
                    },
                  },
                  {
                    test: [/CrOS/],
                    describe: function () {
                      return { name: i.OS_MAP.ChromeOS };
                    },
                  },
                  {
                    test: [/PlayStation 4/],
                    describe: function (e) {
                      var t = s.default.getFirstMatch(
                        /PlayStation 4[/\s](\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.PlayStation4, version: t };
                    },
                  },
                ];
              (t.default = a), (e.exports = t.default);
            },
            94: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                s = (n = r(17)) && n.__esModule ? n : { default: n },
                i = r(18),
                a = [
                  {
                    test: [/googlebot/i],
                    describe: function () {
                      return { type: "bot", vendor: "Google" };
                    },
                  },
                  {
                    test: [/huawei/i],
                    describe: function (e) {
                      var t =
                          s.default.getFirstMatch(/(can-l01)/i, e) && "Nova",
                        r = { type: i.PLATFORMS_MAP.mobile, vendor: "Huawei" };
                      return t && (r.model = t), r;
                    },
                  },
                  {
                    test: [/nexus\s*(?:7|8|9|10).*/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Nexus" };
                    },
                  },
                  {
                    test: [/ipad/i],
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad",
                      };
                    },
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad",
                      };
                    },
                  },
                  {
                    test: [/kftt build/i],
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Amazon",
                        model: "Kindle Fire HD 7",
                      };
                    },
                  },
                  {
                    test: [/silk/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Amazon" };
                    },
                  },
                  {
                    test: [/tablet(?! pc)/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet };
                    },
                  },
                  {
                    test: function (e) {
                      var t = e.test(/ipod|iphone/i),
                        r = e.test(/like (ipod|iphone)/i);
                      return t && !r;
                    },
                    describe: function (e) {
                      var t = s.default.getFirstMatch(/(ipod|iphone)/i, e);
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Apple",
                        model: t,
                      };
                    },
                  },
                  {
                    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile, vendor: "Nexus" };
                    },
                  },
                  {
                    test: [/[^-]mobi/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "blackberry" === e.getBrowserName(!0);
                    },
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "BlackBerry",
                      };
                    },
                  },
                  {
                    test: function (e) {
                      return "bada" === e.getBrowserName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "windows phone" === e.getBrowserName();
                    },
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Microsoft",
                      };
                    },
                  },
                  {
                    test: function (e) {
                      var t = Number(String(e.getOSVersion()).split(".")[0]);
                      return "android" === e.getOSName(!0) && t >= 3;
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet };
                    },
                  },
                  {
                    test: function (e) {
                      return "android" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "macos" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.desktop, vendor: "Apple" };
                    },
                  },
                  {
                    test: function (e) {
                      return "windows" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.desktop };
                    },
                  },
                  {
                    test: function (e) {
                      return "linux" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.desktop };
                    },
                  },
                  {
                    test: function (e) {
                      return "playstation 4" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tv };
                    },
                  },
                  {
                    test: function (e) {
                      return "roku" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tv };
                    },
                  },
                ];
              (t.default = a), (e.exports = t.default);
            },
            95: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                s = (n = r(17)) && n.__esModule ? n : { default: n },
                i = r(18),
                a = [
                  {
                    test: function (e) {
                      return "microsoft edge" === e.getBrowserName(!0);
                    },
                    describe: function (e) {
                      if (/\sedg\//i.test(e))
                        return { name: i.ENGINE_MAP.Blink };
                      var t = s.default.getFirstMatch(
                        /edge\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                      return { name: i.ENGINE_MAP.EdgeHTML, version: t };
                    },
                  },
                  {
                    test: [/trident/i],
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.Trident },
                        r = s.default.getFirstMatch(
                          /trident\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      return e.test(/presto/i);
                    },
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.Presto },
                        r = s.default.getFirstMatch(
                          /presto\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      var t = e.test(/gecko/i),
                        r = e.test(/like gecko/i);
                      return t && !r;
                    },
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.Gecko },
                        r = s.default.getFirstMatch(
                          /gecko\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/(apple)?webkit\/537\.36/i],
                    describe: function () {
                      return { name: i.ENGINE_MAP.Blink };
                    },
                  },
                  {
                    test: [/(apple)?webkit/i],
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.WebKit },
                        r = s.default.getFirstMatch(
                          /webkit\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                ];
              (t.default = a), (e.exports = t.default);
            },
          });
        },
        6939: function (e, t, r) {
          var n, s, i;
          e.exports =
            ((i = r(9021)),
            r(7165),
            (i.mode.CTR =
              ((n = i.lib.BlockCipherMode.extend()),
              (s = n.Encryptor =
                n.extend({
                  processBlock: function (e, t) {
                    var r = this._cipher,
                      n = r.blockSize,
                      s = this._iv,
                      i = this._counter;
                    s &&
                      ((i = this._counter = s.slice(0)), (this._iv = void 0));
                    var a = i.slice(0);
                    r.encryptBlock(a, 0), (i[n - 1] = (i[n - 1] + 1) | 0);
                    for (var o = 0; o < n; o++) e[t + o] ^= a[o];
                  },
                })),
              (n.Decryptor = s),
              n)),
            i.mode.CTR);
        },
        7007: (e) => {
          "use strict";
          var t,
            r = "object" == typeof Reflect ? Reflect : null,
            n =
              r && "function" == typeof r.apply
                ? r.apply
                : function (e, t, r) {
                    return Function.prototype.apply.call(e, t, r);
                  };
          t =
            r && "function" == typeof r.ownKeys
              ? r.ownKeys
              : Object.getOwnPropertySymbols
              ? function (e) {
                  return Object.getOwnPropertyNames(e).concat(
                    Object.getOwnPropertySymbols(e)
                  );
                }
              : function (e) {
                  return Object.getOwnPropertyNames(e);
                };
          var s =
            Number.isNaN ||
            function (e) {
              return e != e;
            };
          function i() {
            i.init.call(this);
          }
          (e.exports = i),
            (e.exports.once = function (e, t) {
              return new Promise(function (r, n) {
                function s(r) {
                  e.removeListener(t, i), n(r);
                }
                function i() {
                  "function" == typeof e.removeListener &&
                    e.removeListener("error", s),
                    r([].slice.call(arguments));
                }
                f(e, t, i, { once: !0 }),
                  "error" !== t &&
                    (function (e, t, r) {
                      "function" == typeof e.on && f(e, "error", t, r);
                    })(e, s, { once: !0 });
              });
            }),
            (i.EventEmitter = i),
            (i.prototype._events = void 0),
            (i.prototype._eventsCount = 0),
            (i.prototype._maxListeners = void 0);
          var a = 10;
          function o(e) {
            if ("function" != typeof e)
              throw new TypeError(
                'The "listener" argument must be of type Function. Received type ' +
                  typeof e
              );
          }
          function c(e) {
            return void 0 === e._maxListeners
              ? i.defaultMaxListeners
              : e._maxListeners;
          }
          function d(e, t, r, n) {
            var s, i, a, d;
            if (
              (o(r),
              void 0 === (i = e._events)
                ? ((i = e._events = Object.create(null)), (e._eventsCount = 0))
                : (void 0 !== i.newListener &&
                    (e.emit("newListener", t, r.listener ? r.listener : r),
                    (i = e._events)),
                  (a = i[t])),
              void 0 === a)
            )
              (a = i[t] = r), ++e._eventsCount;
            else if (
              ("function" == typeof a
                ? (a = i[t] = n ? [r, a] : [a, r])
                : n
                ? a.unshift(r)
                : a.push(r),
              (s = c(e)) > 0 && a.length > s && !a.warned)
            ) {
              a.warned = !0;
              var l = new Error(
                "Possible EventEmitter memory leak detected. " +
                  a.length +
                  " " +
                  String(t) +
                  " listeners added. Use emitter.setMaxListeners() to increase limit"
              );
              (l.name = "MaxListenersExceededWarning"),
                (l.emitter = e),
                (l.type = t),
                (l.count = a.length),
                (d = l),
                console && console.warn && console.warn(d);
            }
            return e;
          }
          function l() {
            if (!this.fired)
              return (
                this.target.removeListener(this.type, this.wrapFn),
                (this.fired = !0),
                0 === arguments.length
                  ? this.listener.call(this.target)
                  : this.listener.apply(this.target, arguments)
              );
          }
          function u(e, t, r) {
            var n = {
                fired: !1,
                wrapFn: void 0,
                target: e,
                type: t,
                listener: r,
              },
              s = l.bind(n);
            return (s.listener = r), (n.wrapFn = s), s;
          }
          function p(e, t, r) {
            var n = e._events;
            if (void 0 === n) return [];
            var s = n[t];
            return void 0 === s
              ? []
              : "function" == typeof s
              ? r
                ? [s.listener || s]
                : [s]
              : r
              ? (function (e) {
                  for (var t = new Array(e.length), r = 0; r < t.length; ++r)
                    t[r] = e[r].listener || e[r];
                  return t;
                })(s)
              : m(s, s.length);
          }
          function h(e) {
            var t = this._events;
            if (void 0 !== t) {
              var r = t[e];
              if ("function" == typeof r) return 1;
              if (void 0 !== r) return r.length;
            }
            return 0;
          }
          function m(e, t) {
            for (var r = new Array(t), n = 0; n < t; ++n) r[n] = e[n];
            return r;
          }
          function f(e, t, r, n) {
            if ("function" == typeof e.on) n.once ? e.once(t, r) : e.on(t, r);
            else {
              if ("function" != typeof e.addEventListener)
                throw new TypeError(
                  'The "emitter" argument must be of type EventEmitter. Received type ' +
                    typeof e
                );
              e.addEventListener(t, function s(i) {
                n.once && e.removeEventListener(t, s), r(i);
              });
            }
          }
          Object.defineProperty(i, "defaultMaxListeners", {
            enumerable: !0,
            get: function () {
              return a;
            },
            set: function (e) {
              if ("number" != typeof e || e < 0 || s(e))
                throw new RangeError(
                  'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                    e +
                    "."
                );
              a = e;
            },
          }),
            (i.init = function () {
              (void 0 !== this._events &&
                this._events !== Object.getPrototypeOf(this)._events) ||
                ((this._events = Object.create(null)), (this._eventsCount = 0)),
                (this._maxListeners = this._maxListeners || void 0);
            }),
            (i.prototype.setMaxListeners = function (e) {
              if ("number" != typeof e || e < 0 || s(e))
                throw new RangeError(
                  'The value of "n" is out of range. It must be a non-negative number. Received ' +
                    e +
                    "."
                );
              return (this._maxListeners = e), this;
            }),
            (i.prototype.getMaxListeners = function () {
              return c(this);
            }),
            (i.prototype.emit = function (e) {
              for (var t = [], r = 1; r < arguments.length; r++)
                t.push(arguments[r]);
              var s = "error" === e,
                i = this._events;
              if (void 0 !== i) s = s && void 0 === i.error;
              else if (!s) return !1;
              if (s) {
                var a;
                if ((t.length > 0 && (a = t[0]), a instanceof Error)) throw a;
                var o = new Error(
                  "Unhandled error." + (a ? " (" + a.message + ")" : "")
                );
                throw ((o.context = a), o);
              }
              var c = i[e];
              if (void 0 === c) return !1;
              if ("function" == typeof c) n(c, this, t);
              else {
                var d = c.length,
                  l = m(c, d);
                for (r = 0; r < d; ++r) n(l[r], this, t);
              }
              return !0;
            }),
            (i.prototype.addListener = function (e, t) {
              return d(this, e, t, !1);
            }),
            (i.prototype.on = i.prototype.addListener),
            (i.prototype.prependListener = function (e, t) {
              return d(this, e, t, !0);
            }),
            (i.prototype.once = function (e, t) {
              return o(t), this.on(e, u(this, e, t)), this;
            }),
            (i.prototype.prependOnceListener = function (e, t) {
              return o(t), this.prependListener(e, u(this, e, t)), this;
            }),
            (i.prototype.removeListener = function (e, t) {
              var r, n, s, i, a;
              if ((o(t), void 0 === (n = this._events))) return this;
              if (void 0 === (r = n[e])) return this;
              if (r === t || r.listener === t)
                0 == --this._eventsCount
                  ? (this._events = Object.create(null))
                  : (delete n[e],
                    n.removeListener &&
                      this.emit("removeListener", e, r.listener || t));
              else if ("function" != typeof r) {
                for (s = -1, i = r.length - 1; i >= 0; i--)
                  if (r[i] === t || r[i].listener === t) {
                    (a = r[i].listener), (s = i);
                    break;
                  }
                if (s < 0) return this;
                0 === s
                  ? r.shift()
                  : (function (e, t) {
                      for (; t + 1 < e.length; t++) e[t] = e[t + 1];
                      e.pop();
                    })(r, s),
                  1 === r.length && (n[e] = r[0]),
                  void 0 !== n.removeListener &&
                    this.emit("removeListener", e, a || t);
              }
              return this;
            }),
            (i.prototype.off = i.prototype.removeListener),
            (i.prototype.removeAllListeners = function (e) {
              var t, r, n;
              if (void 0 === (r = this._events)) return this;
              if (void 0 === r.removeListener)
                return (
                  0 === arguments.length
                    ? ((this._events = Object.create(null)),
                      (this._eventsCount = 0))
                    : void 0 !== r[e] &&
                      (0 == --this._eventsCount
                        ? (this._events = Object.create(null))
                        : delete r[e]),
                  this
                );
              if (0 === arguments.length) {
                var s,
                  i = Object.keys(r);
                for (n = 0; n < i.length; ++n)
                  "removeListener" !== (s = i[n]) && this.removeAllListeners(s);
                return (
                  this.removeAllListeners("removeListener"),
                  (this._events = Object.create(null)),
                  (this._eventsCount = 0),
                  this
                );
              }
              if ("function" == typeof (t = r[e])) this.removeListener(e, t);
              else if (void 0 !== t)
                for (n = t.length - 1; n >= 0; n--)
                  this.removeListener(e, t[n]);
              return this;
            }),
            (i.prototype.listeners = function (e) {
              return p(this, e, !0);
            }),
            (i.prototype.rawListeners = function (e) {
              return p(this, e, !1);
            }),
            (i.listenerCount = function (e, t) {
              return "function" == typeof e.listenerCount
                ? e.listenerCount(t)
                : h.call(e, t);
            }),
            (i.prototype.listenerCount = h),
            (i.prototype.eventNames = function () {
              return this._eventsCount > 0 ? t(this._events) : [];
            });
        },
        7080: (e, t, r) => {
          "use strict";
          r.d(t, { q: () => s, s: () => n });
          var n = {
              INVALID_API_KEY: 4001,
              INVALID_TOKEN: 4002,
              INVALID_MEETING_ID: 4003,
              INVALID_PARTICIPANT_ID: 4004,
              DUPLICATE_PARTICIPANT: 4005,
              ACCOUNT_DEACTIVATED: 4006,
              ACCOUNT_DISCONTINUED: 4007,
              INVALID_PERMISSIONS: 4008,
              MAX_PARTCIPANT_REACHED: 4009,
              MAX_SPEAKER_REACHED: 4010,
              START_RECORDING_FAILED: 4011,
              STOP_RECORDING_FAILED: 4012,
              START_LIVESTREAM_FAILED: 4013,
              STOP_LIVESTREAM_FAILED: 4014,
              INVALID_LIVESTREAM_CONFIG: 4015,
              START_HLS_FAILED: 4016,
              STOP_HLS_FAILED: 4017,
              START_TRANSCRIPTION_FAILED: 4031,
              STOP_TRANSCRIPTION_FAILED: 4032,
              RECORDING_FAILED: 5001,
              LIVESTREAM_FAILED: 5002,
              HLS_FAILED: 5003,
              TRANSCRIPTION_FAILED: 5007,
              ERROR_GET_VIDEO_MEDIA: 3011,
              ERROR_GET_AUDIO_MEDIA: 3012,
              ERROR_GET_DISPLAY_MEDIA: 3013,
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: 3014,
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: 3015,
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: 3016,
              ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED: 3017,
              ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED: 3018,
              ERROR_CAMERA_PERMISSION_DENIED_BY_OS: 3019,
              ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS: 3020,
              ERROR_CAMERA_NOT_FOUND: 3021,
              ERROR_MICROPHONE_NOT_FOUND: 3022,
              ERROR_CAMERA_IN_USE: 3023,
              ERROR_MICROPHONE_IN_USE: 3024,
              ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE: 3025,
              ERROR_VIDEO_SOURCE_INITIATION_FAILED: 3026,
              ERROR_WEBCAM_TRACK_ENDED: 3027,
              ERROR_MICROPHONE_TRACK_ENDED: 3028,
              ERROR_INVALID_CUSTOM_VIDEO_TRACK: 3029,
              ERROR_INVALID_CUSTOM_AUDIO_TRACK: 3030,
              ERROR_CUSTOM_VIDEO_TRACK_ENDED: 3031,
              ERROR_CUSTOM_AUDIO_TRACK_ENDED: 3032,
              ERROR_CAMERA_ACCESS_UNAVAILABLE: 3033,
              ERROR_MICROPHONE_ACCESS_UNAVAILABLE: 3034,
              ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED: 3035,
              ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED: 3036,
              ERROR_RN_CAMERA_NOT_FOUND: 3037,
              ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED: 3038,
              ERROR_RN_MIC_NOT_FOUND: 3039,
              ERROR_RN_CAMERA_ACCESS_UNAVAILABLE: 3040,
              ERROR_RN_MIC_ACCESS_UNAVAILABLE: 3041,
              ERROR_RN_CAMERA_TRACK_ENDED: 3042,
              ERROR_RN_MIC_TRACK_ENDED: 3043,
            },
            s = {
              ERROR_GET_VIDEO_MEDIA: {
                code: 3011,
                message: "Your browser/Device does not support Video.",
              },
              ERROR_GET_AUDIO_MEDIA: {
                code: 3012,
                message: "Your browser/Device does not support Audio.",
              },
              ERROR_GET_DISPLAY_MEDIA: {
                code: 3013,
                message: "Your browser/Device does not support Screen Sharing.",
              },
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: {
                code: 3014,
                message: "Video capture permission denied.",
              },
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: {
                code: 3015,
                message: "Audio capture permission denied.",
              },
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: {
                code: 3016,
                message: "Screen sharing permission denied.",
              },
              ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED: {
                code: 3017,
                message:
                  "Oops! It seems like camera access was denied or dismissed. To proceed, kindly grant access through your browser settings.",
              },
              ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED: {
                code: 3018,
                message:
                  "Oops! It seems like microphone access was denied or dismissed. To proceed, kindly grant access through your browser settings.",
              },
              ERROR_CAMERA_PERMISSION_DENIED_BY_OS: {
                code: 3019,
                message:
                  "Camera permission denied by OS system settings. Please check the system settings and grant permission for this browser.",
              },
              ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS: {
                code: 3020,
                message:
                  "Microphone permission denied by OS system settings. Please check the system settings and grant permission for this browser.",
              },
              ERROR_CAMERA_NOT_FOUND: {
                code: 3021,
                message:
                  "Please ensure your camera is connected and turned on, and that the camera driver is installed and up-to-date.",
              },
              ERROR_MICROPHONE_NOT_FOUND: {
                code: 3022,
                message:
                  "Please ensure your microphone is connected and turned on.",
              },
              ERROR_CAMERA_IN_USE: {
                code: 3023,
                message:
                  "The camera is being used by another application. Please close any programs utilizing the camera, such as video conferencing tools, screen recording software, or other browsers. Restart your browser and attempt again.",
              },
              ERROR_MICROPHONE_IN_USE: {
                code: 3024,
                message:
                  "The microphone is being used by another application. Please close any programs utilizing the microphone, such as video conferencing tools, screen recording software, or other browsers. Restart your browser and attempt again.",
              },
              ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE: {
                code: 3025,
                message:
                  "It seems like there's an issue with camera permission or video autoplay, you can check out this link for details: http://tinyurl.com/autoplay-issue",
              },
              ERROR_VIDEO_SOURCE_INITIATION_FAILED: {
                code: 3026,
                message:
                  "Unable to initiate video source. Please verify browser settings for video permissions.",
              },
              ERROR_WEBCAM_TRACK_ENDED: {
                code: 3027,
                message:
                  "Webcam track has ended or the webcam is disconnected. Please ensure your webcam is properly connected and try restarting it.",
              },
              ERROR_MICROPHONE_TRACK_ENDED: {
                code: 3028,
                message:
                  "Microphone track has ended or the microphone is disconnected. Please check your microphone connection and try again.",
              },
              ERROR_INVALID_CUSTOM_VIDEO_TRACK: {
                code: 3029,
                message:
                  "The provided custom video track is invalid; reverting to the default video track. Please ensure that the video track meets the required specifications.",
              },
              ERROR_INVALID_CUSTOM_AUDIO_TRACK: {
                code: 3030,
                message:
                  "The provided custom audio track is invalid; reverting to the default audio track. Please ensure that the audio track meets the required specifications.",
              },
              ERROR_CUSTOM_VIDEO_TRACK_ENDED: {
                code: 3031,
                message:
                  "The provided custom video track is in an ended state. Please verify the video track's status, and try again.",
              },
              ERROR_CUSTOM_AUDIO_TRACK_ENDED: {
                code: 3032,
                message:
                  "The provided custom audio track is in an ended state. Please verify the audio track's status, and try again.",
              },
              ERROR_CAMERA_ACCESS_UNAVAILABLE: {
                code: 3033,
                message:
                  "Camera access unavailable: Please ensure your device is compatible and that you're on a secure website (https://).",
              },
              ERROR_MICROPHONE_ACCESS_UNAVAILABLE: {
                code: 3034,
                message:
                  "Microphone access unavailable: Please ensure your device is compatible and that you're on a secure website (https://).",
              },
              ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED: {
                code: 3035,
                message:
                  "Oops! Something went wrong. The room was in a connecting state, and during that time, an action encountered an issue. Please try again after joining a meeting.",
              },
              ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED: {
                code: 3036,
                message:
                  "Oops! It seems like camera access was denied or dismissed. To proceed, kindly grant access through your App settings.",
              },
              ERROR_RN_CAMERA_NOT_FOUND: {
                code: 3037,
                message: "Please ensure your camera is connected and turned on",
              },
              ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED: {
                code: 3038,
                message:
                  "Oops! It seems like mic access was denied or dismissed. To proceed, kindly grant access through your App settings.",
              },
              ERROR_RN_MIC_NOT_FOUND: {
                code: 3039,
                message: "Please ensure your mic is connected and turned on",
              },
              ERROR_RN_CAMERA_ACCESS_UNAVAILABLE: {
                code: 3040,
                message:
                  "Camera access unavailable: Please ensure your device is compatible.",
              },
              ERROR_RN_MIC_ACCESS_UNAVAILABLE: {
                code: 3041,
                message:
                  "Microphone access unavailable: Please ensure your device is compatible.",
              },
              ERROR_RN_CAMERA_TRACK_ENDED: {
                code: 3042,
                message:
                  "Camera track has ended. Please make sure your camera is turned on or try restarting it.",
              },
              ERROR_RN_MIC_TRACK_ENDED: {
                code: 3043,
                message:
                  "Microphone track has ended or the microphone is disconnected. Please check your microphone connection and try again.",
              },
            };
        },
        7165: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(9506),
            void (
              n.lib.Cipher ||
              (function (e) {
                var t = n,
                  r = t.lib,
                  s = r.Base,
                  i = r.WordArray,
                  a = r.BufferedBlockAlgorithm,
                  o = t.enc,
                  c = (o.Utf8, o.Base64),
                  d = t.algo.EvpKDF,
                  l = (r.Cipher = a.extend({
                    cfg: s.extend(),
                    createEncryptor: function (e, t) {
                      return this.create(this._ENC_XFORM_MODE, e, t);
                    },
                    createDecryptor: function (e, t) {
                      return this.create(this._DEC_XFORM_MODE, e, t);
                    },
                    init: function (e, t, r) {
                      (this.cfg = this.cfg.extend(r)),
                        (this._xformMode = e),
                        (this._key = t),
                        this.reset();
                    },
                    reset: function () {
                      a.reset.call(this), this._doReset();
                    },
                    process: function (e) {
                      return this._append(e), this._process();
                    },
                    finalize: function (e) {
                      return e && this._append(e), this._doFinalize();
                    },
                    keySize: 4,
                    ivSize: 4,
                    _ENC_XFORM_MODE: 1,
                    _DEC_XFORM_MODE: 2,
                    _createHelper: (function () {
                      function e(e) {
                        return "string" == typeof e ? y : v;
                      }
                      return function (t) {
                        return {
                          encrypt: function (r, n, s) {
                            return e(n).encrypt(t, r, n, s);
                          },
                          decrypt: function (r, n, s) {
                            return e(n).decrypt(t, r, n, s);
                          },
                        };
                      };
                    })(),
                  })),
                  u =
                    ((r.StreamCipher = l.extend({
                      _doFinalize: function () {
                        return this._process(!0);
                      },
                      blockSize: 1,
                    })),
                    (t.mode = {})),
                  p = (r.BlockCipherMode = s.extend({
                    createEncryptor: function (e, t) {
                      return this.Encryptor.create(e, t);
                    },
                    createDecryptor: function (e, t) {
                      return this.Decryptor.create(e, t);
                    },
                    init: function (e, t) {
                      (this._cipher = e), (this._iv = t);
                    },
                  })),
                  h = (u.CBC = (function () {
                    var t = p.extend();
                    function r(t, r, n) {
                      var s,
                        i = this._iv;
                      i ? ((s = i), (this._iv = e)) : (s = this._prevBlock);
                      for (var a = 0; a < n; a++) t[r + a] ^= s[a];
                    }
                    return (
                      (t.Encryptor = t.extend({
                        processBlock: function (e, t) {
                          var n = this._cipher,
                            s = n.blockSize;
                          r.call(this, e, t, s),
                            n.encryptBlock(e, t),
                            (this._prevBlock = e.slice(t, t + s));
                        },
                      })),
                      (t.Decryptor = t.extend({
                        processBlock: function (e, t) {
                          var n = this._cipher,
                            s = n.blockSize,
                            i = e.slice(t, t + s);
                          n.decryptBlock(e, t),
                            r.call(this, e, t, s),
                            (this._prevBlock = i);
                        },
                      })),
                      t
                    );
                  })()),
                  m = ((t.pad = {}).Pkcs7 = {
                    pad: function (e, t) {
                      for (
                        var r = 4 * t,
                          n = r - (e.sigBytes % r),
                          s = (n << 24) | (n << 16) | (n << 8) | n,
                          a = [],
                          o = 0;
                        o < n;
                        o += 4
                      )
                        a.push(s);
                      var c = i.create(a, n);
                      e.concat(c);
                    },
                    unpad: function (e) {
                      var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                      e.sigBytes -= t;
                    },
                  }),
                  f =
                    ((r.BlockCipher = l.extend({
                      cfg: l.cfg.extend({ mode: h, padding: m }),
                      reset: function () {
                        var e;
                        l.reset.call(this);
                        var t = this.cfg,
                          r = t.iv,
                          n = t.mode;
                        this._xformMode == this._ENC_XFORM_MODE
                          ? (e = n.createEncryptor)
                          : ((e = n.createDecryptor),
                            (this._minBufferSize = 1)),
                          this._mode && this._mode.__creator == e
                            ? this._mode.init(this, r && r.words)
                            : ((this._mode = e.call(n, this, r && r.words)),
                              (this._mode.__creator = e));
                      },
                      _doProcessBlock: function (e, t) {
                        this._mode.processBlock(e, t);
                      },
                      _doFinalize: function () {
                        var e,
                          t = this.cfg.padding;
                        return (
                          this._xformMode == this._ENC_XFORM_MODE
                            ? (t.pad(this._data, this.blockSize),
                              (e = this._process(!0)))
                            : ((e = this._process(!0)), t.unpad(e)),
                          e
                        );
                      },
                      blockSize: 4,
                    })),
                    (r.CipherParams = s.extend({
                      init: function (e) {
                        this.mixIn(e);
                      },
                      toString: function (e) {
                        return (e || this.formatter).stringify(this);
                      },
                    }))),
                  g = ((t.format = {}).OpenSSL = {
                    stringify: function (e) {
                      var t = e.ciphertext,
                        r = e.salt;
                      return (
                        r
                          ? i
                              .create([1398893684, 1701076831])
                              .concat(r)
                              .concat(t)
                          : t
                      ).toString(c);
                    },
                    parse: function (e) {
                      var t,
                        r = c.parse(e),
                        n = r.words;
                      return (
                        1398893684 == n[0] &&
                          1701076831 == n[1] &&
                          ((t = i.create(n.slice(2, 4))),
                          n.splice(0, 4),
                          (r.sigBytes -= 16)),
                        f.create({ ciphertext: r, salt: t })
                      );
                    },
                  }),
                  v = (r.SerializableCipher = s.extend({
                    cfg: s.extend({ format: g }),
                    encrypt: function (e, t, r, n) {
                      n = this.cfg.extend(n);
                      var s = e.createEncryptor(r, n),
                        i = s.finalize(t),
                        a = s.cfg;
                      return f.create({
                        ciphertext: i,
                        key: r,
                        iv: a.iv,
                        algorithm: e,
                        mode: a.mode,
                        padding: a.padding,
                        blockSize: e.blockSize,
                        formatter: n.format,
                      });
                    },
                    decrypt: function (e, t, r, n) {
                      return (
                        (n = this.cfg.extend(n)),
                        (t = this._parse(t, n.format)),
                        e.createDecryptor(r, n).finalize(t.ciphertext)
                      );
                    },
                    _parse: function (e, t) {
                      return "string" == typeof e ? t.parse(e, this) : e;
                    },
                  })),
                  _ = ((t.kdf = {}).OpenSSL = {
                    execute: function (e, t, r, n, s) {
                      if ((n || (n = i.random(8)), s))
                        a = d
                          .create({ keySize: t + r, hasher: s })
                          .compute(e, n);
                      else var a = d.create({ keySize: t + r }).compute(e, n);
                      var o = i.create(a.words.slice(t), 4 * r);
                      return (
                        (a.sigBytes = 4 * t),
                        f.create({ key: a, iv: o, salt: n })
                      );
                    },
                  }),
                  y = (r.PasswordBasedCipher = v.extend({
                    cfg: v.cfg.extend({ kdf: _ }),
                    encrypt: function (e, t, r, n) {
                      var s = (n = this.cfg.extend(n)).kdf.execute(
                        r,
                        e.keySize,
                        e.ivSize,
                        n.salt,
                        n.hasher
                      );
                      n.iv = s.iv;
                      var i = v.encrypt.call(this, e, t, s.key, n);
                      return i.mixIn(s), i;
                    },
                    decrypt: function (e, t, r, n) {
                      (n = this.cfg.extend(n)), (t = this._parse(t, n.format));
                      var s = n.kdf.execute(
                        r,
                        e.keySize,
                        e.ivSize,
                        t.salt,
                        n.hasher
                      );
                      return (
                        (n.iv = s.iv), v.decrypt.call(this, e, t, s.key, n)
                      );
                    },
                  }));
              })()
            ));
        },
        7193: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = n,
                t = e.lib.StreamCipher,
                r = e.algo,
                s = (r.RC4 = t.extend({
                  _doReset: function () {
                    for (
                      var e = this._key,
                        t = e.words,
                        r = e.sigBytes,
                        n = (this._S = []),
                        s = 0;
                      s < 256;
                      s++
                    )
                      n[s] = s;
                    s = 0;
                    for (var i = 0; s < 256; s++) {
                      var a = s % r,
                        o = (t[a >>> 2] >>> (24 - (a % 4) * 8)) & 255;
                      i = (i + n[s] + o) % 256;
                      var c = n[s];
                      (n[s] = n[i]), (n[i] = c);
                    }
                    this._i = this._j = 0;
                  },
                  _doProcessBlock: function (e, t) {
                    e[t] ^= i.call(this);
                  },
                  keySize: 8,
                  ivSize: 0,
                }));
              function i() {
                for (
                  var e = this._S, t = this._i, r = this._j, n = 0, s = 0;
                  s < 4;
                  s++
                ) {
                  r = (r + e[(t = (t + 1) % 256)]) % 256;
                  var i = e[t];
                  (e[t] = e[r]),
                    (e[r] = i),
                    (n |= e[(e[t] + e[r]) % 256] << (24 - 8 * s));
                }
                return (this._i = t), (this._j = r), n;
              }
              e.RC4 = t._createHelper(s);
              var a = (r.RC4Drop = s.extend({
                cfg: s.cfg.extend({ drop: 192 }),
                _doReset: function () {
                  s._doReset.call(this);
                  for (var e = this.cfg.drop; e > 0; e--) i.call(this);
                },
              }));
              e.RC4Drop = t._createHelper(a);
            })(),
            n.RC4);
        },
        7232: function (e, t, r) {
          var n;
          !(function (s, i) {
            "use strict";
            var a = "function",
              o = "undefined",
              c = "object",
              d = "string",
              l = "major",
              u = "model",
              p = "name",
              h = "type",
              m = "vendor",
              f = "version",
              g = "architecture",
              v = "console",
              _ = "mobile",
              y = "tablet",
              b = "smarttv",
              w = "wearable",
              S = "embedded",
              R = "Amazon",
              k = "Apple",
              E = "ASUS",
              C = "BlackBerry",
              T = "Browser",
              P = "Chrome",
              O = "Firefox",
              x = "Google",
              D = "Huawei",
              I = "LG",
              A = "Microsoft",
              M = "Motorola",
              L = "Opera",
              N = "Samsung",
              j = "Sharp",
              B = "Sony",
              F = "Xiaomi",
              U = "Zebra",
              W = "Facebook",
              q = "Chromium OS",
              V = "Mac OS",
              H = " Browser",
              z = function (e) {
                for (var t = {}, r = 0; r < e.length; r++)
                  t[e[r].toUpperCase()] = e[r];
                return t;
              },
              G = function (e, t) {
                return typeof e === d && -1 !== K(t).indexOf(K(e));
              },
              K = function (e) {
                return e.toLowerCase();
              },
              $ = function (e, t) {
                if (typeof e === d)
                  return (
                    (e = e.replace(/^\s\s*/, "")),
                    typeof t === o ? e : e.substring(0, 500)
                  );
              },
              J = function (e, t) {
                for (var r, n, s, o, d, l, u = 0; u < t.length && !d; ) {
                  var p = t[u],
                    h = t[u + 1];
                  for (r = n = 0; r < p.length && !d && p[r]; )
                    if ((d = p[r++].exec(e)))
                      for (s = 0; s < h.length; s++)
                        (l = d[++n]),
                          typeof (o = h[s]) === c && o.length > 0
                            ? 2 === o.length
                              ? typeof o[1] == a
                                ? (this[o[0]] = o[1].call(this, l))
                                : (this[o[0]] = o[1])
                              : 3 === o.length
                              ? typeof o[1] !== a || (o[1].exec && o[1].test)
                                ? (this[o[0]] = l ? l.replace(o[1], o[2]) : i)
                                : (this[o[0]] = l
                                    ? o[1].call(this, l, o[2])
                                    : i)
                              : 4 === o.length &&
                                (this[o[0]] = l
                                  ? o[3].call(this, l.replace(o[1], o[2]))
                                  : i)
                            : (this[o] = l || i);
                  u += 2;
                }
              },
              Q = function (e, t) {
                for (var r in t)
                  if (typeof t[r] === c && t[r].length > 0) {
                    for (var n = 0; n < t[r].length; n++)
                      if (G(t[r][n], e)) return "?" === r ? i : r;
                  } else if (G(t[r], e)) return "?" === r ? i : r;
                return t.hasOwnProperty("*") ? t["*"] : e;
              },
              Y = {
                ME: "4.90",
                "NT 3.11": "NT3.51",
                "NT 4.0": "NT4.0",
                2e3: "NT 5.0",
                XP: ["NT 5.1", "NT 5.2"],
                Vista: "NT 6.0",
                7: "NT 6.1",
                8: "NT 6.2",
                8.1: "NT 6.3",
                10: ["NT 6.4", "NT 10.0"],
                RT: "ARM",
              },
              X = {
                browser: [
                  [/\b(?:crmo|crios)\/([\w\.]+)/i],
                  [f, [p, "Chrome"]],
                  [/edg(?:e|ios|a)?\/([\w\.]+)/i],
                  [f, [p, "Edge"]],
                  [
                    /(opera mini)\/([-\w\.]+)/i,
                    /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                    /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i,
                  ],
                  [p, f],
                  [/opios[\/ ]+([\w\.]+)/i],
                  [f, [p, L + " Mini"]],
                  [/\bop(?:rg)?x\/([\w\.]+)/i],
                  [f, [p, L + " GX"]],
                  [/\bopr\/([\w\.]+)/i],
                  [f, [p, L]],
                  [/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],
                  [f, [p, "Baidu"]],
                  [/\b(?:mxbrowser|mxios|myie2)\/?([-\w\.]*)\b/i],
                  [f, [p, "Maxthon"]],
                  [
                    /(kindle)\/([\w\.]+)/i,
                    /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\/ ]?([\w\.]*)/i,
                    /(avant|iemobile|slim(?:browser|boat|jet))[\/ ]?([\d\.]*)/i,
                    /(?:ms|\()(ie) ([\w\.]+)/i,
                    /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\/([-\w\.]+)/i,
                    /(heytap|ovi|115)browser\/([\d\.]+)/i,
                    /(weibo)__([\d\.]+)/i,
                  ],
                  [p, f],
                  [/quark(?:pc)?\/([-\w\.]+)/i],
                  [f, [p, "Quark"]],
                  [/\bddg\/([\w\.]+)/i],
                  [f, [p, "DuckDuckGo"]],
                  [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],
                  [f, [p, "UC" + T]],
                  [
                    /microm.+\bqbcore\/([\w\.]+)/i,
                    /\bqbcore\/([\w\.]+).+microm/i,
                    /micromessenger\/([\w\.]+)/i,
                  ],
                  [f, [p, "WeChat"]],
                  [/konqueror\/([\w\.]+)/i],
                  [f, [p, "Konqueror"]],
                  [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],
                  [f, [p, "IE"]],
                  [/ya(?:search)?browser\/([\w\.]+)/i],
                  [f, [p, "Yandex"]],
                  [/slbrowser\/([\w\.]+)/i],
                  [f, [p, "Smart Lenovo " + T]],
                  [/(avast|avg)\/([\w\.]+)/i],
                  [[p, /(.+)/, "$1 Secure " + T], f],
                  [/\bfocus\/([\w\.]+)/i],
                  [f, [p, O + " Focus"]],
                  [/\bopt\/([\w\.]+)/i],
                  [f, [p, L + " Touch"]],
                  [/coc_coc\w+\/([\w\.]+)/i],
                  [f, [p, "Coc Coc"]],
                  [/dolfin\/([\w\.]+)/i],
                  [f, [p, "Dolphin"]],
                  [/coast\/([\w\.]+)/i],
                  [f, [p, L + " Coast"]],
                  [/miuibrowser\/([\w\.]+)/i],
                  [f, [p, "MIUI" + H]],
                  [/fxios\/([\w\.-]+)/i],
                  [f, [p, O]],
                  [/\bqihoobrowser\/?([\w\.]*)/i],
                  [f, [p, "360"]],
                  [/\b(qq)\/([\w\.]+)/i],
                  [[p, /(.+)/, "$1Browser"], f],
                  [/(oculus|sailfish|huawei|vivo|pico)browser\/([\w\.]+)/i],
                  [[p, /(.+)/, "$1" + H], f],
                  [/samsungbrowser\/([\w\.]+)/i],
                  [f, [p, N + " Internet"]],
                  [/metasr[\/ ]?([\d\.]+)/i],
                  [f, [p, "Sogou Explorer"]],
                  [/(sogou)mo\w+\/([\d\.]+)/i],
                  [[p, "Sogou Mobile"], f],
                  [
                    /(electron)\/([\w\.]+) safari/i,
                    /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                    /m?(qqbrowser|2345(?=browser|chrome|explorer))\w*[\/ ]?v?([\w\.]+)/i,
                  ],
                  [p, f],
                  [/(lbbrowser|rekonq)/i, /\[(linkedin)app\]/i],
                  [p],
                  [
                    /ome\/([\w\.]+) \w* ?(iron) saf/i,
                    /ome\/([\w\.]+).+qihu (360)[es]e/i,
                  ],
                  [f, p],
                  [
                    /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i,
                  ],
                  [[p, W], f],
                  [
                    /(Klarna)\/([\w\.]+)/i,
                    /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
                    /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
                    /safari (line)\/([\w\.]+)/i,
                    /\b(line)\/([\w\.]+)\/iab/i,
                    /(alipay)client\/([\w\.]+)/i,
                    /(twitter)(?:and| f.+e\/([\w\.]+))/i,
                    /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i,
                  ],
                  [p, f],
                  [/\bgsa\/([\w\.]+) .*safari\//i],
                  [f, [p, "GSA"]],
                  [/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],
                  [f, [p, "TikTok"]],
                  [/headlesschrome(?:\/([\w\.]+)| )/i],
                  [f, [p, P + " Headless"]],
                  [/ wv\).+(chrome)\/([\w\.]+)/i],
                  [[p, P + " WebView"], f],
                  [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],
                  [f, [p, "Android " + T]],
                  [
                    /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i,
                  ],
                  [p, f],
                  [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],
                  [f, [p, "Mobile Safari"]],
                  [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],
                  [f, p],
                  [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],
                  [
                    p,
                    [
                      f,
                      Q,
                      {
                        "1.0": "/8",
                        1.2: "/1",
                        1.3: "/3",
                        "2.0": "/412",
                        "2.0.2": "/416",
                        "2.0.3": "/417",
                        "2.0.4": "/419",
                        "?": "/",
                      },
                    ],
                  ],
                  [/(webkit|khtml)\/([\w\.]+)/i],
                  [p, f],
                  [/(navigator|netscape\d?)\/([-\w\.]+)/i],
                  [[p, "Netscape"], f],
                  [/(wolvic|librewolf)\/([\w\.]+)/i],
                  [p, f],
                  [/mobile vr; rv:([\w\.]+)\).+firefox/i],
                  [f, [p, O + " Reality"]],
                  [
                    /ekiohf.+(flow)\/([\w\.]+)/i,
                    /(swiftfox)/i,
                    /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\/ ]?([\w\.\+]+)/i,
                    /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                    /(firefox)\/([\w\.]+)/i,
                    /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                    /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                    /(links) \(([\w\.]+)/i,
                  ],
                  [p, [f, /_/g, "."]],
                  [/(cobalt)\/([\w\.]+)/i],
                  [p, [f, /master.|lts./, ""]],
                ],
                cpu: [
                  [/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],
                  [[g, "amd64"]],
                  [/(ia32(?=;))/i],
                  [[g, K]],
                  [/((?:i[346]|x)86)[;\)]/i],
                  [[g, "ia32"]],
                  [/\b(aarch64|arm(v?8e?l?|_?64))\b/i],
                  [[g, "arm64"]],
                  [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],
                  [[g, "armhf"]],
                  [/windows (ce|mobile); ppc;/i],
                  [[g, "arm"]],
                  [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],
                  [[g, /ower/, "", K]],
                  [/(sun4\w)[;\)]/i],
                  [[g, "sparc"]],
                  [
                    /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i,
                  ],
                  [[g, K]],
                ],
                device: [
                  [
                    /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i,
                  ],
                  [u, [m, N], [h, y]],
                  [
                    /\b((?:s[cgp]h|gt|sm)-(?![lr])\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
                    /samsung[- ]((?!sm-[lr])[-\w]+)/i,
                    /sec-(sgh\w+)/i,
                  ],
                  [u, [m, N], [h, _]],
                  [/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],
                  [u, [m, k], [h, _]],
                  [
                    /\((ipad);[-\w\),; ]+apple/i,
                    /applecoremedia\/[\w\.]+ \((ipad)/i,
                    /\b(ipad)\d\d?,\d\d?[;\]].+ios/i,
                  ],
                  [u, [m, k], [h, y]],
                  [/(macintosh);/i],
                  [u, [m, k]],
                  [/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],
                  [u, [m, j], [h, _]],
                  [/(?:honor)([-\w ]+)[;\)]/i],
                  [u, [m, "Honor"], [h, _]],
                  [
                    /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i,
                  ],
                  [u, [m, D], [h, y]],
                  [
                    /(?:huawei)([-\w ]+)[;\)]/i,
                    /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i,
                  ],
                  [u, [m, D], [h, _]],
                  [
                    /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
                    /\b; (\w+) build\/hm\1/i,
                    /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                    /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                    /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
                    /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\))/i,
                  ],
                  [
                    [u, /_/g, " "],
                    [m, F],
                    [h, _],
                  ],
                  [
                    /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
                    /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i,
                  ],
                  [
                    [u, /_/g, " "],
                    [m, F],
                    [h, y],
                  ],
                  [
                    /; (\w+) bui.+ oppo/i,
                    /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i,
                  ],
                  [u, [m, "OPPO"], [h, _]],
                  [/\b(opd2\d{3}a?) bui/i],
                  [u, [m, "OPPO"], [h, y]],
                  [
                    /vivo (\w+)(?: bui|\))/i,
                    /\b(v[12]\d{3}\w?[at])(?: bui|;)/i,
                  ],
                  [u, [m, "Vivo"], [h, _]],
                  [/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],
                  [u, [m, "Realme"], [h, _]],
                  [
                    /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                    /\bmot(?:orola)?[- ](\w*)/i,
                    /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i,
                  ],
                  [u, [m, M], [h, _]],
                  [/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
                  [u, [m, M], [h, y]],
                  [
                    /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i,
                  ],
                  [u, [m, I], [h, y]],
                  [
                    /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                    /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                    /\blg-?([\d\w]+) bui/i,
                  ],
                  [u, [m, I], [h, _]],
                  [
                    /(ideatab[-\w ]+)/i,
                    /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i,
                  ],
                  [u, [m, "Lenovo"], [h, y]],
                  [
                    /(?:maemo|nokia).*(n900|lumia \d+)/i,
                    /nokia[-_ ]?([-\w\.]*)/i,
                  ],
                  [
                    [u, /_/g, " "],
                    [m, "Nokia"],
                    [h, _],
                  ],
                  [/(pixel c)\b/i],
                  [u, [m, x], [h, y]],
                  [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],
                  [u, [m, x], [h, _]],
                  [
                    /droid.+; (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i,
                  ],
                  [u, [m, B], [h, _]],
                  [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
                  [
                    [u, "Xperia Tablet"],
                    [m, B],
                    [h, y],
                  ],
                  [
                    / (kb2005|in20[12]5|be20[12][59])\b/i,
                    /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i,
                  ],
                  [u, [m, "OnePlus"], [h, _]],
                  [
                    /(alexa)webm/i,
                    /(kf[a-z]{2}wi|aeo(?!bc)\w\w)( bui|\))/i,
                    /(kf[a-z]+)( bui|\)).+silk\//i,
                  ],
                  [u, [m, R], [h, y]],
                  [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],
                  [
                    [u, /(.+)/g, "Fire Phone $1"],
                    [m, R],
                    [h, _],
                  ],
                  [/(playbook);[-\w\),; ]+(rim)/i],
                  [u, m, [h, y]],
                  [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i],
                  [u, [m, C], [h, _]],
                  [
                    /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i,
                  ],
                  [u, [m, E], [h, y]],
                  [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
                  [u, [m, E], [h, _]],
                  [/(nexus 9)/i],
                  [u, [m, "HTC"], [h, y]],
                  [
                    /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                    /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                    /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i,
                  ],
                  [m, [u, /_/g, " "], [h, _]],
                  [
                    /droid [\w\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\w*(\)| bui)/i,
                  ],
                  [u, [m, "TCL"], [h, y]],
                  [/(itel) ((\w+))/i],
                  [
                    [m, K],
                    u,
                    [h, Q, { tablet: ["p10001l", "w7001"], "*": "mobile" }],
                  ],
                  [/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],
                  [u, [m, "Acer"], [h, y]],
                  [/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i],
                  [u, [m, "Meizu"], [h, _]],
                  [/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],
                  [u, [m, "Ulefone"], [h, _]],
                  [
                    /; (energy ?\w+)(?: bui|\))/i,
                    /; energizer ([\w ]+)(?: bui|\))/i,
                  ],
                  [u, [m, "Energizer"], [h, _]],
                  [
                    /; cat (b35);/i,
                    /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\))/i,
                  ],
                  [u, [m, "Cat"], [h, _]],
                  [/((?:new )?andromax[\w- ]+)(?: bui|\))/i],
                  [u, [m, "Smartfren"], [h, _]],
                  [/droid.+; (a(?:015|06[35]|142p?))/i],
                  [u, [m, "Nothing"], [h, _]],
                  [
                    /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\w]*)/i,
                    /; (imo) ((?!tab)[\w ]+?)(?: bui|\))/i,
                    /(hp) ([\w ]+\w)/i,
                    /(asus)-?(\w+)/i,
                    /(microsoft); (lumia[\w ]+)/i,
                    /(lenovo)[-_ ]?([-\w]+)/i,
                    /(jolla)/i,
                    /(oppo) ?([\w ]+) bui/i,
                  ],
                  [m, u, [h, _]],
                  [
                    /(imo) (tab \w+)/i,
                    /(kobo)\s(ereader|touch)/i,
                    /(archos) (gamepad2?)/i,
                    /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                    /(kindle)\/([\w\.]+)/i,
                    /(nook)[\w ]+build\/(\w+)/i,
                    /(dell) (strea[kpr\d ]*[\dko])/i,
                    /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                    /(trinity)[- ]*(t\d{3}) bui/i,
                    /(gigaset)[- ]+(q\w{1,9}) bui/i,
                    /(vodafone) ([\w ]+)(?:\)| bui)/i,
                  ],
                  [m, u, [h, y]],
                  [/(surface duo)/i],
                  [u, [m, A], [h, y]],
                  [/droid [\d\.]+; (fp\du?)(?: b|\))/i],
                  [u, [m, "Fairphone"], [h, _]],
                  [/(u304aa)/i],
                  [u, [m, "AT&T"], [h, _]],
                  [/\bsie-(\w*)/i],
                  [u, [m, "Siemens"], [h, _]],
                  [/\b(rct\w+) b/i],
                  [u, [m, "RCA"], [h, y]],
                  [/\b(venue[\d ]{2,7}) b/i],
                  [u, [m, "Dell"], [h, y]],
                  [/\b(q(?:mv|ta)\w+) b/i],
                  [u, [m, "Verizon"], [h, y]],
                  [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],
                  [u, [m, "Barnes & Noble"], [h, y]],
                  [/\b(tm\d{3}\w+) b/i],
                  [u, [m, "NuVision"], [h, y]],
                  [/\b(k88) b/i],
                  [u, [m, "ZTE"], [h, y]],
                  [/\b(nx\d{3}j) b/i],
                  [u, [m, "ZTE"], [h, _]],
                  [/\b(gen\d{3}) b.+49h/i],
                  [u, [m, "Swiss"], [h, _]],
                  [/\b(zur\d{3}) b/i],
                  [u, [m, "Swiss"], [h, y]],
                  [/\b((zeki)?tb.*\b) b/i],
                  [u, [m, "Zeki"], [h, y]],
                  [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i],
                  [[m, "Dragon Touch"], u, [h, y]],
                  [/\b(ns-?\w{0,9}) b/i],
                  [u, [m, "Insignia"], [h, y]],
                  [/\b((nxa|next)-?\w{0,9}) b/i],
                  [u, [m, "NextBook"], [h, y]],
                  [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],
                  [[m, "Voice"], u, [h, _]],
                  [/\b(lvtel\-)?(v1[12]) b/i],
                  [[m, "LvTel"], u, [h, _]],
                  [/\b(ph-1) /i],
                  [u, [m, "Essential"], [h, _]],
                  [/\b(v(100md|700na|7011|917g).*\b) b/i],
                  [u, [m, "Envizen"], [h, y]],
                  [/\b(trio[-\w\. ]+) b/i],
                  [u, [m, "MachSpeed"], [h, y]],
                  [/\btu_(1491) b/i],
                  [u, [m, "Rotor"], [h, y]],
                  [/(shield[\w ]+) b/i],
                  [u, [m, "Nvidia"], [h, y]],
                  [/(sprint) (\w+)/i],
                  [m, u, [h, _]],
                  [/(kin\.[onetw]{3})/i],
                  [
                    [u, /\./g, " "],
                    [m, A],
                    [h, _],
                  ],
                  [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],
                  [u, [m, U], [h, y]],
                  [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
                  [u, [m, U], [h, _]],
                  [/smart-tv.+(samsung)/i],
                  [m, [h, b]],
                  [/hbbtv.+maple;(\d+)/i],
                  [
                    [u, /^/, "SmartTV"],
                    [m, N],
                    [h, b],
                  ],
                  [
                    /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i,
                  ],
                  [
                    [m, I],
                    [h, b],
                  ],
                  [/(apple) ?tv/i],
                  [m, [u, k + " TV"], [h, b]],
                  [/crkey/i],
                  [
                    [u, P + "cast"],
                    [m, x],
                    [h, b],
                  ],
                  [/droid.+aft(\w+)( bui|\))/i],
                  [u, [m, R], [h, b]],
                  [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i],
                  [u, [m, j], [h, b]],
                  [/(bravia[\w ]+)( bui|\))/i],
                  [u, [m, B], [h, b]],
                  [/(mitv-\w{5}) bui/i],
                  [u, [m, F], [h, b]],
                  [/Hbbtv.*(technisat) (.*);/i],
                  [m, u, [h, b]],
                  [
                    /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
                    /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i,
                  ],
                  [
                    [m, $],
                    [u, $],
                    [h, b],
                  ],
                  [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],
                  [[h, b]],
                  [/(ouya)/i, /(nintendo) ([wids3utch]+)/i],
                  [m, u, [h, v]],
                  [/droid.+; (shield) bui/i],
                  [u, [m, "Nvidia"], [h, v]],
                  [/(playstation [345portablevi]+)/i],
                  [u, [m, B], [h, v]],
                  [/\b(xbox(?: one)?(?!; xbox))[\); ]/i],
                  [u, [m, A], [h, v]],
                  [/\b(sm-[lr]\d\d[05][fnuw]?s?)\b/i],
                  [u, [m, N], [h, w]],
                  [/((pebble))app/i],
                  [m, u, [h, w]],
                  [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],
                  [u, [m, k], [h, w]],
                  [/droid.+; (glass) \d/i],
                  [u, [m, x], [h, w]],
                  [/droid.+; (wt63?0{2,3})\)/i],
                  [u, [m, U], [h, w]],
                  [/droid.+; (glass) \d/i],
                  [u, [m, x], [h, w]],
                  [/(pico) (4|neo3(?: link|pro)?)/i],
                  [m, u, [h, w]],
                  [/; (quest( \d| pro)?)/i],
                  [u, [m, W], [h, w]],
                  [/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],
                  [m, [h, S]],
                  [/(aeobc)\b/i],
                  [u, [m, R], [h, S]],
                  [
                    /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i,
                  ],
                  [u, [h, _]],
                  [
                    /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i,
                  ],
                  [u, [h, y]],
                  [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],
                  [[h, y]],
                  [
                    /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i,
                  ],
                  [[h, _]],
                  [/(android[-\w\. ]{0,9});.+buil/i],
                  [u, [m, "Generic"]],
                ],
                engine: [
                  [/windows.+ edge\/([\w\.]+)/i],
                  [f, [p, "EdgeHTML"]],
                  [/(arkweb)\/([\w\.]+)/i],
                  [p, f],
                  [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],
                  [f, [p, "Blink"]],
                  [
                    /(presto)\/([\w\.]+)/i,
                    /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\/([\w\.]+)/i,
                    /ekioh(flow)\/([\w\.]+)/i,
                    /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                    /(icab)[\/ ]([23]\.[\d\.]+)/i,
                    /\b(libweb)/i,
                  ],
                  [p, f],
                  [/rv\:([\w\.]{1,9})\b.+(gecko)/i],
                  [f, p],
                ],
                os: [
                  [/microsoft (windows) (vista|xp)/i],
                  [p, f],
                  [/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i],
                  [p, [f, Q, Y]],
                  [
                    /windows nt 6\.2; (arm)/i,
                    /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
                    /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i,
                  ],
                  [
                    [f, Q, Y],
                    [p, "Windows"],
                  ],
                  [
                    /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                    /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
                    /cfnetwork\/.+darwin/i,
                  ],
                  [
                    [f, /_/g, "."],
                    [p, "iOS"],
                  ],
                  [
                    /(mac os x) ?([\w\. ]*)/i,
                    /(macintosh|mac_powerpc\b)(?!.+haiku)/i,
                  ],
                  [
                    [p, V],
                    [f, /_/g, "."],
                  ],
                  [/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],
                  [f, p],
                  [
                    /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish|openharmony)[-\/ ]?([\w\.]*)/i,
                    /(blackberry)\w*\/([\w\.]*)/i,
                    /(tizen|kaios)[\/ ]([\w\.]+)/i,
                    /\((series40);/i,
                  ],
                  [p, f],
                  [/\(bb(10);/i],
                  [f, [p, C]],
                  [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],
                  [f, [p, "Symbian"]],
                  [
                    /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i,
                  ],
                  [f, [p, O + " OS"]],
                  [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],
                  [f, [p, "webOS"]],
                  [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],
                  [f, [p, "watchOS"]],
                  [/crkey\/([\d\.]+)/i],
                  [f, [p, P + "cast"]],
                  [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],
                  [[p, q], f],
                  [
                    /panasonic;(viera)/i,
                    /(netrange)mmh/i,
                    /(nettv)\/(\d+\.[\w\.]+)/i,
                    /(nintendo|playstation) ([wids345portablevuch]+)/i,
                    /(xbox); +xbox ([^\);]+)/i,
                    /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                    /(mint)[\/\(\) ]?(\w*)/i,
                    /(mageia|vectorlinux)[; ]/i,
                    /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                    /(hurd|linux) ?([\w\.]*)/i,
                    /(gnu) ?([\w\.]*)/i,
                    /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                    /(haiku) (\w+)/i,
                  ],
                  [p, f],
                  [/(sunos) ?([\w\.\d]*)/i],
                  [[p, "Solaris"], f],
                  [
                    /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                    /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                    /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
                    /(unix) ?([\w\.]*)/i,
                  ],
                  [p, f],
                ],
              },
              Z = function (e, t) {
                if (
                  (typeof e === c && ((t = e), (e = i)), !(this instanceof Z))
                )
                  return new Z(e, t).getResult();
                var r = typeof s !== o && s.navigator ? s.navigator : i,
                  n = e || (r && r.userAgent ? r.userAgent : ""),
                  v = r && r.userAgentData ? r.userAgentData : i,
                  b = t
                    ? (function (e, t) {
                        var r = {};
                        for (var n in e)
                          t[n] && t[n].length % 2 == 0
                            ? (r[n] = t[n].concat(e[n]))
                            : (r[n] = e[n]);
                        return r;
                      })(X, t)
                    : X,
                  w = r && r.userAgent == n;
                return (
                  (this.getBrowser = function () {
                    var e,
                      t = {};
                    return (
                      (t[p] = i),
                      (t[f] = i),
                      J.call(t, n, b.browser),
                      (t[l] =
                        typeof (e = t[f]) === d
                          ? e.replace(/[^\d\.]/g, "").split(".")[0]
                          : i),
                      w &&
                        r &&
                        r.brave &&
                        typeof r.brave.isBrave == a &&
                        (t[p] = "Brave"),
                      t
                    );
                  }),
                  (this.getCPU = function () {
                    var e = {};
                    return (e[g] = i), J.call(e, n, b.cpu), e;
                  }),
                  (this.getDevice = function () {
                    var e = {};
                    return (
                      (e[m] = i),
                      (e[u] = i),
                      (e[h] = i),
                      J.call(e, n, b.device),
                      w && !e[h] && v && v.mobile && (e[h] = _),
                      w &&
                        "Macintosh" == e[u] &&
                        r &&
                        typeof r.standalone !== o &&
                        r.maxTouchPoints &&
                        r.maxTouchPoints > 2 &&
                        ((e[u] = "iPad"), (e[h] = y)),
                      e
                    );
                  }),
                  (this.getEngine = function () {
                    var e = {};
                    return (e[p] = i), (e[f] = i), J.call(e, n, b.engine), e;
                  }),
                  (this.getOS = function () {
                    var e = {};
                    return (
                      (e[p] = i),
                      (e[f] = i),
                      J.call(e, n, b.os),
                      w &&
                        !e[p] &&
                        v &&
                        v.platform &&
                        "Unknown" != v.platform &&
                        (e[p] = v.platform
                          .replace(/chrome os/i, q)
                          .replace(/macos/i, V)),
                      e
                    );
                  }),
                  (this.getResult = function () {
                    return {
                      ua: this.getUA(),
                      browser: this.getBrowser(),
                      engine: this.getEngine(),
                      os: this.getOS(),
                      device: this.getDevice(),
                      cpu: this.getCPU(),
                    };
                  }),
                  (this.getUA = function () {
                    return n;
                  }),
                  (this.setUA = function (e) {
                    return (
                      (n = typeof e === d && e.length > 500 ? $(e, 500) : e),
                      this
                    );
                  }),
                  this.setUA(n),
                  this
                );
              };
            (Z.VERSION = "1.0.40"),
              (Z.BROWSER = z([p, f, l])),
              (Z.CPU = z([g])),
              (Z.DEVICE = z([u, m, h, v, _, b, y, w, S])),
              (Z.ENGINE = Z.OS = z([p, f])),
              typeof t !== o
                ? (e.exports && (t = e.exports = Z), (t.UAParser = Z))
                : r.amdO
                ? (n = function () {
                    return Z;
                  }.call(t, r, t, e)) === i || (e.exports = n)
                : typeof s !== o && (s.UAParser = Z);
            var ee = typeof s !== o && (s.jQuery || s.Zepto);
            if (ee && !ee.ua) {
              var te = new Z();
              (ee.ua = te.getResult()),
                (ee.ua.get = function () {
                  return te.getUA();
                }),
                (ee.ua.set = function (e) {
                  te.setUA(e);
                  var t = te.getResult();
                  for (var r in t) ee.ua[r] = t[r];
                });
            }
          })("object" == typeof window ? window : this);
        },
        7363: (e, t, r) => {
          var n = r(5020),
            s = r(3804),
            i = r(5602);
          (t.grammar = i),
            (t.write = s),
            (t.parse = n.parse),
            (t.parseParams = n.parseParams),
            (t.parseFmtpConfig = n.parseFmtpConfig),
            (t.parsePayloads = n.parsePayloads),
            (t.parseRemoteCandidates = n.parseRemoteCandidates),
            (t.parseImageAttributes = n.parseImageAttributes),
            (t.parseSimulcastStreamList = n.parseSimulcastStreamList);
        },
        7402: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome55 = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = r(4893),
            d = i(r(1765)),
            l = i(r(8046)),
            u = i(r(5544)),
            p = i(r(4496)),
            h = r(521),
            m = r(1305),
            f = new o.Logger("Chrome55"),
            g = { OS: 1024, MIS: 1024 };
          class v extends h.HandlerInterface {
            static createFactory() {
              return () => new v();
            }
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdTrack = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome55";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = a.parse(t.sdp);
                return u.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (f.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  f.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addStream(this._sendStream);
              let s,
                i = await this._pc.createOffer(),
                o = a.parse(i.sdp);
              const c = d.clone(this._sendingRtpParametersByKind[e.kind]);
              c.codecs = l.reduceCodecs(c.codecs);
              const h = d.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              if (
                ((h.codecs = l.reduceCodecs(h.codecs)),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: o,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling simulcast"),
                  (o = a.parse(i.sdp)),
                  (s = o.media.find((e) => "video" === e.type)),
                  p.addLegacySimulcast({
                    offerMediaObject: s,
                    track: e,
                    numStreams: t.length,
                  }),
                  (i = { type: "offer", sdp: a.write(o) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  i
                ),
                await this._pc.setLocalDescription(i),
                (o = a.parse(this._pc.localDescription.sdp)),
                (s = o.media.find((t) => t.type === e.kind)),
                (c.rtcp.cname = u.getCname({ offerMediaObject: s })),
                (c.encodings = p.getRtpEncodings({
                  offerMediaObject: s,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < c.encodings.length; ++e)
                  t[e] && Object.assign(c.encodings[e], t[e]);
              if (
                c.encodings.length > 1 &&
                "video/vp8" === c.codecs[0].mimeType.toLowerCase()
              )
                for (const e of c.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: s,
                offerRtpParameters: c,
                answerRtpParameters: h,
                codecOptions: r,
              });
              const m = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                m
              ),
                await this._pc.setRemoteDescription(m);
              const g = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._mapSendLocalIdTrack.set(g, e),
                { localId: g, rtpParameters: c }
              );
            }
            async stopSending(e) {
              this.assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdTrack.get(e);
              if (!t) throw new Error("track not found");
              this._mapSendLocalIdTrack.delete(e),
                this._sendStream.removeTrack(t),
                this._pc.addStream(this._sendStream);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void f.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setMaxSpatialLayer(e, t) {
              throw new c.UnsupportedError(" not implemented");
            }
            async setRtpEncodingParameters(e, t) {
              throw new c.UnsupportedError("not supported");
            }
            async getSenderStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              f.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % g.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [];
              for (const t of e) {
                const {
                  trackId: e,
                  kind: r,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                f.debug("receive() [trackId:%s, kind:%s]", e, r);
                const i = r;
                this._remoteSdp.receive({
                  mid: i,
                  kind: r,
                  offerRtpParameters: n,
                  streamId: s || n.rtcp.cname,
                  trackId: e,
                });
              }
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              let n = await this._pc.createAnswer();
              const s = a.parse(n.sdp);
              for (const t of e) {
                const { kind: e, rtpParameters: r } = t,
                  n = e,
                  i = s.media.find((e) => String(e.mid) === n);
                u.applyCodecParameters({
                  offerRtpParameters: r,
                  answerMediaObject: i,
                });
              }
              (n = { type: "answer", sdp: a.write(s) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: s,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const r of e) {
                const { kind: e, trackId: n, rtpParameters: s } = r,
                  i = e,
                  a = n,
                  o = r.streamId || s.rtcp.cname,
                  c = this._pc
                    .getRemoteStreams()
                    .find((e) => e.id === o)
                    .getTrackById(a);
                if (!c) throw new Error("remote track not found");
                this._mapRecvLocalIdInfo.set(a, { mid: i, rtpParameters: s }),
                  t.push({ localId: a, track: c });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                f.debug("stopReceiving() [localId:%s]", t);
                const { mid: e, rtpParameters: r } =
                  this._mapRecvLocalIdInfo.get(t) || {};
                this._mapRecvLocalIdInfo.delete(t),
                  this._remoteSdp.planBStopReceiving({
                    mid: e,
                    offerRtpParameters: r,
                  });
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmitTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome55 = v;
        },
        7504: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.DataProducer = void 0);
          const n = r(2994),
            s = r(2010),
            i = r(4893),
            a = new n.Logger("DataProducer");
          class o extends s.EnhancedEventEmitter {
            constructor({
              id: e,
              dataChannel: t,
              sctpStreamParameters: r,
              appData: n,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new s.EnhancedEventEmitter()),
                a.debug("constructor()"),
                (this._id = e),
                (this._dataChannel = t),
                (this._sctpStreamParameters = r),
                (this._appData = n || {}),
                this.handleDataChannel();
            }
            get id() {
              return this._id;
            }
            get closed() {
              return this._closed;
            }
            get sctpStreamParameters() {
              return this._sctpStreamParameters;
            }
            get readyState() {
              return this._dataChannel.readyState;
            }
            get label() {
              return this._dataChannel.label;
            }
            get protocol() {
              return this._dataChannel.protocol;
            }
            get bufferedAmount() {
              return this._dataChannel.bufferedAmount;
            }
            get bufferedAmountLowThreshold() {
              return this._dataChannel.bufferedAmountLowThreshold;
            }
            set bufferedAmountLowThreshold(e) {
              this._dataChannel.bufferedAmountLowThreshold = e;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (a.debug("close()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (a.debug("transportClosed()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            send(e) {
              if ((a.debug("send()"), this._closed))
                throw new i.InvalidStateError("closed");
              this._dataChannel.send(e);
            }
            handleDataChannel() {
              this._dataChannel.addEventListener("open", () => {
                this._closed ||
                  (a.debug('DataChannel "open" event'), this.safeEmit("open"));
              }),
                this._dataChannel.addEventListener("error", (e) => {
                  if (this._closed) return;
                  let { error: t } = e;
                  t || (t = new Error("unknown DataChannel error")),
                    "sctp-failure" === t.errorDetail
                      ? a.error(
                          "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                          t.sctpCauseCode,
                          t.message
                        )
                      : a.error('DataChannel "error" event: %o', t),
                    this.safeEmit("error", t);
                }),
                this._dataChannel.addEventListener("close", () => {
                  this._closed ||
                    (a.warn('DataChannel "close" event'),
                    (this._closed = !0),
                    this.emit("@close"),
                    this.safeEmit("close"),
                    this._observer.safeEmit("close"));
                }),
                this._dataChannel.addEventListener("message", () => {
                  this._closed ||
                    a.warn(
                      'DataChannel "message" event in a DataProducer, message discarded'
                    );
                }),
                this._dataChannel.addEventListener("bufferedamountlow", () => {
                  this._closed || this.safeEmit("bufferedamountlow");
                });
            }
          }
          t.DataProducer = o;
        },
        7628: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = n,
                t = e.lib,
                r = t.WordArray,
                s = t.BlockCipher,
                i = e.algo,
                a = [
                  57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2,
                  59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39,
                  31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37,
                  29, 21, 13, 5, 28, 20, 12, 4,
                ],
                o = [
                  14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26,
                  8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51,
                  45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32,
                ],
                c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
                d = [
                  {
                    0: 8421888,
                    268435456: 32768,
                    536870912: 8421378,
                    805306368: 2,
                    1073741824: 512,
                    1342177280: 8421890,
                    1610612736: 8389122,
                    1879048192: 8388608,
                    2147483648: 514,
                    2415919104: 8389120,
                    2684354560: 33280,
                    2952790016: 8421376,
                    3221225472: 32770,
                    3489660928: 8388610,
                    3758096384: 0,
                    4026531840: 33282,
                    134217728: 0,
                    402653184: 8421890,
                    671088640: 33282,
                    939524096: 32768,
                    1207959552: 8421888,
                    1476395008: 512,
                    1744830464: 8421378,
                    2013265920: 2,
                    2281701376: 8389120,
                    2550136832: 33280,
                    2818572288: 8421376,
                    3087007744: 8389122,
                    3355443200: 8388610,
                    3623878656: 32770,
                    3892314112: 514,
                    4160749568: 8388608,
                    1: 32768,
                    268435457: 2,
                    536870913: 8421888,
                    805306369: 8388608,
                    1073741825: 8421378,
                    1342177281: 33280,
                    1610612737: 512,
                    1879048193: 8389122,
                    2147483649: 8421890,
                    2415919105: 8421376,
                    2684354561: 8388610,
                    2952790017: 33282,
                    3221225473: 514,
                    3489660929: 8389120,
                    3758096385: 32770,
                    4026531841: 0,
                    134217729: 8421890,
                    402653185: 8421376,
                    671088641: 8388608,
                    939524097: 512,
                    1207959553: 32768,
                    1476395009: 8388610,
                    1744830465: 2,
                    2013265921: 33282,
                    2281701377: 32770,
                    2550136833: 8389122,
                    2818572289: 514,
                    3087007745: 8421888,
                    3355443201: 8389120,
                    3623878657: 0,
                    3892314113: 33280,
                    4160749569: 8421378,
                  },
                  {
                    0: 1074282512,
                    16777216: 16384,
                    33554432: 524288,
                    50331648: 1074266128,
                    67108864: 1073741840,
                    83886080: 1074282496,
                    100663296: 1073758208,
                    117440512: 16,
                    134217728: 540672,
                    150994944: 1073758224,
                    167772160: 1073741824,
                    184549376: 540688,
                    201326592: 524304,
                    218103808: 0,
                    234881024: 16400,
                    251658240: 1074266112,
                    8388608: 1073758208,
                    25165824: 540688,
                    41943040: 16,
                    58720256: 1073758224,
                    75497472: 1074282512,
                    92274688: 1073741824,
                    109051904: 524288,
                    125829120: 1074266128,
                    142606336: 524304,
                    159383552: 0,
                    176160768: 16384,
                    192937984: 1074266112,
                    209715200: 1073741840,
                    226492416: 540672,
                    243269632: 1074282496,
                    260046848: 16400,
                    268435456: 0,
                    285212672: 1074266128,
                    301989888: 1073758224,
                    318767104: 1074282496,
                    335544320: 1074266112,
                    352321536: 16,
                    369098752: 540688,
                    385875968: 16384,
                    402653184: 16400,
                    419430400: 524288,
                    436207616: 524304,
                    452984832: 1073741840,
                    469762048: 540672,
                    486539264: 1073758208,
                    503316480: 1073741824,
                    520093696: 1074282512,
                    276824064: 540688,
                    293601280: 524288,
                    310378496: 1074266112,
                    327155712: 16384,
                    343932928: 1073758208,
                    360710144: 1074282512,
                    377487360: 16,
                    394264576: 1073741824,
                    411041792: 1074282496,
                    427819008: 1073741840,
                    444596224: 1073758224,
                    461373440: 524304,
                    478150656: 0,
                    494927872: 16400,
                    511705088: 1074266128,
                    528482304: 540672,
                  },
                  {
                    0: 260,
                    1048576: 0,
                    2097152: 67109120,
                    3145728: 65796,
                    4194304: 65540,
                    5242880: 67108868,
                    6291456: 67174660,
                    7340032: 67174400,
                    8388608: 67108864,
                    9437184: 67174656,
                    10485760: 65792,
                    11534336: 67174404,
                    12582912: 67109124,
                    13631488: 65536,
                    14680064: 4,
                    15728640: 256,
                    524288: 67174656,
                    1572864: 67174404,
                    2621440: 0,
                    3670016: 67109120,
                    4718592: 67108868,
                    5767168: 65536,
                    6815744: 65540,
                    7864320: 260,
                    8912896: 4,
                    9961472: 256,
                    11010048: 67174400,
                    12058624: 65796,
                    13107200: 65792,
                    14155776: 67109124,
                    15204352: 67174660,
                    16252928: 67108864,
                    16777216: 67174656,
                    17825792: 65540,
                    18874368: 65536,
                    19922944: 67109120,
                    20971520: 256,
                    22020096: 67174660,
                    23068672: 67108868,
                    24117248: 0,
                    25165824: 67109124,
                    26214400: 67108864,
                    27262976: 4,
                    28311552: 65792,
                    29360128: 67174400,
                    30408704: 260,
                    31457280: 65796,
                    32505856: 67174404,
                    17301504: 67108864,
                    18350080: 260,
                    19398656: 67174656,
                    20447232: 0,
                    21495808: 65540,
                    22544384: 67109120,
                    23592960: 256,
                    24641536: 67174404,
                    25690112: 65536,
                    26738688: 67174660,
                    27787264: 65796,
                    28835840: 67108868,
                    29884416: 67109124,
                    30932992: 67174400,
                    31981568: 4,
                    33030144: 65792,
                  },
                  {
                    0: 2151682048,
                    65536: 2147487808,
                    131072: 4198464,
                    196608: 2151677952,
                    262144: 0,
                    327680: 4198400,
                    393216: 2147483712,
                    458752: 4194368,
                    524288: 2147483648,
                    589824: 4194304,
                    655360: 64,
                    720896: 2147487744,
                    786432: 2151678016,
                    851968: 4160,
                    917504: 4096,
                    983040: 2151682112,
                    32768: 2147487808,
                    98304: 64,
                    163840: 2151678016,
                    229376: 2147487744,
                    294912: 4198400,
                    360448: 2151682112,
                    425984: 0,
                    491520: 2151677952,
                    557056: 4096,
                    622592: 2151682048,
                    688128: 4194304,
                    753664: 4160,
                    819200: 2147483648,
                    884736: 4194368,
                    950272: 4198464,
                    1015808: 2147483712,
                    1048576: 4194368,
                    1114112: 4198400,
                    1179648: 2147483712,
                    1245184: 0,
                    1310720: 4160,
                    1376256: 2151678016,
                    1441792: 2151682048,
                    1507328: 2147487808,
                    1572864: 2151682112,
                    1638400: 2147483648,
                    1703936: 2151677952,
                    1769472: 4198464,
                    1835008: 2147487744,
                    1900544: 4194304,
                    1966080: 64,
                    2031616: 4096,
                    1081344: 2151677952,
                    1146880: 2151682112,
                    1212416: 0,
                    1277952: 4198400,
                    1343488: 4194368,
                    1409024: 2147483648,
                    1474560: 2147487808,
                    1540096: 64,
                    1605632: 2147483712,
                    1671168: 4096,
                    1736704: 2147487744,
                    1802240: 2151678016,
                    1867776: 4160,
                    1933312: 2151682048,
                    1998848: 4194304,
                    2064384: 4198464,
                  },
                  {
                    0: 128,
                    4096: 17039360,
                    8192: 262144,
                    12288: 536870912,
                    16384: 537133184,
                    20480: 16777344,
                    24576: 553648256,
                    28672: 262272,
                    32768: 16777216,
                    36864: 537133056,
                    40960: 536871040,
                    45056: 553910400,
                    49152: 553910272,
                    53248: 0,
                    57344: 17039488,
                    61440: 553648128,
                    2048: 17039488,
                    6144: 553648256,
                    10240: 128,
                    14336: 17039360,
                    18432: 262144,
                    22528: 537133184,
                    26624: 553910272,
                    30720: 536870912,
                    34816: 537133056,
                    38912: 0,
                    43008: 553910400,
                    47104: 16777344,
                    51200: 536871040,
                    55296: 553648128,
                    59392: 16777216,
                    63488: 262272,
                    65536: 262144,
                    69632: 128,
                    73728: 536870912,
                    77824: 553648256,
                    81920: 16777344,
                    86016: 553910272,
                    90112: 537133184,
                    94208: 16777216,
                    98304: 553910400,
                    102400: 553648128,
                    106496: 17039360,
                    110592: 537133056,
                    114688: 262272,
                    118784: 536871040,
                    122880: 0,
                    126976: 17039488,
                    67584: 553648256,
                    71680: 16777216,
                    75776: 17039360,
                    79872: 537133184,
                    83968: 536870912,
                    88064: 17039488,
                    92160: 128,
                    96256: 553910272,
                    100352: 262272,
                    104448: 553910400,
                    108544: 0,
                    112640: 553648128,
                    116736: 16777344,
                    120832: 262144,
                    124928: 537133056,
                    129024: 536871040,
                  },
                  {
                    0: 268435464,
                    256: 8192,
                    512: 270532608,
                    768: 270540808,
                    1024: 268443648,
                    1280: 2097152,
                    1536: 2097160,
                    1792: 268435456,
                    2048: 0,
                    2304: 268443656,
                    2560: 2105344,
                    2816: 8,
                    3072: 270532616,
                    3328: 2105352,
                    3584: 8200,
                    3840: 270540800,
                    128: 270532608,
                    384: 270540808,
                    640: 8,
                    896: 2097152,
                    1152: 2105352,
                    1408: 268435464,
                    1664: 268443648,
                    1920: 8200,
                    2176: 2097160,
                    2432: 8192,
                    2688: 268443656,
                    2944: 270532616,
                    3200: 0,
                    3456: 270540800,
                    3712: 2105344,
                    3968: 268435456,
                    4096: 268443648,
                    4352: 270532616,
                    4608: 270540808,
                    4864: 8200,
                    5120: 2097152,
                    5376: 268435456,
                    5632: 268435464,
                    5888: 2105344,
                    6144: 2105352,
                    6400: 0,
                    6656: 8,
                    6912: 270532608,
                    7168: 8192,
                    7424: 268443656,
                    7680: 270540800,
                    7936: 2097160,
                    4224: 8,
                    4480: 2105344,
                    4736: 2097152,
                    4992: 268435464,
                    5248: 268443648,
                    5504: 8200,
                    5760: 270540808,
                    6016: 270532608,
                    6272: 270540800,
                    6528: 270532616,
                    6784: 8192,
                    7040: 2105352,
                    7296: 2097160,
                    7552: 0,
                    7808: 268435456,
                    8064: 268443656,
                  },
                  {
                    0: 1048576,
                    16: 33555457,
                    32: 1024,
                    48: 1049601,
                    64: 34604033,
                    80: 0,
                    96: 1,
                    112: 34603009,
                    128: 33555456,
                    144: 1048577,
                    160: 33554433,
                    176: 34604032,
                    192: 34603008,
                    208: 1025,
                    224: 1049600,
                    240: 33554432,
                    8: 34603009,
                    24: 0,
                    40: 33555457,
                    56: 34604032,
                    72: 1048576,
                    88: 33554433,
                    104: 33554432,
                    120: 1025,
                    136: 1049601,
                    152: 33555456,
                    168: 34603008,
                    184: 1048577,
                    200: 1024,
                    216: 34604033,
                    232: 1,
                    248: 1049600,
                    256: 33554432,
                    272: 1048576,
                    288: 33555457,
                    304: 34603009,
                    320: 1048577,
                    336: 33555456,
                    352: 34604032,
                    368: 1049601,
                    384: 1025,
                    400: 34604033,
                    416: 1049600,
                    432: 1,
                    448: 0,
                    464: 34603008,
                    480: 33554433,
                    496: 1024,
                    264: 1049600,
                    280: 33555457,
                    296: 34603009,
                    312: 1,
                    328: 33554432,
                    344: 1048576,
                    360: 1025,
                    376: 34604032,
                    392: 33554433,
                    408: 34603008,
                    424: 0,
                    440: 34604033,
                    456: 1049601,
                    472: 1024,
                    488: 33555456,
                    504: 1048577,
                  },
                  {
                    0: 134219808,
                    1: 131072,
                    2: 134217728,
                    3: 32,
                    4: 131104,
                    5: 134350880,
                    6: 134350848,
                    7: 2048,
                    8: 134348800,
                    9: 134219776,
                    10: 133120,
                    11: 134348832,
                    12: 2080,
                    13: 0,
                    14: 134217760,
                    15: 133152,
                    2147483648: 2048,
                    2147483649: 134350880,
                    2147483650: 134219808,
                    2147483651: 134217728,
                    2147483652: 134348800,
                    2147483653: 133120,
                    2147483654: 133152,
                    2147483655: 32,
                    2147483656: 134217760,
                    2147483657: 2080,
                    2147483658: 131104,
                    2147483659: 134350848,
                    2147483660: 0,
                    2147483661: 134348832,
                    2147483662: 134219776,
                    2147483663: 131072,
                    16: 133152,
                    17: 134350848,
                    18: 32,
                    19: 2048,
                    20: 134219776,
                    21: 134217760,
                    22: 134348832,
                    23: 131072,
                    24: 0,
                    25: 131104,
                    26: 134348800,
                    27: 134219808,
                    28: 134350880,
                    29: 133120,
                    30: 2080,
                    31: 134217728,
                    2147483664: 131072,
                    2147483665: 2048,
                    2147483666: 134348832,
                    2147483667: 133152,
                    2147483668: 32,
                    2147483669: 134348800,
                    2147483670: 134217728,
                    2147483671: 134219808,
                    2147483672: 134350880,
                    2147483673: 134217760,
                    2147483674: 134219776,
                    2147483675: 0,
                    2147483676: 133120,
                    2147483677: 2080,
                    2147483678: 131104,
                    2147483679: 134350848,
                  },
                ],
                l = [
                  4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504,
                  2147483679,
                ],
                u = (i.DES = s.extend({
                  _doReset: function () {
                    for (var e = this._key.words, t = [], r = 0; r < 56; r++) {
                      var n = a[r] - 1;
                      t[r] = (e[n >>> 5] >>> (31 - (n % 32))) & 1;
                    }
                    for (var s = (this._subKeys = []), i = 0; i < 16; i++) {
                      var d = (s[i] = []),
                        l = c[i];
                      for (r = 0; r < 24; r++)
                        (d[(r / 6) | 0] |=
                          t[(o[r] - 1 + l) % 28] << (31 - (r % 6))),
                          (d[4 + ((r / 6) | 0)] |=
                            t[28 + ((o[r + 24] - 1 + l) % 28)] <<
                            (31 - (r % 6)));
                      for (
                        d[0] = (d[0] << 1) | (d[0] >>> 31), r = 1;
                        r < 7;
                        r++
                      )
                        d[r] = d[r] >>> (4 * (r - 1) + 3);
                      d[7] = (d[7] << 5) | (d[7] >>> 27);
                    }
                    var u = (this._invSubKeys = []);
                    for (r = 0; r < 16; r++) u[r] = s[15 - r];
                  },
                  encryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._subKeys);
                  },
                  decryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._invSubKeys);
                  },
                  _doCryptBlock: function (e, t, r) {
                    (this._lBlock = e[t]),
                      (this._rBlock = e[t + 1]),
                      p.call(this, 4, 252645135),
                      p.call(this, 16, 65535),
                      h.call(this, 2, 858993459),
                      h.call(this, 8, 16711935),
                      p.call(this, 1, 1431655765);
                    for (var n = 0; n < 16; n++) {
                      for (
                        var s = r[n],
                          i = this._lBlock,
                          a = this._rBlock,
                          o = 0,
                          c = 0;
                        c < 8;
                        c++
                      )
                        o |= d[c][((a ^ s[c]) & l[c]) >>> 0];
                      (this._lBlock = a), (this._rBlock = i ^ o);
                    }
                    var u = this._lBlock;
                    (this._lBlock = this._rBlock),
                      (this._rBlock = u),
                      p.call(this, 1, 1431655765),
                      h.call(this, 8, 16711935),
                      h.call(this, 2, 858993459),
                      p.call(this, 16, 65535),
                      p.call(this, 4, 252645135),
                      (e[t] = this._lBlock),
                      (e[t + 1] = this._rBlock);
                  },
                  keySize: 2,
                  ivSize: 2,
                  blockSize: 2,
                }));
              function p(e, t) {
                var r = ((this._lBlock >>> e) ^ this._rBlock) & t;
                (this._rBlock ^= r), (this._lBlock ^= r << e);
              }
              function h(e, t) {
                var r = ((this._rBlock >>> e) ^ this._lBlock) & t;
                (this._lBlock ^= r), (this._rBlock ^= r << e);
              }
              e.DES = s._createHelper(u);
              var m = (i.TripleDES = s.extend({
                _doReset: function () {
                  var e = this._key.words;
                  if (2 !== e.length && 4 !== e.length && e.length < 6)
                    throw new Error(
                      "Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192."
                    );
                  var t = e.slice(0, 2),
                    n = e.length < 4 ? e.slice(0, 2) : e.slice(2, 4),
                    s = e.length < 6 ? e.slice(0, 2) : e.slice(4, 6);
                  (this._des1 = u.createEncryptor(r.create(t))),
                    (this._des2 = u.createEncryptor(r.create(n))),
                    (this._des3 = u.createEncryptor(r.create(s)));
                },
                encryptBlock: function (e, t) {
                  this._des1.encryptBlock(e, t),
                    this._des2.decryptBlock(e, t),
                    this._des3.encryptBlock(e, t);
                },
                decryptBlock: function (e, t) {
                  this._des3.decryptBlock(e, t),
                    this._des2.encryptBlock(e, t),
                    this._des1.decryptBlock(e, t);
                },
                keySize: 6,
                ivSize: 2,
                blockSize: 2,
              }));
              e.TripleDES = s._createHelper(m);
            })(),
            n.TripleDES);
        },
        7654: (e, t, r) => {
          var n = "__lodash_hash_undefined__",
            s = "[object Function]",
            i = "[object GeneratorFunction]",
            a = /^\[object .+?Constructor\]$/,
            o = "object" == typeof r.g && r.g && r.g.Object === Object && r.g,
            c =
              "object" == typeof self && self && self.Object === Object && self,
            d = o || c || Function("return this")();
          var l,
            u = Array.prototype,
            p = Function.prototype,
            h = Object.prototype,
            m = d["__core-js_shared__"],
            f = (l = /[^.]+$/.exec((m && m.keys && m.keys.IE_PROTO) || ""))
              ? "Symbol(src)_1." + l
              : "",
            g = p.toString,
            v = h.hasOwnProperty,
            _ = h.toString,
            y = RegExp(
              "^" +
                g
                  .call(v)
                  .replace(/[\\^$.*+?()[\]{}|]/g, "\\$&")
                  .replace(
                    /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                    "$1.*?"
                  ) +
                "$"
            ),
            b = u.splice,
            w = O(d, "Map"),
            S = O(Object, "create");
          function R(e) {
            var t = -1,
              r = e ? e.length : 0;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function k(e) {
            var t = -1,
              r = e ? e.length : 0;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function E(e) {
            var t = -1,
              r = e ? e.length : 0;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function C(e, t) {
            for (var r, n, s = e.length; s--; )
              if ((r = e[s][0]) === (n = t) || (r != r && n != n)) return s;
            return -1;
          }
          function T(e) {
            if (!D(e) || ((t = e), f && f in t)) return !1;
            var t,
              r =
                (function (e) {
                  var t = D(e) ? _.call(e) : "";
                  return t == s || t == i;
                })(e) ||
                (function (e) {
                  var t = !1;
                  if (null != e && "function" != typeof e.toString)
                    try {
                      t = !!(e + "");
                    } catch (e) {}
                  return t;
                })(e)
                  ? y
                  : a;
            return r.test(
              (function (e) {
                if (null != e) {
                  try {
                    return g.call(e);
                  } catch (e) {}
                  try {
                    return e + "";
                  } catch (e) {}
                }
                return "";
              })(e)
            );
          }
          function P(e, t) {
            var r,
              n,
              s = e.__data__;
            return (
              "string" == (n = typeof (r = t)) ||
              "number" == n ||
              "symbol" == n ||
              "boolean" == n
                ? "__proto__" !== r
                : null === r
            )
              ? s["string" == typeof t ? "string" : "hash"]
              : s.map;
          }
          function O(e, t) {
            var r = (function (e, t) {
              return null == e ? void 0 : e[t];
            })(e, t);
            return T(r) ? r : void 0;
          }
          function x(e, t) {
            if ("function" != typeof e || (t && "function" != typeof t))
              throw new TypeError("Expected a function");
            var r = function () {
              var n = arguments,
                s = t ? t.apply(this, n) : n[0],
                i = r.cache;
              if (i.has(s)) return i.get(s);
              var a = e.apply(this, n);
              return (r.cache = i.set(s, a)), a;
            };
            return (r.cache = new (x.Cache || E)()), r;
          }
          function D(e) {
            var t = typeof e;
            return !!e && ("object" == t || "function" == t);
          }
          (R.prototype.clear = function () {
            this.__data__ = S ? S(null) : {};
          }),
            (R.prototype.delete = function (e) {
              return this.has(e) && delete this.__data__[e];
            }),
            (R.prototype.get = function (e) {
              var t = this.__data__;
              if (S) {
                var r = t[e];
                return r === n ? void 0 : r;
              }
              return v.call(t, e) ? t[e] : void 0;
            }),
            (R.prototype.has = function (e) {
              var t = this.__data__;
              return S ? void 0 !== t[e] : v.call(t, e);
            }),
            (R.prototype.set = function (e, t) {
              return (this.__data__[e] = S && void 0 === t ? n : t), this;
            }),
            (k.prototype.clear = function () {
              this.__data__ = [];
            }),
            (k.prototype.delete = function (e) {
              var t = this.__data__,
                r = C(t, e);
              return (
                !(r < 0) && (r == t.length - 1 ? t.pop() : b.call(t, r, 1), !0)
              );
            }),
            (k.prototype.get = function (e) {
              var t = this.__data__,
                r = C(t, e);
              return r < 0 ? void 0 : t[r][1];
            }),
            (k.prototype.has = function (e) {
              return C(this.__data__, e) > -1;
            }),
            (k.prototype.set = function (e, t) {
              var r = this.__data__,
                n = C(r, e);
              return n < 0 ? r.push([e, t]) : (r[n][1] = t), this;
            }),
            (E.prototype.clear = function () {
              this.__data__ = {
                hash: new R(),
                map: new (w || k)(),
                string: new R(),
              };
            }),
            (E.prototype.delete = function (e) {
              return P(this, e).delete(e);
            }),
            (E.prototype.get = function (e) {
              return P(this, e).get(e);
            }),
            (E.prototype.has = function (e) {
              return P(this, e).has(e);
            }),
            (E.prototype.set = function (e, t) {
              return P(this, e).set(e, t), this;
            }),
            (x.Cache = E),
            (e.exports = x);
        },
        7800: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => s });
          var n = r(3145);
          function s(e, t) {
            if (e) {
              if ("string" == typeof e) return (0, n.A)(e, t);
              var r = {}.toString.call(e).slice(8, -1);
              return (
                "Object" === r && e.constructor && (r = e.constructor.name),
                "Map" === r || "Set" === r
                  ? Array.from(e)
                  : "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  ? (0, n.A)(e, t)
                  : void 0
              );
            }
          }
        },
        7833: (e, t, r) => {
          (t.formatArgs = function (t) {
            if (
              ((t[0] =
                (this.useColors ? "%c" : "") +
                this.namespace +
                (this.useColors ? " %c" : " ") +
                t[0] +
                (this.useColors ? "%c " : " ") +
                "+" +
                e.exports.humanize(this.diff)),
              !this.useColors)
            )
              return;
            const r = "color: " + this.color;
            t.splice(1, 0, r, "color: inherit");
            let n = 0,
              s = 0;
            t[0].replace(/%[a-zA-Z%]/g, (e) => {
              "%%" !== e && (n++, "%c" === e && (s = n));
            }),
              t.splice(s, 0, r);
          }),
            (t.save = function (e) {
              try {
                e
                  ? t.storage.setItem("debug", e)
                  : t.storage.removeItem("debug");
              } catch (e) {}
            }),
            (t.load = function () {
              let e;
              try {
                e = t.storage.getItem("debug");
              } catch (e) {}
              !e &&
                "undefined" != typeof process &&
                "env" in process &&
                (e = process.env.DEBUG);
              return e;
            }),
            (t.useColors = function () {
              if (
                "undefined" != typeof window &&
                window.process &&
                ("renderer" === window.process.type || window.process.__nwjs)
              )
                return !0;
              if (
                "undefined" != typeof navigator &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
              )
                return !1;
              let e;
              return (
                ("undefined" != typeof document &&
                  document.documentElement &&
                  document.documentElement.style &&
                  document.documentElement.style.WebkitAppearance) ||
                ("undefined" != typeof window &&
                  window.console &&
                  (window.console.firebug ||
                    (window.console.exception && window.console.table))) ||
                ("undefined" != typeof navigator &&
                  navigator.userAgent &&
                  (e = navigator.userAgent
                    .toLowerCase()
                    .match(/firefox\/(\d+)/)) &&
                  parseInt(e[1], 10) >= 31) ||
                ("undefined" != typeof navigator &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
              );
            }),
            (t.storage = (function () {
              try {
                return localStorage;
              } catch (e) {}
            })()),
            (t.destroy = (() => {
              let e = !1;
              return () => {
                e ||
                  ((e = !0),
                  console.warn(
                    "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                  ));
              };
            })()),
            (t.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33",
            ]),
            (t.log = console.debug || console.log || (() => {})),
            (e.exports = r(736)(t));
          const { formatters: n } = e.exports;
          n.j = function (e) {
            try {
              return JSON.stringify(e);
            } catch (e) {
              return "[UnexpectedJSONParseError]: " + e.message;
            }
          };
        },
        8046: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.canReceive =
              t.canSend =
              t.generateProbatorRtpParameters =
              t.reduceCodecs =
              t.getSendingRemoteRtpParameters =
              t.getSendingRtpParameters =
              t.getRecvRtpCapabilities =
              t.getExtendedRtpCapabilities =
              t.validateSctpCapabilities =
              t.validateSctpStreamParameters =
              t.validateRtpParameters =
              t.validateRtpCapabilities =
                void 0);
          const a = i(r(3200)),
            o = i(r(1765));
          function c(e) {
            if ("object" != typeof e)
              throw new TypeError("params is not an object");
            if (e.mid && "string" != typeof e.mid)
              throw new TypeError("params.mid is not a string");
            if (!Array.isArray(e.codecs))
              throw new TypeError("missing params.codecs");
            for (const t of e.codecs) p(t);
            if (e.headerExtensions && !Array.isArray(e.headerExtensions))
              throw new TypeError("params.headerExtensions is not an array");
            e.headerExtensions || (e.headerExtensions = []);
            for (const t of e.headerExtensions) h(t);
            if (e.encodings && !Array.isArray(e.encodings))
              throw new TypeError("params.encodings is not an array");
            e.encodings || (e.encodings = []);
            for (const t of e.encodings) m(t);
            if (e.rtcp && "object" != typeof e.rtcp)
              throw new TypeError("params.rtcp is not an object");
            e.rtcp || (e.rtcp = {}),
              (function (e) {
                if ("object" != typeof e)
                  throw new TypeError("rtcp is not an object");
                if (e.cname && "string" != typeof e.cname)
                  throw new TypeError("invalid rtcp.cname");
                (e.reducedSize && "boolean" == typeof e.reducedSize) ||
                  (e.reducedSize = !0);
              })(e.rtcp);
          }
          function d(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i");
            if ("object" != typeof e)
              throw new TypeError("codec is not an object");
            if (!e.mimeType || "string" != typeof e.mimeType)
              throw new TypeError("missing codec.mimeType");
            const r = t.exec(e.mimeType);
            if (!r) throw new TypeError("invalid codec.mimeType");
            if (
              ((e.kind = r[1].toLowerCase()),
              e.preferredPayloadType &&
                "number" != typeof e.preferredPayloadType)
            )
              throw new TypeError("invalid codec.preferredPayloadType");
            if ("number" != typeof e.clockRate)
              throw new TypeError("missing codec.clockRate");
            "audio" === e.kind
              ? "number" != typeof e.channels && (e.channels = 1)
              : delete e.channels,
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError(
                  `invalid codec parameter [key:${t}s, value:${r}]`
                );
              if ("apt" === t && "number" != typeof r)
                throw new TypeError("invalid codec apt parameter");
            }
            (e.rtcpFeedback && Array.isArray(e.rtcpFeedback)) ||
              (e.rtcpFeedback = []);
            for (const t of e.rtcpFeedback) l(t);
          }
          function l(e) {
            if ("object" != typeof e)
              throw new TypeError("fb is not an object");
            if (!e.type || "string" != typeof e.type)
              throw new TypeError("missing fb.type");
            (e.parameter && "string" == typeof e.parameter) ||
              (e.parameter = "");
          }
          function u(e) {
            if ("object" != typeof e)
              throw new TypeError("ext is not an object");
            if ("audio" !== e.kind && "video" !== e.kind)
              throw new TypeError("invalid ext.kind");
            if (!e.uri || "string" != typeof e.uri)
              throw new TypeError("missing ext.uri");
            if ("number" != typeof e.preferredId)
              throw new TypeError("missing ext.preferredId");
            if (e.preferredEncrypt && "boolean" != typeof e.preferredEncrypt)
              throw new TypeError("invalid ext.preferredEncrypt");
            if (
              (e.preferredEncrypt || (e.preferredEncrypt = !1),
              e.direction && "string" != typeof e.direction)
            )
              throw new TypeError("invalid ext.direction");
            e.direction || (e.direction = "sendrecv");
          }
          function p(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i");
            if ("object" != typeof e)
              throw new TypeError("codec is not an object");
            if (!e.mimeType || "string" != typeof e.mimeType)
              throw new TypeError("missing codec.mimeType");
            const r = t.exec(e.mimeType);
            if (!r) throw new TypeError("invalid codec.mimeType");
            if ("number" != typeof e.payloadType)
              throw new TypeError("missing codec.payloadType");
            if ("number" != typeof e.clockRate)
              throw new TypeError("missing codec.clockRate");
            "audio" === r[1].toLowerCase()
              ? "number" != typeof e.channels && (e.channels = 1)
              : delete e.channels,
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError(
                  `invalid codec parameter [key:${t}s, value:${r}]`
                );
              if ("apt" === t && "number" != typeof r)
                throw new TypeError("invalid codec apt parameter");
            }
            (e.rtcpFeedback && Array.isArray(e.rtcpFeedback)) ||
              (e.rtcpFeedback = []);
            for (const t of e.rtcpFeedback) l(t);
          }
          function h(e) {
            if ("object" != typeof e)
              throw new TypeError("ext is not an object");
            if (!e.uri || "string" != typeof e.uri)
              throw new TypeError("missing ext.uri");
            if ("number" != typeof e.id) throw new TypeError("missing ext.id");
            if (e.encrypt && "boolean" != typeof e.encrypt)
              throw new TypeError("invalid ext.encrypt");
            e.encrypt || (e.encrypt = !1),
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError("invalid header extension parameter");
            }
          }
          function m(e) {
            if ("object" != typeof e)
              throw new TypeError("encoding is not an object");
            if (e.ssrc && "number" != typeof e.ssrc)
              throw new TypeError("invalid encoding.ssrc");
            if (e.rid && "string" != typeof e.rid)
              throw new TypeError("invalid encoding.rid");
            if (e.rtx && "object" != typeof e.rtx)
              throw new TypeError("invalid encoding.rtx");
            if (e.rtx && "number" != typeof e.rtx.ssrc)
              throw new TypeError("missing encoding.rtx.ssrc");
            if (
              ((e.dtx && "boolean" == typeof e.dtx) || (e.dtx = !1),
              e.scalabilityMode && "string" != typeof e.scalabilityMode)
            )
              throw new TypeError("invalid encoding.scalabilityMode");
          }
          function f(e) {
            return !!e && /.+\/rtx$/i.test(e.mimeType);
          }
          function g(e, t, { strict: r = !1, modify: n = !1 } = {}) {
            const s = e.mimeType.toLowerCase();
            if (s !== t.mimeType.toLowerCase()) return !1;
            if (e.clockRate !== t.clockRate) return !1;
            if (e.channels !== t.channels) return !1;
            switch (s) {
              case "video/h264":
                if (r) {
                  if (
                    (e.parameters["packetization-mode"] || 0) !==
                    (t.parameters["packetization-mode"] || 0)
                  )
                    return !1;
                  if (!a.isSameProfile(e.parameters, t.parameters)) return !1;
                  let r;
                  try {
                    r = a.generateProfileLevelIdStringForAnswer(
                      e.parameters,
                      t.parameters
                    );
                  } catch (e) {
                    return !1;
                  }
                  n &&
                    (r
                      ? ((e.parameters["profile-level-id"] = r),
                        (t.parameters["profile-level-id"] = r))
                      : (delete e.parameters["profile-level-id"],
                        delete t.parameters["profile-level-id"]));
                }
                break;
              case "video/vp9":
                if (r) {
                  if (
                    (e.parameters["profile-id"] || 0) !==
                    (t.parameters["profile-id"] || 0)
                  )
                    return !1;
                }
            }
            return !0;
          }
          function v(e, t) {
            return (!e.kind || !t.kind || e.kind === t.kind) && e.uri === t.uri;
          }
          function _(e, t) {
            const r = [];
            for (const n of e.rtcpFeedback || []) {
              const e = (t.rtcpFeedback || []).find(
                (e) =>
                  e.type === n.type &&
                  (e.parameter === n.parameter ||
                    (!e.parameter && !n.parameter))
              );
              e && r.push(e);
            }
            return r;
          }
          (t.validateRtpCapabilities = function (e) {
            if ("object" != typeof e)
              throw new TypeError("caps is not an object");
            if (e.codecs && !Array.isArray(e.codecs))
              throw new TypeError("caps.codecs is not an array");
            e.codecs || (e.codecs = []);
            for (const t of e.codecs) d(t);
            if (e.headerExtensions && !Array.isArray(e.headerExtensions))
              throw new TypeError("caps.headerExtensions is not an array");
            e.headerExtensions || (e.headerExtensions = []);
            for (const t of e.headerExtensions) u(t);
          }),
            (t.validateRtpParameters = c),
            (t.validateSctpStreamParameters = function (e) {
              if ("object" != typeof e)
                throw new TypeError("params is not an object");
              if ("number" != typeof e.streamId)
                throw new TypeError("missing params.streamId");
              let t = !1;
              if (
                ("boolean" == typeof e.ordered ? (t = !0) : (e.ordered = !0),
                e.maxPacketLifeTime && "number" != typeof e.maxPacketLifeTime)
              )
                throw new TypeError("invalid params.maxPacketLifeTime");
              if (e.maxRetransmits && "number" != typeof e.maxRetransmits)
                throw new TypeError("invalid params.maxRetransmits");
              if (e.maxPacketLifeTime && e.maxRetransmits)
                throw new TypeError(
                  "cannot provide both maxPacketLifeTime and maxRetransmits"
                );
              if (t && e.ordered && (e.maxPacketLifeTime || e.maxRetransmits))
                throw new TypeError(
                  "cannot be ordered with maxPacketLifeTime or maxRetransmits"
                );
              if (
                (t ||
                  (!e.maxPacketLifeTime && !e.maxRetransmits) ||
                  (e.ordered = !1),
                e.label && "string" != typeof e.label)
              )
                throw new TypeError("invalid params.label");
              if (e.protocol && "string" != typeof e.protocol)
                throw new TypeError("invalid params.protocol");
            }),
            (t.validateSctpCapabilities = function (e) {
              if ("object" != typeof e)
                throw new TypeError("caps is not an object");
              if (!e.numStreams || "object" != typeof e.numStreams)
                throw new TypeError("missing caps.numStreams");
              !(function (e) {
                if ("object" != typeof e)
                  throw new TypeError("numStreams is not an object");
                if ("number" != typeof e.OS)
                  throw new TypeError("missing numStreams.OS");
                if ("number" != typeof e.MIS)
                  throw new TypeError("missing numStreams.MIS");
              })(e.numStreams);
            }),
            (t.getExtendedRtpCapabilities = function (e, t) {
              const r = { codecs: [], headerExtensions: [] };
              for (const n of t.codecs || []) {
                if (f(n)) continue;
                const t = (e.codecs || []).find((e) =>
                  g(e, n, { strict: !0, modify: !0 })
                );
                if (!t) continue;
                const s = {
                  mimeType: t.mimeType,
                  kind: t.kind,
                  clockRate: t.clockRate,
                  channels: t.channels,
                  localPayloadType: t.preferredPayloadType,
                  localRtxPayloadType: void 0,
                  remotePayloadType: n.preferredPayloadType,
                  remoteRtxPayloadType: void 0,
                  localParameters: t.parameters,
                  remoteParameters: n.parameters,
                  rtcpFeedback: _(t, n),
                };
                r.codecs.push(s);
              }
              for (const n of r.codecs) {
                const r = e.codecs.find(
                    (e) => f(e) && e.parameters.apt === n.localPayloadType
                  ),
                  s = t.codecs.find(
                    (e) => f(e) && e.parameters.apt === n.remotePayloadType
                  );
                r &&
                  s &&
                  ((n.localRtxPayloadType = r.preferredPayloadType),
                  (n.remoteRtxPayloadType = s.preferredPayloadType));
              }
              for (const n of t.headerExtensions) {
                const t = e.headerExtensions.find((e) => v(e, n));
                if (!t) continue;
                const s = {
                  kind: n.kind,
                  uri: n.uri,
                  sendId: t.preferredId,
                  recvId: n.preferredId,
                  encrypt: t.preferredEncrypt,
                  direction: "sendrecv",
                };
                switch (n.direction) {
                  case "sendrecv":
                    s.direction = "sendrecv";
                    break;
                  case "recvonly":
                    s.direction = "sendonly";
                    break;
                  case "sendonly":
                    s.direction = "recvonly";
                    break;
                  case "inactive":
                    s.direction = "inactive";
                }
                r.headerExtensions.push(s);
              }
              return r;
            }),
            (t.getRecvRtpCapabilities = function (e) {
              const t = { codecs: [], headerExtensions: [] };
              for (const r of e.codecs) {
                const e = {
                  mimeType: r.mimeType,
                  kind: r.kind,
                  preferredPayloadType: r.remotePayloadType,
                  clockRate: r.clockRate,
                  channels: r.channels,
                  parameters: r.localParameters,
                  rtcpFeedback: r.rtcpFeedback,
                };
                if ((t.codecs.push(e), !r.remoteRtxPayloadType)) continue;
                const n = {
                  mimeType: `${r.kind}/rtx`,
                  kind: r.kind,
                  preferredPayloadType: r.remoteRtxPayloadType,
                  clockRate: r.clockRate,
                  parameters: { apt: r.remotePayloadType },
                  rtcpFeedback: [],
                };
                t.codecs.push(n);
              }
              for (const r of e.headerExtensions) {
                if ("sendrecv" !== r.direction && "recvonly" !== r.direction)
                  continue;
                const e = {
                  kind: r.kind,
                  uri: r.uri,
                  preferredId: r.recvId,
                  preferredEncrypt: r.encrypt,
                  direction: r.direction,
                };
                t.headerExtensions.push(e);
              }
              return t;
            }),
            (t.getSendingRtpParameters = function (e, t) {
              const r = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {},
              };
              for (const n of t.codecs) {
                if (n.kind !== e) continue;
                const t = {
                  mimeType: n.mimeType,
                  payloadType: n.localPayloadType,
                  clockRate: n.clockRate,
                  channels: n.channels,
                  parameters: n.localParameters,
                  rtcpFeedback: n.rtcpFeedback,
                };
                if ((r.codecs.push(t), n.localRtxPayloadType)) {
                  const e = {
                    mimeType: `${n.kind}/rtx`,
                    payloadType: n.localRtxPayloadType,
                    clockRate: n.clockRate,
                    parameters: { apt: n.localPayloadType },
                    rtcpFeedback: [],
                  };
                  r.codecs.push(e);
                }
              }
              for (const n of t.headerExtensions) {
                if (
                  (n.kind && n.kind !== e) ||
                  ("sendrecv" !== n.direction && "sendonly" !== n.direction)
                )
                  continue;
                const t = {
                  uri: n.uri,
                  id: n.sendId,
                  encrypt: n.encrypt,
                  parameters: {},
                };
                r.headerExtensions.push(t);
              }
              return r;
            }),
            (t.getSendingRemoteRtpParameters = function (e, t) {
              const r = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {},
              };
              for (const n of t.codecs) {
                if (n.kind !== e) continue;
                const t = {
                  mimeType: n.mimeType,
                  payloadType: n.localPayloadType,
                  clockRate: n.clockRate,
                  channels: n.channels,
                  parameters: n.remoteParameters,
                  rtcpFeedback: n.rtcpFeedback,
                };
                if ((r.codecs.push(t), n.localRtxPayloadType)) {
                  const e = {
                    mimeType: `${n.kind}/rtx`,
                    payloadType: n.localRtxPayloadType,
                    clockRate: n.clockRate,
                    parameters: { apt: n.localPayloadType },
                    rtcpFeedback: [],
                  };
                  r.codecs.push(e);
                }
              }
              for (const n of t.headerExtensions) {
                if (
                  (n.kind && n.kind !== e) ||
                  ("sendrecv" !== n.direction && "sendonly" !== n.direction)
                )
                  continue;
                const t = {
                  uri: n.uri,
                  id: n.sendId,
                  encrypt: n.encrypt,
                  parameters: {},
                };
                r.headerExtensions.push(t);
              }
              if (
                r.headerExtensions.some(
                  (e) =>
                    "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" ===
                    e.uri
                )
              )
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "goog-remb" !== e.type
                  );
              else if (
                r.headerExtensions.some(
                  (e) =>
                    "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" ===
                    e.uri
                )
              )
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "transport-cc" !== e.type
                  );
              else
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "transport-cc" !== e.type && "goog-remb" !== e.type
                  );
              return r;
            }),
            (t.reduceCodecs = function (e, t) {
              const r = [];
              if (t) {
                for (let n = 0; n < e.length; ++n)
                  if (g(e[n], t, { strict: !0 })) {
                    r.push(e[n]), f(e[n + 1]) && r.push(e[n + 1]);
                    break;
                  }
                if (0 === r.length)
                  throw new TypeError("no matching codec found");
              } else r.push(e[0]), f(e[1]) && r.push(e[1]);
              return r;
            }),
            (t.generateProbatorRtpParameters = function (e) {
              c((e = o.clone(e)));
              const t = {
                mid: "probator",
                codecs: [],
                headerExtensions: [],
                encodings: [{ ssrc: 1234 }],
                rtcp: { cname: "probator" },
              };
              return (
                t.codecs.push(e.codecs[0]),
                (t.codecs[0].payloadType = 127),
                (t.headerExtensions = e.headerExtensions),
                t
              );
            }),
            (t.canSend = function (e, t) {
              return t.codecs.some((t) => t.kind === e);
            }),
            (t.canReceive = function (e, t) {
              if ((c(e), 0 === e.codecs.length)) return !1;
              const r = e.codecs[0];
              return t.codecs.some(
                (e) => e.remotePayloadType === r.payloadType
              );
            });
        },
        8056: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            (function () {
              var e = n,
                t = e.lib,
                r = t.WordArray,
                s = t.Hasher,
                i = e.algo,
                a = r.create([
                  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4,
                  13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4,
                  9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8,
                  12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10,
                  14, 1, 3, 8, 11, 6, 15, 13,
                ]),
                o = r.create([
                  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11,
                  3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7,
                  14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15,
                  0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6,
                  2, 13, 14, 0, 3, 9, 11,
                ]),
                c = r.create([
                  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6,
                  8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6,
                  7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15,
                  14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8,
                  13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
                ]),
                d = r.create([
                  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13,
                  15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11,
                  8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14,
                  14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14,
                  6, 8, 13, 6, 5, 15, 13, 11, 11,
                ]),
                l = r.create([
                  0, 1518500249, 1859775393, 2400959708, 2840853838,
                ]),
                u = r.create([
                  1352829926, 1548603684, 1836072691, 2053994217, 0,
                ]),
                p = (i.RIPEMD160 = s.extend({
                  _doReset: function () {
                    this._hash = r.create([
                      1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                    ]);
                  },
                  _doProcessBlock: function (e, t) {
                    for (var r = 0; r < 16; r++) {
                      var n = t + r,
                        s = e[n];
                      e[n] =
                        (16711935 & ((s << 8) | (s >>> 24))) |
                        (4278255360 & ((s << 24) | (s >>> 8)));
                    }
                    var i,
                      p,
                      y,
                      b,
                      w,
                      S,
                      R,
                      k,
                      E,
                      C,
                      T,
                      P = this._hash.words,
                      O = l.words,
                      x = u.words,
                      D = a.words,
                      I = o.words,
                      A = c.words,
                      M = d.words;
                    for (
                      S = i = P[0],
                        R = p = P[1],
                        k = y = P[2],
                        E = b = P[3],
                        C = w = P[4],
                        r = 0;
                      r < 80;
                      r += 1
                    )
                      (T = (i + e[t + D[r]]) | 0),
                        (T +=
                          r < 16
                            ? h(p, y, b) + O[0]
                            : r < 32
                            ? m(p, y, b) + O[1]
                            : r < 48
                            ? f(p, y, b) + O[2]
                            : r < 64
                            ? g(p, y, b) + O[3]
                            : v(p, y, b) + O[4]),
                        (T = ((T = _((T |= 0), A[r])) + w) | 0),
                        (i = w),
                        (w = b),
                        (b = _(y, 10)),
                        (y = p),
                        (p = T),
                        (T = (S + e[t + I[r]]) | 0),
                        (T +=
                          r < 16
                            ? v(R, k, E) + x[0]
                            : r < 32
                            ? g(R, k, E) + x[1]
                            : r < 48
                            ? f(R, k, E) + x[2]
                            : r < 64
                            ? m(R, k, E) + x[3]
                            : h(R, k, E) + x[4]),
                        (T = ((T = _((T |= 0), M[r])) + C) | 0),
                        (S = C),
                        (C = E),
                        (E = _(k, 10)),
                        (k = R),
                        (R = T);
                    (T = (P[1] + y + E) | 0),
                      (P[1] = (P[2] + b + C) | 0),
                      (P[2] = (P[3] + w + S) | 0),
                      (P[3] = (P[4] + i + R) | 0),
                      (P[4] = (P[0] + p + k) | 0),
                      (P[0] = T);
                  },
                  _doFinalize: function () {
                    var e = this._data,
                      t = e.words,
                      r = 8 * this._nDataBytes,
                      n = 8 * e.sigBytes;
                    (t[n >>> 5] |= 128 << (24 - (n % 32))),
                      (t[14 + (((n + 64) >>> 9) << 4)] =
                        (16711935 & ((r << 8) | (r >>> 24))) |
                        (4278255360 & ((r << 24) | (r >>> 8)))),
                      (e.sigBytes = 4 * (t.length + 1)),
                      this._process();
                    for (var s = this._hash, i = s.words, a = 0; a < 5; a++) {
                      var o = i[a];
                      i[a] =
                        (16711935 & ((o << 8) | (o >>> 24))) |
                        (4278255360 & ((o << 24) | (o >>> 8)));
                    }
                    return s;
                  },
                  clone: function () {
                    var e = s.clone.call(this);
                    return (e._hash = this._hash.clone()), e;
                  },
                }));
              function h(e, t, r) {
                return e ^ t ^ r;
              }
              function m(e, t, r) {
                return (e & t) | (~e & r);
              }
              function f(e, t, r) {
                return (e | ~t) ^ r;
              }
              function g(e, t, r) {
                return (e & r) | (t & ~r);
              }
              function v(e, t, r) {
                return e ^ (t | ~r);
              }
              function _(e, t) {
                return (e << t) | (e >>> (32 - t));
              }
              (e.RIPEMD160 = s._createHelper(p)),
                (e.HmacRIPEMD160 = s._createHmacHelper(p));
            })(Math),
            n.RIPEMD160);
        },
        8057: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__exportStar) ||
              function (e, t) {
                for (var r in e)
                  "default" === r ||
                    Object.prototype.hasOwnProperty.call(t, r) ||
                    n(t, e, r);
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            s(r(6004), t),
            s(r(5601), t),
            s(r(9792), t),
            s(r(3518), t),
            s(r(7504), t),
            s(r(9166), t),
            s(r(5370), t),
            s(r(4160), t),
            s(r(521), t),
            s(r(4893), t);
        },
        8124: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(9021)),
            r(7165),
            (n.pad.NoPadding = { pad: function () {}, unpad: function () {} }),
            n.pad.NoPadding);
        },
        8155: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome67 = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = i(r(1765)),
            d = i(r(8046)),
            l = i(r(5544)),
            u = i(r(4496)),
            p = r(521),
            h = r(1305),
            m = new o.Logger("Chrome67"),
            f = { OS: 1024, MIS: 1024 };
          class g extends p.HandlerInterface {
            static createFactory() {
              return () => new g();
            }
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdRtpSender = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome67";
            }
            close() {
              if ((m.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              m.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = a.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              m.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (m.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              m.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (m.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertSendDirection(),
                m.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  m.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addTrack(e, this._sendStream);
              let s,
                i = await this._pc.createOffer(),
                o = a.parse(i.sdp);
              const p = c.clone(this._sendingRtpParametersByKind[e.kind]);
              p.codecs = d.reduceCodecs(p.codecs);
              const h = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              if (
                ((h.codecs = d.reduceCodecs(h.codecs)),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: o,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (m.debug("send() | enabling simulcast"),
                  (o = a.parse(i.sdp)),
                  (s = o.media.find((e) => "video" === e.type)),
                  u.addLegacySimulcast({
                    offerMediaObject: s,
                    track: e,
                    numStreams: t.length,
                  }),
                  (i = { type: "offer", sdp: a.write(o) })),
                m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  i
                ),
                await this._pc.setLocalDescription(i),
                (o = a.parse(this._pc.localDescription.sdp)),
                (s = o.media.find((t) => t.type === e.kind)),
                (p.rtcp.cname = l.getCname({ offerMediaObject: s })),
                (p.encodings = u.getRtpEncodings({
                  offerMediaObject: s,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < p.encodings.length; ++e)
                  t[e] && Object.assign(p.encodings[e], t[e]);
              if (
                p.encodings.length > 1 &&
                "video/vp8" === p.codecs[0].mimeType.toLowerCase()
              )
                for (const e of p.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: s,
                offerRtpParameters: p,
                answerRtpParameters: h,
                codecOptions: r,
              });
              const f = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                f
              ),
                await this._pc.setRemoteDescription(f);
              const g = String(this._nextSendLocalId);
              this._nextSendLocalId++;
              const v = this._pc.getSenders().find((t) => t.track === e);
              return (
                this._mapSendLocalIdRtpSender.set(g, v),
                { localId: g, rtpParameters: p, rtpSender: v }
              );
            }
            async stopSending(e) {
              this.assertSendDirection(),
                m.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              this._pc.removeTrack(t),
                t.track && this._sendStream.removeTrack(t.track),
                this._mapSendLocalIdRtpSender.delete(e);
              const r = await this._pc.createOffer();
              m.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void m.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              this.assertSendDirection(),
                t
                  ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : m.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.track;
              await r.replaceTrack(t),
                n && this._sendStream.removeTrack(n),
                t && this._sendStream.addTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertSendDirection(),
                m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertSendDirection(),
                m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(n);
            }
            async getSenderStats(e) {
              this.assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              m.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [];
              for (const t of e) {
                const {
                  trackId: e,
                  kind: r,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                m.debug("receive() [trackId:%s, kind:%s]", e, r);
                const i = r;
                this._remoteSdp.receive({
                  mid: i,
                  kind: r,
                  offerRtpParameters: n,
                  streamId: s || n.rtcp.cname,
                  trackId: e,
                });
              }
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              let n = await this._pc.createAnswer();
              const s = a.parse(n.sdp);
              for (const t of e) {
                const { kind: e, rtpParameters: r } = t,
                  n = e,
                  i = s.media.find((e) => String(e.mid) === n);
                l.applyCodecParameters({
                  offerRtpParameters: r,
                  answerMediaObject: i,
                });
              }
              (n = { type: "answer", sdp: a.write(s) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: s,
                  })),
                m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const r of e) {
                const { kind: e, trackId: n, rtpParameters: s } = r,
                  i = n,
                  a = e,
                  o = this._pc
                    .getReceivers()
                    .find((e) => e.track && e.track.id === i);
                if (!o) throw new Error("new RTCRtpReceiver not");
                this._mapRecvLocalIdInfo.set(i, {
                  mid: a,
                  rtpParameters: s,
                  rtpReceiver: o,
                }),
                  t.push({ localId: i, track: o.track, rtpReceiver: o });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                m.debug("stopReceiving() [localId:%s]", t);
                const { mid: e, rtpParameters: r } =
                  this._mapRecvLocalIdInfo.get(t) || {};
                this._mapRecvLocalIdInfo.delete(t),
                  this._remoteSdp.planBStopReceiving({
                    mid: e,
                    offerRtpParameters: r,
                  });
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              m.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const { rtpReceiver: t } = this._mapRecvLocalIdInfo.get(e) || {};
              if (!t) throw new Error("associated RTCRtpReceiver not found");
              return t.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmitTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              m.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome67 = g;
        },
        8274: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Logger = void 0);
          const n = r(7833),
            s = "awaitqueue";
          t.Logger = class {
            _debug;
            _warn;
            _error;
            constructor(e) {
              e
                ? ((this._debug = n(`${s}:${e}`)),
                  (this._warn = n(`${s}:WARN:${e}`)),
                  (this._error = n(`${s}:ERROR:${e}`)))
                : ((this._debug = n(s)),
                  (this._warn = n(`${s}:WARN`)),
                  (this._error = n(`${s}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        8278: (e, t, r) => {
          "use strict";
          r.d(t, { Ag: () => a, Wm: () => o, sn: () => c, tr: () => l });
          var n = r(467),
            s = r(4756),
            i = r.n(s);
          r(1806);
          function a() {
            return (
              (void 0 !== window.RTCRtpSender &&
                void 0 !==
                  window.RTCRtpSender.prototype.createEncodedStreams) ||
              o()
            );
          }
          function o() {
            return void 0 !== window.RTCRtpScriptTransform;
          }
          function c(e) {
            return d.apply(this, arguments);
          }
          function d() {
            return (d = (0, n.A)(
              i().mark(function e(t) {
                var r, n;
                return i().wrap(function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (
                          (r = new TextEncoder()),
                          (e.next = 3),
                          crypto.subtle.importKey(
                            "raw",
                            r.encode(t),
                            { name: "PBKDF2" },
                            !1,
                            ["deriveBits", "deriveKey"]
                          )
                        );
                      case 3:
                        return (n = e.sent), e.abrupt("return", n);
                      case 5:
                      case "end":
                        return e.stop();
                    }
                }, e);
              })
            )).apply(this, arguments);
          }
          function l(e) {
            return u.apply(this, arguments);
          }
          function u() {
            return (u = (0, n.A)(
              i().mark(function e(t) {
                var r;
                return i().wrap(function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (
                          (e.next = 2),
                          crypto.subtle.importKey("raw", t, "HKDF", !1, [
                            "deriveBits",
                            "deriveKey",
                          ])
                        );
                      case 2:
                        return (r = e.sent), e.abrupt("return", r);
                      case 4:
                      case "end":
                        return e.stop();
                    }
                }, e);
              })
            )).apply(this, arguments);
          }
        },
        8454: function (e, t, r) {
          var n, s;
          e.exports =
            ((s = r(9021)),
            r(7165),
            (s.mode.ECB =
              (((n = s.lib.BlockCipherMode.extend()).Encryptor = n.extend({
                processBlock: function (e, t) {
                  this._cipher.encryptBlock(e, t);
                },
              })),
              (n.Decryptor = n.extend({
                processBlock: function (e, t) {
                  this._cipher.decryptBlock(e, t);
                },
              })),
              n)),
            s.mode.ECB);
        },
        8624: (e, t, r) => {
          "use strict";
          r.r(t),
            r.d(t, {
              DOMException: () => w,
              Headers: () => l,
              Request: () => v,
              Response: () => y,
              fetch: () => S,
            });
          var n =
              ("undefined" != typeof globalThis && globalThis) ||
              ("undefined" != typeof self && self) ||
              (void 0 !== r.g && r.g) ||
              {},
            s = {
              searchParams: "URLSearchParams" in n,
              iterable: "Symbol" in n && "iterator" in Symbol,
              blob:
                "FileReader" in n &&
                "Blob" in n &&
                (function () {
                  try {
                    return new Blob(), !0;
                  } catch (e) {
                    return !1;
                  }
                })(),
              formData: "FormData" in n,
              arrayBuffer: "ArrayBuffer" in n,
            };
          if (s.arrayBuffer)
            var i = [
                "[object Int8Array]",
                "[object Uint8Array]",
                "[object Uint8ClampedArray]",
                "[object Int16Array]",
                "[object Uint16Array]",
                "[object Int32Array]",
                "[object Uint32Array]",
                "[object Float32Array]",
                "[object Float64Array]",
              ],
              a =
                ArrayBuffer.isView ||
                function (e) {
                  return e && i.indexOf(Object.prototype.toString.call(e)) > -1;
                };
          function o(e) {
            if (
              ("string" != typeof e && (e = String(e)),
              /[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e) || "" === e)
            )
              throw new TypeError(
                'Invalid character in header field name: "' + e + '"'
              );
            return e.toLowerCase();
          }
          function c(e) {
            return "string" != typeof e && (e = String(e)), e;
          }
          function d(e) {
            var t = {
              next: function () {
                var t = e.shift();
                return { done: void 0 === t, value: t };
              },
            };
            return (
              s.iterable &&
                (t[Symbol.iterator] = function () {
                  return t;
                }),
              t
            );
          }
          function l(e) {
            (this.map = {}),
              e instanceof l
                ? e.forEach(function (e, t) {
                    this.append(t, e);
                  }, this)
                : Array.isArray(e)
                ? e.forEach(function (e) {
                    if (2 != e.length)
                      throw new TypeError(
                        "Headers constructor: expected name/value pair to be length 2, found" +
                          e.length
                      );
                    this.append(e[0], e[1]);
                  }, this)
                : e &&
                  Object.getOwnPropertyNames(e).forEach(function (t) {
                    this.append(t, e[t]);
                  }, this);
          }
          function u(e) {
            if (!e._noBody)
              return e.bodyUsed
                ? Promise.reject(new TypeError("Already read"))
                : void (e.bodyUsed = !0);
          }
          function p(e) {
            return new Promise(function (t, r) {
              (e.onload = function () {
                t(e.result);
              }),
                (e.onerror = function () {
                  r(e.error);
                });
            });
          }
          function h(e) {
            var t = new FileReader(),
              r = p(t);
            return t.readAsArrayBuffer(e), r;
          }
          function m(e) {
            if (e.slice) return e.slice(0);
            var t = new Uint8Array(e.byteLength);
            return t.set(new Uint8Array(e)), t.buffer;
          }
          function f() {
            return (
              (this.bodyUsed = !1),
              (this._initBody = function (e) {
                var t;
                (this.bodyUsed = this.bodyUsed),
                  (this._bodyInit = e),
                  e
                    ? "string" == typeof e
                      ? (this._bodyText = e)
                      : s.blob && Blob.prototype.isPrototypeOf(e)
                      ? (this._bodyBlob = e)
                      : s.formData && FormData.prototype.isPrototypeOf(e)
                      ? (this._bodyFormData = e)
                      : s.searchParams &&
                        URLSearchParams.prototype.isPrototypeOf(e)
                      ? (this._bodyText = e.toString())
                      : s.arrayBuffer &&
                        s.blob &&
                        (t = e) &&
                        DataView.prototype.isPrototypeOf(t)
                      ? ((this._bodyArrayBuffer = m(e.buffer)),
                        (this._bodyInit = new Blob([this._bodyArrayBuffer])))
                      : s.arrayBuffer &&
                        (ArrayBuffer.prototype.isPrototypeOf(e) || a(e))
                      ? (this._bodyArrayBuffer = m(e))
                      : (this._bodyText = e = Object.prototype.toString.call(e))
                    : ((this._noBody = !0), (this._bodyText = "")),
                  this.headers.get("content-type") ||
                    ("string" == typeof e
                      ? this.headers.set(
                          "content-type",
                          "text/plain;charset=UTF-8"
                        )
                      : this._bodyBlob && this._bodyBlob.type
                      ? this.headers.set("content-type", this._bodyBlob.type)
                      : s.searchParams &&
                        URLSearchParams.prototype.isPrototypeOf(e) &&
                        this.headers.set(
                          "content-type",
                          "application/x-www-form-urlencoded;charset=UTF-8"
                        ));
              }),
              s.blob &&
                (this.blob = function () {
                  var e = u(this);
                  if (e) return e;
                  if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                  if (this._bodyArrayBuffer)
                    return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                  if (this._bodyFormData)
                    throw new Error("could not read FormData body as blob");
                  return Promise.resolve(new Blob([this._bodyText]));
                }),
              (this.arrayBuffer = function () {
                if (this._bodyArrayBuffer) {
                  var e = u(this);
                  return (
                    e ||
                    (ArrayBuffer.isView(this._bodyArrayBuffer)
                      ? Promise.resolve(
                          this._bodyArrayBuffer.buffer.slice(
                            this._bodyArrayBuffer.byteOffset,
                            this._bodyArrayBuffer.byteOffset +
                              this._bodyArrayBuffer.byteLength
                          )
                        )
                      : Promise.resolve(this._bodyArrayBuffer))
                  );
                }
                if (s.blob) return this.blob().then(h);
                throw new Error("could not read as ArrayBuffer");
              }),
              (this.text = function () {
                var e,
                  t,
                  r,
                  n,
                  s,
                  i = u(this);
                if (i) return i;
                if (this._bodyBlob)
                  return (
                    (e = this._bodyBlob),
                    (t = new FileReader()),
                    (r = p(t)),
                    (n = /charset=([A-Za-z0-9_-]+)/.exec(e.type)),
                    (s = n ? n[1] : "utf-8"),
                    t.readAsText(e, s),
                    r
                  );
                if (this._bodyArrayBuffer)
                  return Promise.resolve(
                    (function (e) {
                      for (
                        var t = new Uint8Array(e),
                          r = new Array(t.length),
                          n = 0;
                        n < t.length;
                        n++
                      )
                        r[n] = String.fromCharCode(t[n]);
                      return r.join("");
                    })(this._bodyArrayBuffer)
                  );
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as text");
                return Promise.resolve(this._bodyText);
              }),
              s.formData &&
                (this.formData = function () {
                  return this.text().then(_);
                }),
              (this.json = function () {
                return this.text().then(JSON.parse);
              }),
              this
            );
          }
          (l.prototype.append = function (e, t) {
            (e = o(e)), (t = c(t));
            var r = this.map[e];
            this.map[e] = r ? r + ", " + t : t;
          }),
            (l.prototype.delete = function (e) {
              delete this.map[o(e)];
            }),
            (l.prototype.get = function (e) {
              return (e = o(e)), this.has(e) ? this.map[e] : null;
            }),
            (l.prototype.has = function (e) {
              return this.map.hasOwnProperty(o(e));
            }),
            (l.prototype.set = function (e, t) {
              this.map[o(e)] = c(t);
            }),
            (l.prototype.forEach = function (e, t) {
              for (var r in this.map)
                this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
            }),
            (l.prototype.keys = function () {
              var e = [];
              return (
                this.forEach(function (t, r) {
                  e.push(r);
                }),
                d(e)
              );
            }),
            (l.prototype.values = function () {
              var e = [];
              return (
                this.forEach(function (t) {
                  e.push(t);
                }),
                d(e)
              );
            }),
            (l.prototype.entries = function () {
              var e = [];
              return (
                this.forEach(function (t, r) {
                  e.push([r, t]);
                }),
                d(e)
              );
            }),
            s.iterable && (l.prototype[Symbol.iterator] = l.prototype.entries);
          var g = [
            "CONNECT",
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
            "TRACE",
          ];
          function v(e, t) {
            if (!(this instanceof v))
              throw new TypeError(
                'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
              );
            var r,
              s,
              i = (t = t || {}).body;
            if (e instanceof v) {
              if (e.bodyUsed) throw new TypeError("Already read");
              (this.url = e.url),
                (this.credentials = e.credentials),
                t.headers || (this.headers = new l(e.headers)),
                (this.method = e.method),
                (this.mode = e.mode),
                (this.signal = e.signal),
                i ||
                  null == e._bodyInit ||
                  ((i = e._bodyInit), (e.bodyUsed = !0));
            } else this.url = String(e);
            if (
              ((this.credentials =
                t.credentials || this.credentials || "same-origin"),
              (!t.headers && this.headers) || (this.headers = new l(t.headers)),
              (this.method =
                ((r = t.method || this.method || "GET"),
                (s = r.toUpperCase()),
                g.indexOf(s) > -1 ? s : r)),
              (this.mode = t.mode || this.mode || null),
              (this.signal =
                t.signal ||
                this.signal ||
                (function () {
                  if ("AbortController" in n)
                    return new AbortController().signal;
                })()),
              (this.referrer = null),
              ("GET" === this.method || "HEAD" === this.method) && i)
            )
              throw new TypeError("Body not allowed for GET or HEAD requests");
            if (
              (this._initBody(i),
              !(
                ("GET" !== this.method && "HEAD" !== this.method) ||
                ("no-store" !== t.cache && "no-cache" !== t.cache)
              ))
            ) {
              var a = /([?&])_=[^&]*/;
              if (a.test(this.url))
                this.url = this.url.replace(a, "$1_=" + new Date().getTime());
              else {
                this.url +=
                  (/\?/.test(this.url) ? "&" : "?") +
                  "_=" +
                  new Date().getTime();
              }
            }
          }
          function _(e) {
            var t = new FormData();
            return (
              e
                .trim()
                .split("&")
                .forEach(function (e) {
                  if (e) {
                    var r = e.split("="),
                      n = r.shift().replace(/\+/g, " "),
                      s = r.join("=").replace(/\+/g, " ");
                    t.append(decodeURIComponent(n), decodeURIComponent(s));
                  }
                }),
              t
            );
          }
          function y(e, t) {
            if (!(this instanceof y))
              throw new TypeError(
                'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
              );
            if (
              (t || (t = {}),
              (this.type = "default"),
              (this.status = void 0 === t.status ? 200 : t.status),
              this.status < 200 || this.status > 599)
            )
              throw new RangeError(
                "Failed to construct 'Response': The status provided (0) is outside the range [200, 599]."
              );
            (this.ok = this.status >= 200 && this.status < 300),
              (this.statusText =
                void 0 === t.statusText ? "" : "" + t.statusText),
              (this.headers = new l(t.headers)),
              (this.url = t.url || ""),
              this._initBody(e);
          }
          (v.prototype.clone = function () {
            return new v(this, { body: this._bodyInit });
          }),
            f.call(v.prototype),
            f.call(y.prototype),
            (y.prototype.clone = function () {
              return new y(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new l(this.headers),
                url: this.url,
              });
            }),
            (y.error = function () {
              var e = new y(null, { status: 200, statusText: "" });
              return (e.ok = !1), (e.status = 0), (e.type = "error"), e;
            });
          var b = [301, 302, 303, 307, 308];
          y.redirect = function (e, t) {
            if (-1 === b.indexOf(t))
              throw new RangeError("Invalid status code");
            return new y(null, { status: t, headers: { location: e } });
          };
          var w = n.DOMException;
          try {
            new w();
          } catch (e) {
            ((w = function (e, t) {
              (this.message = e), (this.name = t);
              var r = Error(e);
              this.stack = r.stack;
            }).prototype = Object.create(Error.prototype)),
              (w.prototype.constructor = w);
          }
          function S(e, t) {
            return new Promise(function (r, i) {
              var a = new v(e, t);
              if (a.signal && a.signal.aborted)
                return i(new w("Aborted", "AbortError"));
              var d = new XMLHttpRequest();
              function u() {
                d.abort();
              }
              if (
                ((d.onload = function () {
                  var e,
                    t,
                    n = {
                      statusText: d.statusText,
                      headers:
                        ((e = d.getAllResponseHeaders() || ""),
                        (t = new l()),
                        e
                          .replace(/\r?\n[\t ]+/g, " ")
                          .split("\r")
                          .map(function (e) {
                            return 0 === e.indexOf("\n")
                              ? e.substr(1, e.length)
                              : e;
                          })
                          .forEach(function (e) {
                            var r = e.split(":"),
                              n = r.shift().trim();
                            if (n) {
                              var s = r.join(":").trim();
                              try {
                                t.append(n, s);
                              } catch (e) {
                                console.warn("Response " + e.message);
                              }
                            }
                          }),
                        t),
                    };
                  0 === a.url.indexOf("file://") &&
                  (d.status < 200 || d.status > 599)
                    ? (n.status = 200)
                    : (n.status = d.status),
                    (n.url =
                      "responseURL" in d
                        ? d.responseURL
                        : n.headers.get("X-Request-URL"));
                  var s = "response" in d ? d.response : d.responseText;
                  setTimeout(function () {
                    r(new y(s, n));
                  }, 0);
                }),
                (d.onerror = function () {
                  setTimeout(function () {
                    i(new TypeError("Network request failed"));
                  }, 0);
                }),
                (d.ontimeout = function () {
                  setTimeout(function () {
                    i(new TypeError("Network request timed out"));
                  }, 0);
                }),
                (d.onabort = function () {
                  setTimeout(function () {
                    i(new w("Aborted", "AbortError"));
                  }, 0);
                }),
                d.open(
                  a.method,
                  (function (e) {
                    try {
                      return "" === e && n.location.href ? n.location.href : e;
                    } catch (t) {
                      return e;
                    }
                  })(a.url),
                  !0
                ),
                "include" === a.credentials
                  ? (d.withCredentials = !0)
                  : "omit" === a.credentials && (d.withCredentials = !1),
                "responseType" in d &&
                  (s.blob
                    ? (d.responseType = "blob")
                    : s.arrayBuffer && (d.responseType = "arraybuffer")),
                t &&
                  "object" == typeof t.headers &&
                  !(
                    t.headers instanceof l ||
                    (n.Headers && t.headers instanceof n.Headers)
                  ))
              ) {
                var p = [];
                Object.getOwnPropertyNames(t.headers).forEach(function (e) {
                  p.push(o(e)), d.setRequestHeader(e, c(t.headers[e]));
                }),
                  a.headers.forEach(function (e, t) {
                    -1 === p.indexOf(t) && d.setRequestHeader(t, e);
                  });
              } else
                a.headers.forEach(function (e, t) {
                  d.setRequestHeader(t, e);
                });
              a.signal &&
                (a.signal.addEventListener("abort", u),
                (d.onreadystatechange = function () {
                  4 === d.readyState &&
                    a.signal.removeEventListener("abort", u);
                })),
                d.send(void 0 === a._bodyInit ? null : a._bodyInit);
            });
          }
          (S.polyfill = !0),
            n.fetch ||
              ((n.fetch = S),
              (n.Headers = l),
              (n.Request = v),
              (n.Response = y));
        },
        8633: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Edge11 = void 0);
          const a = r(2994),
            o = r(4893),
            c = i(r(1765)),
            d = i(r(8046)),
            l = i(r(8751)),
            u = r(521),
            p = new a.Logger("Edge11");
          class h extends u.HandlerInterface {
            static createFactory() {
              return () => new h();
            }
            constructor() {
              super(),
                (this._rtpSenders = new Map()),
                (this._rtpReceivers = new Map()),
                (this._nextSendLocalId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Edge11";
            }
            close() {
              p.debug("close()");
              try {
                this._iceGatherer.close();
              } catch (e) {}
              try {
                this._iceTransport.stop();
              } catch (e) {}
              try {
                this._dtlsTransport.stop();
              } catch (e) {}
              for (const e of this._rtpSenders.values())
                try {
                  e.stop();
                } catch (e) {}
              for (const e of this._rtpReceivers.values())
                try {
                  e.stop();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              return p.debug("getNativeRtpCapabilities()"), l.getCapabilities();
            }
            async getNativeSctpCapabilities() {
              return (
                p.debug("getNativeSctpCapabilities()"),
                { numStreams: { OS: 0, MIS: 0 } }
              );
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: l,
              extendedRtpCapabilities: u,
            }) {
              p.debug("run()"),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", u),
                  video: d.getSendingRtpParameters("video", u),
                }),
                (this._remoteIceParameters = t),
                (this._remoteIceCandidates = r),
                (this._remoteDtlsParameters = n),
                (this._cname = `CNAME-${c.generateRandomNumber()}`),
                this.setIceGatherer({ iceServers: i, iceTransportPolicy: a }),
                this.setIceTransport(),
                this.setDtlsTransport();
            }
            async updateIceServers(e) {
              throw new o.UnsupportedError("not supported");
            }
            async restartIce(e) {
              if (
                (p.debug("restartIce()"),
                (this._remoteIceParameters = e),
                this._transportReady)
              ) {
                p.debug("restartIce() | calling iceTransport.start()"),
                  this._iceTransport.start(this._iceGatherer, e, "controlling");
                for (const e of this._remoteIceCandidates)
                  this._iceTransport.addRemoteCandidate(e);
                this._iceTransport.addRemoteCandidate({});
              }
            }
            async getTransportStats() {
              return this._iceTransport.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              p.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                this._transportReady ||
                  (await this.setupTransport({ localDtlsRole: "server" })),
                p.debug("send() | calling new RTCRtpSender()");
              const s = new RTCRtpSender(e, this._dtlsTransport),
                i = c.clone(this._sendingRtpParametersByKind[e.kind]);
              i.codecs = d.reduceCodecs(i.codecs, n);
              const a = i.codecs.some((e) => /.+\/rtx$/i.test(e.mimeType));
              t || (t = [{}]);
              for (const e of t)
                (e.ssrc = c.generateRandomNumber()),
                  a && (e.rtx = { ssrc: c.generateRandomNumber() });
              (i.encodings = t),
                (i.rtcp = { cname: this._cname, reducedSize: !0, mux: !0 });
              const o = l.mangleRtpParameters(i);
              p.debug("send() | calling rtpSender.send() [params:%o]", o),
                await s.send(o);
              const u = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._rtpSenders.set(u, s),
                { localId: u, rtpParameters: i, rtpSender: s }
              );
            }
            async stopSending(e) {
              p.debug("stopSending() [localId:%s]", e);
              const t = this._rtpSenders.get(e);
              if (!t) throw new Error("RTCRtpSender not found");
              this._rtpSenders.delete(e);
              try {
                p.debug("stopSending() | calling rtpSender.stop()"), t.stop();
              } catch (e) {
                throw (
                  (p.warn("stopSending() | rtpSender.stop() failed:%o", e), e)
                );
              }
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              t
                ? p.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                : p.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              r.setTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              p.debug(
                "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                e,
                t
              );
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              p.debug(
                "setRtpEncodingParameters() [localId:%s, params:%o]",
                e,
                t
              );
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(n);
            }
            async getSenderStats(e) {
              const t = this._rtpSenders.get(e);
              if (!t) throw new Error("RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel(e) {
              throw new o.UnsupportedError("not implemented");
            }
            async receive(e) {
              const t = [];
              for (const t of e) {
                const { trackId: e, kind: r } = t;
                p.debug("receive() [trackId:%s, kind:%s]", e, r);
              }
              this._transportReady ||
                (await this.setupTransport({ localDtlsRole: "server" }));
              for (const r of e) {
                const { trackId: e, kind: n, rtpParameters: s } = r;
                p.debug("receive() | calling new RTCRtpReceiver()");
                const i = new RTCRtpReceiver(this._dtlsTransport, n);
                i.addEventListener("error", (e) => {
                  p.error('rtpReceiver "error" event [event:%o]', e);
                });
                const a = l.mangleRtpParameters(s);
                p.debug(
                  "receive() | calling rtpReceiver.receive() [params:%o]",
                  a
                ),
                  await i.receive(a);
                const o = e;
                this._rtpReceivers.set(o, i),
                  t.push({ localId: o, track: i.track, rtpReceiver: i });
              }
              return t;
            }
            async stopReceiving(e) {
              for (const t of e) {
                p.debug("stopReceiving() [localId:%s]", t);
                const e = this._rtpReceivers.get(t);
                if (!e) throw new Error("RTCRtpReceiver not found");
                this._rtpReceivers.delete(t);
                try {
                  p.debug("stopReceiving() | calling rtpReceiver.stop()"),
                    e.stop();
                } catch (e) {
                  p.warn("stopReceiving() | rtpReceiver.stop() failed:%o", e);
                }
              }
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              const t = this._rtpReceivers.get(e);
              if (!t) throw new Error("RTCRtpReceiver not found");
              return t.getStats();
            }
            async receiveDataChannel(e) {
              throw new o.UnsupportedError("not implemented");
            }
            setIceGatherer({ iceServers: e, iceTransportPolicy: t }) {
              const r = new RTCIceGatherer({
                iceServers: e || [],
                gatherPolicy: t || "all",
              });
              r.addEventListener("error", (e) => {
                p.error('iceGatherer "error" event [event:%o]', e);
              });
              try {
                r.gather();
              } catch (e) {
                p.debug(
                  "setIceGatherer() | iceGatherer.gather() failed: %s",
                  e.toString()
                );
              }
              this._iceGatherer = r;
            }
            setIceTransport() {
              const e = new RTCIceTransport(this._iceGatherer);
              e.addEventListener("statechange", () => {
                switch (e.state) {
                  case "checking":
                    this.emit("@connectionstatechange", "connecting");
                    break;
                  case "connected":
                  case "completed":
                    this.emit("@connectionstatechange", "connected");
                    break;
                  case "failed":
                    this.emit("@connectionstatechange", "failed");
                    break;
                  case "disconnected":
                    this.emit("@connectionstatechange", "disconnected");
                    break;
                  case "closed":
                    this.emit("@connectionstatechange", "closed");
                }
              }),
                e.addEventListener("icestatechange", () => {
                  switch (e.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }),
                e.addEventListener("candidatepairchange", (e) => {
                  p.debug(
                    'iceTransport "candidatepairchange" event [pair:%o]',
                    e.pair
                  );
                }),
                (this._iceTransport = e);
            }
            setDtlsTransport() {
              const e = new RTCDtlsTransport(this._iceTransport);
              e.addEventListener("statechange", () => {
                p.debug(
                  'dtlsTransport "statechange" event [state:%s]',
                  e.state
                );
              }),
                e.addEventListener("dtlsstatechange", () => {
                  p.debug(
                    'dtlsTransport "dtlsstatechange" event [state:%s]',
                    e.state
                  ),
                    "closed" === e.state &&
                      this.emit("@connectionstatechange", "closed");
                }),
                e.addEventListener("error", (e) => {
                  p.error('dtlsTransport "error" event [event:%o]', e);
                }),
                (this._dtlsTransport = e);
            }
            async setupTransport({ localDtlsRole: e }) {
              p.debug("setupTransport()");
              const t = this._dtlsTransport.getLocalParameters();
              (t.role = e),
                await new Promise((e, r) => {
                  this.safeEmit("@connect", { dtlsParameters: t }, e, r);
                }),
                this._iceTransport.start(
                  this._iceGatherer,
                  this._remoteIceParameters,
                  "controlling"
                );
              for (const e of this._remoteIceCandidates)
                this._iceTransport.addRemoteCandidate(e);
              this._iceTransport.addRemoteCandidate({}),
                (this._remoteDtlsParameters.fingerprints =
                  this._remoteDtlsParameters.fingerprints.filter(
                    (e) =>
                      "sha-256" === e.algorithm ||
                      "sha-384" === e.algorithm ||
                      "sha-512" === e.algorithm
                  )),
                this._dtlsTransport.start(this._remoteDtlsParameters),
                (this._transportReady = !0);
            }
          }
          t.Edge11 = h;
        },
        8751: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.mangleRtpParameters = t.getCapabilities = void 0);
          const a = i(r(1765));
          (t.getCapabilities = function () {
            const e = RTCRtpReceiver.getCapabilities(),
              t = a.clone(e);
            for (const e of t.codecs ?? []) {
              if (
                ((e.channels = e.numChannels),
                delete e.numChannels,
                (e.mimeType = e.mimeType || `${e.kind}/${e.name}`),
                e.parameters)
              ) {
                const t = e.parameters;
                t.apt && (t.apt = Number(t.apt)),
                  t["packetization-mode"] &&
                    (t["packetization-mode"] = Number(t["packetization-mode"]));
              }
              for (const t of e.rtcpFeedback || [])
                t.parameter || (t.parameter = "");
            }
            return t;
          }),
            (t.mangleRtpParameters = function (e) {
              const t = a.clone(e);
              t.mid && ((t.muxId = t.mid), delete t.mid);
              for (const e of t.codecs)
                e.channels && ((e.numChannels = e.channels), delete e.channels),
                  e.mimeType && !e.name && (e.name = e.mimeType.split("/")[1]),
                  delete e.mimeType;
              return t;
            });
        },
        8876: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.AwaitQueueRemovedTaskError =
              t.AwaitQueueStoppedError =
              t.AwaitQueue =
                void 0);
          var n = r(9275);
          Object.defineProperty(t, "AwaitQueue", {
            enumerable: !0,
            get: function () {
              return n.AwaitQueue;
            },
          });
          var s = r(4253);
          Object.defineProperty(t, "AwaitQueueStoppedError", {
            enumerable: !0,
            get: function () {
              return s.AwaitQueueStoppedError;
            },
          }),
            Object.defineProperty(t, "AwaitQueueRemovedTaskError", {
              enumerable: !0,
              get: function () {
                return s.AwaitQueueRemovedTaskError;
              },
            });
        },
        9021: function (e, t, r) {
          var n;
          e.exports =
            ((n =
              n ||
              (function (e, t) {
                var n;
                if (
                  ("undefined" != typeof window &&
                    window.crypto &&
                    (n = window.crypto),
                  "undefined" != typeof self &&
                    self.crypto &&
                    (n = self.crypto),
                  "undefined" != typeof globalThis &&
                    globalThis.crypto &&
                    (n = globalThis.crypto),
                  !n &&
                    "undefined" != typeof window &&
                    window.msCrypto &&
                    (n = window.msCrypto),
                  !n && void 0 !== r.g && r.g.crypto && (n = r.g.crypto),
                  !n)
                )
                  try {
                    n = r(477);
                  } catch (e) {}
                var s = function () {
                    if (n) {
                      if ("function" == typeof n.getRandomValues)
                        try {
                          return n.getRandomValues(new Uint32Array(1))[0];
                        } catch (e) {}
                      if ("function" == typeof n.randomBytes)
                        try {
                          return n.randomBytes(4).readInt32LE();
                        } catch (e) {}
                    }
                    throw new Error(
                      "Native crypto module could not be used to get secure random number."
                    );
                  },
                  i =
                    Object.create ||
                    (function () {
                      function e() {}
                      return function (t) {
                        var r;
                        return (
                          (e.prototype = t),
                          (r = new e()),
                          (e.prototype = null),
                          r
                        );
                      };
                    })(),
                  a = {},
                  o = (a.lib = {}),
                  c = (o.Base = {
                    extend: function (e) {
                      var t = i(this);
                      return (
                        e && t.mixIn(e),
                        (t.hasOwnProperty("init") && this.init !== t.init) ||
                          (t.init = function () {
                            t.$super.init.apply(this, arguments);
                          }),
                        (t.init.prototype = t),
                        (t.$super = this),
                        t
                      );
                    },
                    create: function () {
                      var e = this.extend();
                      return e.init.apply(e, arguments), e;
                    },
                    init: function () {},
                    mixIn: function (e) {
                      for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                      e.hasOwnProperty("toString") &&
                        (this.toString = e.toString);
                    },
                    clone: function () {
                      return this.init.prototype.extend(this);
                    },
                  }),
                  d = (o.WordArray = c.extend({
                    init: function (e, r) {
                      (e = this.words = e || []),
                        (this.sigBytes = r != t ? r : 4 * e.length);
                    },
                    toString: function (e) {
                      return (e || u).stringify(this);
                    },
                    concat: function (e) {
                      var t = this.words,
                        r = e.words,
                        n = this.sigBytes,
                        s = e.sigBytes;
                      if ((this.clamp(), n % 4))
                        for (var i = 0; i < s; i++) {
                          var a = (r[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                          t[(n + i) >>> 2] |= a << (24 - ((n + i) % 4) * 8);
                        }
                      else
                        for (var o = 0; o < s; o += 4)
                          t[(n + o) >>> 2] = r[o >>> 2];
                      return (this.sigBytes += s), this;
                    },
                    clamp: function () {
                      var t = this.words,
                        r = this.sigBytes;
                      (t[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                        (t.length = e.ceil(r / 4));
                    },
                    clone: function () {
                      var e = c.clone.call(this);
                      return (e.words = this.words.slice(0)), e;
                    },
                    random: function (e) {
                      for (var t = [], r = 0; r < e; r += 4) t.push(s());
                      return new d.init(t, e);
                    },
                  })),
                  l = (a.enc = {}),
                  u = (l.Hex = {
                    stringify: function (e) {
                      for (
                        var t = e.words, r = e.sigBytes, n = [], s = 0;
                        s < r;
                        s++
                      ) {
                        var i = (t[s >>> 2] >>> (24 - (s % 4) * 8)) & 255;
                        n.push((i >>> 4).toString(16)),
                          n.push((15 & i).toString(16));
                      }
                      return n.join("");
                    },
                    parse: function (e) {
                      for (var t = e.length, r = [], n = 0; n < t; n += 2)
                        r[n >>> 3] |=
                          parseInt(e.substr(n, 2), 16) << (24 - (n % 8) * 4);
                      return new d.init(r, t / 2);
                    },
                  }),
                  p = (l.Latin1 = {
                    stringify: function (e) {
                      for (
                        var t = e.words, r = e.sigBytes, n = [], s = 0;
                        s < r;
                        s++
                      ) {
                        var i = (t[s >>> 2] >>> (24 - (s % 4) * 8)) & 255;
                        n.push(String.fromCharCode(i));
                      }
                      return n.join("");
                    },
                    parse: function (e) {
                      for (var t = e.length, r = [], n = 0; n < t; n++)
                        r[n >>> 2] |=
                          (255 & e.charCodeAt(n)) << (24 - (n % 4) * 8);
                      return new d.init(r, t);
                    },
                  }),
                  h = (l.Utf8 = {
                    stringify: function (e) {
                      try {
                        return decodeURIComponent(escape(p.stringify(e)));
                      } catch (e) {
                        throw new Error("Malformed UTF-8 data");
                      }
                    },
                    parse: function (e) {
                      return p.parse(unescape(encodeURIComponent(e)));
                    },
                  }),
                  m = (o.BufferedBlockAlgorithm = c.extend({
                    reset: function () {
                      (this._data = new d.init()), (this._nDataBytes = 0);
                    },
                    _append: function (e) {
                      "string" == typeof e && (e = h.parse(e)),
                        this._data.concat(e),
                        (this._nDataBytes += e.sigBytes);
                    },
                    _process: function (t) {
                      var r,
                        n = this._data,
                        s = n.words,
                        i = n.sigBytes,
                        a = this.blockSize,
                        o = i / (4 * a),
                        c =
                          (o = t
                            ? e.ceil(o)
                            : e.max((0 | o) - this._minBufferSize, 0)) * a,
                        l = e.min(4 * c, i);
                      if (c) {
                        for (var u = 0; u < c; u += a)
                          this._doProcessBlock(s, u);
                        (r = s.splice(0, c)), (n.sigBytes -= l);
                      }
                      return new d.init(r, l);
                    },
                    clone: function () {
                      var e = c.clone.call(this);
                      return (e._data = this._data.clone()), e;
                    },
                    _minBufferSize: 0,
                  })),
                  f =
                    ((o.Hasher = m.extend({
                      cfg: c.extend(),
                      init: function (e) {
                        (this.cfg = this.cfg.extend(e)), this.reset();
                      },
                      reset: function () {
                        m.reset.call(this), this._doReset();
                      },
                      update: function (e) {
                        return this._append(e), this._process(), this;
                      },
                      finalize: function (e) {
                        return e && this._append(e), this._doFinalize();
                      },
                      blockSize: 16,
                      _createHelper: function (e) {
                        return function (t, r) {
                          return new e.init(r).finalize(t);
                        };
                      },
                      _createHmacHelper: function (e) {
                        return function (t, r) {
                          return new f.HMAC.init(e, r).finalize(t);
                        };
                      },
                    })),
                    (a.algo = {}));
                return a;
              })(Math)),
            n);
        },
        9027: (e, t, r) => {
          "use strict";
          r.d(t, { $: () => n });
          var n = {
            networkPriorities: {
              audio: "high",
              dominatingVideo: "high",
              otherVideos: "medium",
              screenShare: "medium",
            },
            aspectRatios: {
              fourThree: { label: "fourThree", value: 1.333 },
              oneSixNine: { label: "oneSixNine", value: 1.777 },
            },
            audioProfiles: {
              speech_low_quality: {
                sampleRate: 16e3,
                bitRate: 24,
                sampleSize: 16,
                stereo: !1,
                dtx: !0,
                fec: !0,
                maxPlaybackRate: 16e3,
                packetTime: 20,
                autoGainControl: !0,
                echoCancellation: !0,
                noiseSuppression: !0,
                channelCount: 1,
              },
              speech_standard: {
                sampleRate: 32e3,
                bitRate: 24,
                sampleSize: 24,
                stereo: !1,
                dtx: !0,
                fec: !0,
                maxPlaybackRate: 32e3,
                packetTime: 30,
                autoGainControl: !0,
                echoCancellation: !0,
                noiseSuppression: !0,
                channelCount: 1,
              },
              music_standard: {
                sampleRate: 48e3,
                bitRate: 40,
                sampleSize: 32,
                stereo: !1,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 40,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 1,
              },
              standard_stereo: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 64,
                stereo: !0,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 40,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 2,
              },
              high_quality: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 128,
                stereo: !1,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 60,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 1,
              },
              high_quality_stereo: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 192,
                stereo: !0,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 60,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 2,
              },
            },
            videoProfiles: {
              h90p_w160p: {
                width: 160,
                height: 90,
                bitRate: 6e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h180p_w320p: {
                width: 320,
                height: 180,
                bitRate: 12e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h216p_w384p: {
                width: 384,
                height: 216,
                bitRate: 18e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h360p_w640p: {
                width: 640,
                height: 360,
                bitRate: 3e5,
                frameRate: 20,
                aspectRatio: "oneSixNine",
              },
              h540p_w960p: {
                width: 960,
                height: 540,
                bitRate: 6e5,
                frameRate: 25,
                aspectRatio: "oneSixNine",
              },
              h720p_w1280p: {
                width: 1280,
                height: 720,
                bitRate: 2e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h1080p_w1920p: {
                width: 1920,
                height: 1080,
                bitRate: 3e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h1440p_w2560p: {
                width: 2560,
                height: 1440,
                bitRate: 5e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h2160p_w3840p: {
                width: 3840,
                height: 2160,
                bitRate: 8e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h120p_w160p: {
                width: 160,
                height: 120,
                bitRate: 8e4,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h180p_w240p: {
                width: 240,
                height: 180,
                bitRate: 1e5,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h240p_w320p: {
                width: 320,
                height: 240,
                bitRate: 15e4,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h360p_w480p: {
                width: 480,
                height: 360,
                bitRate: 225e3,
                frameRate: 20,
                aspectRatio: "fourThree",
              },
              h480p_w640p: {
                width: 640,
                height: 480,
                bitRate: 3e5,
                frameRate: 25,
                aspectRatio: "fourThree",
              },
              h540p_w720p: {
                width: 720,
                height: 540,
                bitRate: 45e4,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h720p_w960p: {
                width: 960,
                height: 720,
                bitRate: 15e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h1080p_w1440p: {
                width: 1440,
                height: 1080,
                bitRate: 25e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h1440p_w1920p: {
                width: 1920,
                height: 1440,
                bitRate: 35e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
            },
            screenShareProfiles: {
              h360p_30fps: {
                resolution: { width: 640, height: 360 },
                frameRate: 30,
                bitrates: { high: 4e5, medium: 2e5, low: 1e5 },
              },
              h480p_15fps: {
                resolution: { width: 854, height: 480 },
                frameRate: 15,
                bitrates: { high: 3e5, medium: 15e4, low: 75e3 },
              },
              h480p_30fps: {
                resolution: { width: 854, height: 480 },
                frameRate: 30,
                bitrates: { high: 5e5, medium: 25e4, low: 125e3 },
              },
              h720p_5fps: {
                resolution: { width: 1280, height: 720 },
                frameRate: 5,
                bitrates: { high: 4e5, medium: 2e5, low: 1e5 },
              },
              h720p_15fps: {
                resolution: { width: 1280, height: 720 },
                frameRate: 15,
                bitrates: { high: 1e6, medium: 5e5, low: 25e4 },
              },
              h720p_30fps: {
                resolution: { width: 1280, height: 720 },
                frameRate: 30,
                bitrates: { high: 15e5, medium: 75e4, low: 375e3 },
              },
              h1080p_15fps: {
                resolution: { width: 1920, height: 1080 },
                frameRate: 15,
                bitrates: { high: 15e5, medium: 75e4, low: 3e5 },
              },
              h1080p_30fps: {
                resolution: { width: 1920, height: 1080 },
                frameRate: 30,
                bitrates: { high: 2e6, medium: 1e6, low: 5e5 },
              },
            },
            simulcastProfiles: {
              3840: [
                { scaleResolutionDownBy: 12, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 6, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 1e7 },
              ],
              1920: [
                { scaleResolutionDownBy: 6, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 3, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 35e5 },
              ],
              1280: [
                { scaleResolutionDownBy: 4, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 2, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 12e5 },
              ],
              640: [
                { scaleResolutionDownBy: 2, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 1, maxBitRate: 5e5 },
              ],
              320: [{ scaleResolutionDownBy: 1, maxBitRate: 15e4 }],
            },
            requestTimeout: 2e4,
            requestRetries: 3,
            transportOptions: { tcp: !0 },
            videoKSVCEncodings: [{ scalabilityMode: "S3T3_KEY" }],
            videoSVCEncodings: [{ scalabilityMode: "S3T3", dtx: !0 }],
          };
        },
        9166: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.DataConsumer = void 0);
          const n = r(2994),
            s = r(2010),
            i = new n.Logger("DataConsumer");
          class a extends s.EnhancedEventEmitter {
            constructor({
              id: e,
              dataProducerId: t,
              dataChannel: r,
              sctpStreamParameters: n,
              appData: a,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new s.EnhancedEventEmitter()),
                i.debug("constructor()"),
                (this._id = e),
                (this._dataProducerId = t),
                (this._dataChannel = r),
                (this._sctpStreamParameters = n),
                (this._appData = a || {}),
                this.handleDataChannel();
            }
            get id() {
              return this._id;
            }
            get dataProducerId() {
              return this._dataProducerId;
            }
            get closed() {
              return this._closed;
            }
            get sctpStreamParameters() {
              return this._sctpStreamParameters;
            }
            get readyState() {
              return this._dataChannel.readyState;
            }
            get label() {
              return this._dataChannel.label;
            }
            get protocol() {
              return this._dataChannel.protocol;
            }
            get binaryType() {
              return this._dataChannel.binaryType;
            }
            set binaryType(e) {
              this._dataChannel.binaryType = e;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (i.debug("close()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (i.debug("transportClosed()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            handleDataChannel() {
              this._dataChannel.addEventListener("open", () => {
                this._closed ||
                  (i.debug('DataChannel "open" event'), this.safeEmit("open"));
              }),
                this._dataChannel.addEventListener("error", (e) => {
                  if (this._closed) return;
                  let { error: t } = e;
                  t || (t = new Error("unknown DataChannel error")),
                    "sctp-failure" === t.errorDetail
                      ? i.error(
                          "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                          t.sctpCauseCode,
                          t.message
                        )
                      : i.error('DataChannel "error" event: %o', t),
                    this.safeEmit("error", t);
                }),
                this._dataChannel.addEventListener("close", () => {
                  this._closed ||
                    (i.warn('DataChannel "close" event'),
                    (this._closed = !0),
                    this.emit("@close"),
                    this.safeEmit("close"),
                    this._observer.safeEmit("close"));
                }),
                this._dataChannel.addEventListener("message", (e) => {
                  this._closed || this.safeEmit("message", e.data);
                });
            }
          }
          t.DataConsumer = a;
        },
        9275: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.AwaitQueue = void 0);
          const n = r(8274),
            s = r(4253),
            i = new n.Logger("AwaitQueue");
          t.AwaitQueue = class {
            pendingTasks = new Map();
            nextTaskId = 0;
            stopping = !1;
            constructor() {
              i.debug("constructor()");
            }
            get size() {
              return this.pendingTasks.size;
            }
            async push(e, t) {
              if (
                ((t = t ?? e.name),
                i.debug(`push() [name:${t}]`),
                "function" != typeof e)
              )
                throw new TypeError("given task is not a function");
              if (t)
                try {
                  Object.defineProperty(e, "name", { value: t });
                } catch (e) {}
              return new Promise((r, n) => {
                const s = {
                  id: this.nextTaskId++,
                  task: e,
                  name: t,
                  enqueuedAt: Date.now(),
                  executedAt: void 0,
                  completed: !1,
                  resolve: (e) => {
                    if (s.completed) return;
                    (s.completed = !0),
                      this.pendingTasks.delete(s.id),
                      i.debug(`resolving task [name:${s.name}]`),
                      r(e);
                    const [t] = this.pendingTasks.values();
                    t && !t.executedAt && this.execute(t);
                  },
                  reject: (e) => {
                    if (
                      !s.completed &&
                      ((s.completed = !0),
                      this.pendingTasks.delete(s.id),
                      i.debug(`rejecting task [name:${s.name}]: %s`, String(e)),
                      n(e),
                      !this.stopping)
                    ) {
                      const [e] = this.pendingTasks.values();
                      e && !e.executedAt && this.execute(e);
                    }
                  },
                };
                this.pendingTasks.set(s.id, s),
                  1 === this.pendingTasks.size && this.execute(s);
              });
            }
            stop() {
              i.debug("stop()"), (this.stopping = !0);
              for (const e of this.pendingTasks.values())
                i.debug(`stop() | stopping task [name:${e.name}]`),
                  e.reject(new s.AwaitQueueStoppedError());
              this.stopping = !1;
            }
            remove(e) {
              i.debug(`remove() [taskIdx:${e}]`);
              const t = Array.from(this.pendingTasks.values())[e];
              t
                ? t.reject(new s.AwaitQueueRemovedTaskError())
                : i.debug(`stop() | no task with given idx [taskIdx:${e}]`);
            }
            dump() {
              const e = Date.now();
              let t = 0;
              return Array.from(this.pendingTasks.values()).map((r) => ({
                idx: t++,
                task: r.task,
                name: r.name,
                enqueuedTime: r.executedAt
                  ? r.executedAt - r.enqueuedAt
                  : e - r.enqueuedAt,
                executionTime: r.executedAt ? e - r.executedAt : 0,
              }));
            }
            async execute(e) {
              if ((i.debug(`execute() [name:${e.name}]`), e.executedAt))
                throw new Error("task already being executed");
              e.executedAt = Date.now();
              try {
                const t = await e.task();
                e.resolve(t);
              } catch (t) {
                e.reject(t);
              }
            }
          };
        },
        9352: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.ReactNative = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = r(4893),
            d = i(r(1765)),
            l = i(r(8046)),
            u = i(r(5544)),
            p = i(r(4496)),
            h = r(521),
            m = r(1305),
            f = new o.Logger("ReactNative"),
            g = { OS: 1024, MIS: 1024 };
          class v extends h.HandlerInterface {
            static createFactory() {
              return () => new v();
            }
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdTrack = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "ReactNative";
            }
            close() {
              if ((f.debug("close()"), this._sendStream.release(!1), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = a.parse(t.sdp);
                return u.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (f.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  f.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addStream(this._sendStream);
              let s,
                i = await this._pc.createOffer(),
                o = a.parse(i.sdp);
              const c = d.clone(this._sendingRtpParametersByKind[e.kind]);
              c.codecs = l.reduceCodecs(c.codecs);
              const h = d.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              if (
                ((h.codecs = l.reduceCodecs(h.codecs)),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: o,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling simulcast"),
                  (o = a.parse(i.sdp)),
                  (s = o.media.find((e) => "video" === e.type)),
                  p.addLegacySimulcast({
                    offerMediaObject: s,
                    track: e,
                    numStreams: t.length,
                  }),
                  (i = { type: "offer", sdp: a.write(o) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  i
                ),
                await this._pc.setLocalDescription(i),
                (o = a.parse(this._pc.localDescription.sdp)),
                (s = o.media.find((t) => t.type === e.kind)),
                (c.rtcp.cname = u.getCname({ offerMediaObject: s })),
                (c.encodings = p.getRtpEncodings({
                  offerMediaObject: s,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < c.encodings.length; ++e)
                  t[e] && Object.assign(c.encodings[e], t[e]);
              if (
                c.encodings.length > 1 &&
                ("video/vp8" === c.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === c.codecs[0].mimeType.toLowerCase())
              )
                for (const e of c.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: s,
                offerRtpParameters: c,
                answerRtpParameters: h,
                codecOptions: r,
              });
              const m = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                m
              ),
                await this._pc.setRemoteDescription(m);
              const g = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._mapSendLocalIdTrack.set(g, e),
                { localId: g, rtpParameters: c }
              );
            }
            async stopSending(e) {
              this.assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdTrack.get(e);
              if (!t) throw new Error("track not found");
              this._mapSendLocalIdTrack.delete(e),
                this._sendStream.removeTrack(t),
                this._pc.addStream(this._sendStream);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void f.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setMaxSpatialLayer(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setRtpEncodingParameters(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async getSenderStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              f.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % g.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const { trackId: e, kind: n, rtpParameters: s } = t;
                f.debug("receive() [trackId:%s, kind:%s]", e, n);
                const i = n;
                let a = t.streamId || s.rtcp.cname;
                f.debug(
                  "receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc"
                ),
                  (a += `-hack-${d.generateRandomNumber()}`),
                  r.set(e, a),
                  this._remoteSdp.receive({
                    mid: i,
                    kind: n,
                    offerRtpParameters: s,
                    streamId: a,
                    trackId: e,
                  });
              }
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              let s = await this._pc.createAnswer();
              const i = a.parse(s.sdp);
              for (const t of e) {
                const { kind: e, rtpParameters: r } = t,
                  n = e,
                  s = i.media.find((e) => String(e.mid) === n);
                u.applyCodecParameters({
                  offerRtpParameters: r,
                  answerMediaObject: s,
                });
              }
              (s = { type: "answer", sdp: a.write(i) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: i,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s);
              for (const n of e) {
                const { kind: e, trackId: s, rtpParameters: i } = n,
                  a = s,
                  o = e,
                  c = r.get(s),
                  d = this._pc
                    .getRemoteStreams()
                    .find((e) => e.id === c)
                    .getTrackById(a);
                if (!d) throw new Error("remote track not found");
                this._mapRecvLocalIdInfo.set(a, { mid: o, rtpParameters: i }),
                  t.push({ localId: a, track: d });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                f.debug("stopReceiving() [localId:%s]", t);
                const { mid: e, rtpParameters: r } =
                  this._mapRecvLocalIdInfo.get(t) || {};
                this._mapRecvLocalIdInfo.delete(t),
                  this._remoteSdp.planBStopReceiving({
                    mid: e,
                    offerRtpParameters: r,
                  });
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmitTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.ReactNative = v;
        },
        9506: function (e, t, r) {
          var n, s, i, a, o, c, d, l;
          e.exports =
            ((l = r(9021)),
            r(5471),
            r(1025),
            (s = (n = l).lib),
            (i = s.Base),
            (a = s.WordArray),
            (o = n.algo),
            (c = o.MD5),
            (d = o.EvpKDF =
              i.extend({
                cfg: i.extend({ keySize: 4, hasher: c, iterations: 1 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var r,
                      n = this.cfg,
                      s = n.hasher.create(),
                      i = a.create(),
                      o = i.words,
                      c = n.keySize,
                      d = n.iterations;
                    o.length < c;

                  ) {
                    r && s.update(r), (r = s.update(e).finalize(t)), s.reset();
                    for (var l = 1; l < d; l++) (r = s.finalize(r)), s.reset();
                    i.concat(r);
                  }
                  return (i.sigBytes = 4 * c), i;
                },
              })),
            (n.EvpKDF = function (e, t, r) {
              return d.create(r).compute(e, t);
            }),
            l.EvpKDF);
        },
        9557: function (e, t, r) {
          var n, s, i, a, o, c, d, l;
          e.exports =
            ((l = r(9021)),
            r(3240),
            r(1380),
            (s = (n = l).x64),
            (i = s.Word),
            (a = s.WordArray),
            (o = n.algo),
            (c = o.SHA512),
            (d = o.SHA384 =
              c.extend({
                _doReset: function () {
                  this._hash = new a.init([
                    new i.init(3418070365, 3238371032),
                    new i.init(1654270250, 914150663),
                    new i.init(2438529370, 812702999),
                    new i.init(355462360, 4144912697),
                    new i.init(1731405415, 4290775857),
                    new i.init(2394180231, 1750603025),
                    new i.init(3675008525, 1694076839),
                    new i.init(1203062813, 3204075428),
                  ]);
                },
                _doFinalize: function () {
                  var e = c._doFinalize.call(this);
                  return (e.sigBytes -= 16), e;
                },
              })),
            (n.SHA384 = c._createHelper(d)),
            (n.HmacSHA384 = c._createHmacHelper(d)),
            l.SHA384);
        },
        9596: (e, t, r) => {
          let n;
          e.exports =
            "function" == typeof queueMicrotask
              ? queueMicrotask.bind("undefined" != typeof window ? window : r.g)
              : (e) =>
                  (n || (n = Promise.resolve())).then(e).catch((e) =>
                    setTimeout(() => {
                      throw e;
                    }, 0)
                  );
        },
        9633: (e, t, r) => {
          "use strict";
          r.d(t, { l: () => v });
          var n = r(467),
            s = r(3029),
            i = r(2901),
            a = r(388),
            o = r(3954),
            c = r(5501),
            d = r(4756),
            l = r.n(d),
            u = r(7007),
            p = r(1806),
            h = r(6746),
            m = r(8278);
          function f(e, t, r) {
            return (
              (t = (0, o.A)(t)),
              (0, a.A)(
                e,
                g()
                  ? Reflect.construct(t, r || [], (0, o.A)(e).constructor)
                  : t.apply(e, r)
              )
            );
          }
          function g() {
            try {
              var e = !Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function () {})
              );
            } catch (e) {}
            return (g = function () {
              return !!e;
            })();
          }
          var v = (function (e) {
            function t() {
              var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : {};
              return (
                (0, s.A)(this, t),
                f(this, t, [
                  Object.assign(Object.assign({}, e), {
                    sharedKey: !0,
                    ratchetWindowSize: 0,
                    failureTolerance: -1,
                  }),
                ])
              );
            }
            return (
              (0, c.A)(t, e),
              (0, i.A)(t, [
                {
                  key: "setSharedKey",
                  value:
                    ((r = (0, n.A)(
                      l().mark(function e(t) {
                        var r;
                        return l().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if ("string" != typeof t) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (e.next = 3), (0, m.sn)(t);
                                case 3:
                                  (e.t0 = e.sent), (e.next = 9);
                                  break;
                                case 6:
                                  return (e.next = 8), (0, m.tr)(t);
                                case 8:
                                  e.t0 = e.sent;
                                case 9:
                                  (r = e.t0), this.onSetEncryptionKey(r);
                                case 11:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e) {
                      return r.apply(this, arguments);
                    }),
                },
              ])
            );
            var r;
          })(
            (function (e) {
              function t() {
                var e,
                  r =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : {};
                return (
                  (0, s.A)(this, t),
                  ((e = f(this, t)).onKeyRatcheted = function (e, t) {
                    console.debug("key ratcheted event received", {
                      material: e,
                      keyIndex: t,
                    });
                  }),
                  (e.keyInfoMap = new Map()),
                  (e.options = Object.assign(Object.assign({}, p.T4), r)),
                  e.on(h.fo.KeyRatcheted, e.onKeyRatcheted),
                  e
                );
              }
              return (
                (0, c.A)(t, e),
                (0, i.A)(t, [
                  {
                    key: "onSetEncryptionKey",
                    value: function (e, t, r) {
                      var n = { key: e, participantIdentity: t, keyIndex: r };
                      if (!this.options.sharedKey && !t)
                        throw new Error(
                          "participant identity needs to be passed for encryption key if sharedKey option is false"
                        );
                      this.keyInfoMap.set(
                        ""
                          .concat(null != t ? t : "shared", "-")
                          .concat(null != r ? r : 0),
                        n
                      ),
                        this.emit(h.fo.SetKey, n);
                    },
                  },
                  {
                    key: "getKeys",
                    value: function () {
                      return Array.from(this.keyInfoMap.values());
                    },
                  },
                  {
                    key: "getOptions",
                    value: function () {
                      return this.options;
                    },
                  },
                  {
                    key: "ratchetKey",
                    value: function (e, t) {
                      this.emit(h.fo.RatchetRequest, e, t);
                    },
                  },
                ])
              );
            })(u.EventEmitter)
          );
        },
        9676: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r);
                    var s = Object.getOwnPropertyDescriptor(t, r);
                    (s &&
                      !("get" in s
                        ? !t.__esModule
                        : s.writable || s.configurable)) ||
                      (s = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, n, s);
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            s =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return s(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Safari11 = void 0);
          const a = i(r(7363)),
            o = r(2994),
            c = i(r(1765)),
            d = i(r(8046)),
            l = i(r(5544)),
            u = i(r(4496)),
            p = r(521),
            h = r(1305),
            m = new o.Logger("Safari11"),
            f = { OS: 1024, MIS: 1024 };
          class g extends p.HandlerInterface {
            static createFactory() {
              return () => new g();
            }
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdRtpSender = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Safari11";
            }
            close() {
              if ((m.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              m.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = a.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: a,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              m.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: s,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: a || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (m.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              m.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (m.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this.assertSendDirection(),
                m.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  m.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addTrack(e, this._sendStream);
              let s,
                i = await this._pc.createOffer(),
                o = a.parse(i.sdp);
              const p = c.clone(this._sendingRtpParametersByKind[e.kind]);
              p.codecs = d.reduceCodecs(p.codecs);
              const h = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              if (
                ((h.codecs = d.reduceCodecs(h.codecs)),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: o,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (m.debug("send() | enabling simulcast"),
                  (o = a.parse(i.sdp)),
                  (s = o.media.find((e) => "video" === e.type)),
                  u.addLegacySimulcast({
                    offerMediaObject: s,
                    track: e,
                    numStreams: t.length,
                  }),
                  (i = { type: "offer", sdp: a.write(o) })),
                m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  i
                ),
                await this._pc.setLocalDescription(i),
                (o = a.parse(this._pc.localDescription.sdp)),
                (s = o.media.find((t) => t.type === e.kind)),
                (p.rtcp.cname = l.getCname({ offerMediaObject: s })),
                (p.encodings = u.getRtpEncodings({
                  offerMediaObject: s,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < p.encodings.length; ++e)
                  t[e] && Object.assign(p.encodings[e], t[e]);
              if (
                p.encodings.length > 1 &&
                "video/vp8" === p.codecs[0].mimeType.toLowerCase()
              )
                for (const e of p.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: s,
                offerRtpParameters: p,
                answerRtpParameters: h,
                codecOptions: r,
              });
              const f = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                f
              ),
                await this._pc.setRemoteDescription(f);
              const g = String(this._nextSendLocalId);
              this._nextSendLocalId++;
              const v = this._pc.getSenders().find((t) => t.track === e);
              return (
                this._mapSendLocalIdRtpSender.set(g, v),
                { localId: g, rtpParameters: p, rtpSender: v }
              );
            }
            async stopSending(e) {
              this.assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              t.track && this._sendStream.removeTrack(t.track),
                this._mapSendLocalIdRtpSender.delete(e);
              const r = await this._pc.createOffer();
              m.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void m.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              this.assertSendDirection(),
                t
                  ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : m.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.track;
              await r.replaceTrack(t),
                n && this._sendStream.removeTrack(n),
                t && this._sendStream.addTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertSendDirection(),
                m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertSendDirection(),
                m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(n);
            }
            async getSenderStats(e) {
              this.assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: s,
            }) {
              this.assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: s,
              };
              m.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = a.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [];
              for (const t of e) {
                const {
                  trackId: e,
                  kind: r,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                m.debug("receive() [trackId:%s, kind:%s]", e, r);
                const i = r;
                this._remoteSdp.receive({
                  mid: i,
                  kind: r,
                  offerRtpParameters: n,
                  streamId: s || n.rtcp.cname,
                  trackId: e,
                });
              }
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              let n = await this._pc.createAnswer();
              const s = a.parse(n.sdp);
              for (const t of e) {
                const { kind: e, rtpParameters: r } = t,
                  n = e,
                  i = s.media.find((e) => String(e.mid) === n);
                l.applyCodecParameters({
                  offerRtpParameters: r,
                  answerMediaObject: i,
                });
              }
              (n = { type: "answer", sdp: a.write(s) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: s,
                  })),
                m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const r of e) {
                const { kind: e, trackId: n, rtpParameters: s } = r,
                  i = e,
                  a = n,
                  o = this._pc
                    .getReceivers()
                    .find((e) => e.track && e.track.id === a);
                if (!o) throw new Error("new RTCRtpReceiver not");
                this._mapRecvLocalIdInfo.set(a, {
                  mid: i,
                  rtpParameters: s,
                  rtpReceiver: o,
                }),
                  t.push({ localId: a, track: o.track, rtpReceiver: o });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                m.debug("stopReceiving() [localId:%s]", t);
                const { mid: e, rtpParameters: r } =
                  this._mapRecvLocalIdInfo.get(t) || {};
                this._mapRecvLocalIdInfo.delete(t),
                  this._remoteSdp.planBStopReceiving({
                    mid: e,
                    offerRtpParameters: r,
                  });
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              m.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const { rtpReceiver: t } = this._mapRecvLocalIdInfo.get(e) || {};
              if (!t) throw new Error("associated RTCRtpReceiver not found");
              return t.getStats();
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: s,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              m.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = a.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = a.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Safari11 = g;
        },
        9792: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Producer = void 0);
          const n = r(2994),
            s = r(2010),
            i = r(4893),
            a = new n.Logger("Producer");
          class o extends s.EnhancedEventEmitter {
            constructor({
              id: e,
              localId: t,
              rtpSender: r,
              track: n,
              rtpParameters: i,
              stopTracks: o,
              disableTrackOnPause: c,
              zeroRtpOnPause: d,
              appData: l,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new s.EnhancedEventEmitter()),
                a.debug("constructor()"),
                (this._id = e),
                (this._localId = t),
                (this._rtpSender = r),
                (this._track = n),
                (this._kind = n.kind),
                (this._rtpParameters = i),
                (this._paused = !!c && !n.enabled),
                (this._maxSpatialLayer = void 0),
                (this._stopTracks = o),
                (this._disableTrackOnPause = c),
                (this._zeroRtpOnPause = d),
                (this._appData = l || {}),
                (this.onTrackEnded = this.onTrackEnded.bind(this)),
                this.handleTrack();
            }
            get id() {
              return this._id;
            }
            get localId() {
              return this._localId;
            }
            get closed() {
              return this._closed;
            }
            get kind() {
              return this._kind;
            }
            get rtpSender() {
              return this._rtpSender;
            }
            get track() {
              return this._track;
            }
            get rtpParameters() {
              return this._rtpParameters;
            }
            get paused() {
              return this._paused;
            }
            get maxSpatialLayer() {
              return this._maxSpatialLayer;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (a.debug("close()"),
                (this._closed = !0),
                this.destroyTrack(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (a.debug("transportClosed()"),
                (this._closed = !0),
                this.destroyTrack(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            async getStats() {
              if (this._closed) throw new i.InvalidStateError("closed");
              return new Promise((e, t) => {
                this.safeEmit("@getstats", e, t);
              });
            }
            pause() {
              a.debug("pause()"),
                this._closed
                  ? a.error("pause() | Producer closed")
                  : ((this._paused = !0),
                    this._track &&
                      this._disableTrackOnPause &&
                      (this._track.enabled = !1),
                    this._zeroRtpOnPause &&
                      new Promise((e, t) => {
                        this.safeEmit("@pause", e, t);
                      }).catch(() => {}),
                    this._observer.safeEmit("pause"));
            }
            resume() {
              a.debug("resume()"),
                this._closed
                  ? a.error("resume() | Producer closed")
                  : ((this._paused = !1),
                    this._track &&
                      this._disableTrackOnPause &&
                      (this._track.enabled = !0),
                    this._zeroRtpOnPause &&
                      new Promise((e, t) => {
                        this.safeEmit("@resume", e, t);
                      }).catch(() => {}),
                    this._observer.safeEmit("resume"));
            }
            async replaceTrack({ track: e }) {
              if ((a.debug("replaceTrack() [track:%o]", e), this._closed)) {
                if (e && this._stopTracks)
                  try {
                    e.stop();
                  } catch (e) {}
                throw new i.InvalidStateError("closed");
              }
              if (e && "ended" === e.readyState)
                throw new i.InvalidStateError("track ended");
              e !== this._track
                ? (await new Promise((t, r) => {
                    this.safeEmit("@replacetrack", e, t, r);
                  }),
                  this.destroyTrack(),
                  (this._track = e),
                  this._track &&
                    this._disableTrackOnPause &&
                    (this._paused
                      ? this._paused && (this._track.enabled = !1)
                      : (this._track.enabled = !0)),
                  this.handleTrack())
                : a.debug("replaceTrack() | same track, ignored");
            }
            async setMaxSpatialLayer(e) {
              if (this._closed) throw new i.InvalidStateError("closed");
              if ("video" !== this._kind)
                throw new i.UnsupportedError("not a video Producer");
              if ("number" != typeof e)
                throw new TypeError("invalid spatialLayer");
              e !== this._maxSpatialLayer &&
                (await new Promise((t, r) => {
                  this.safeEmit("@setmaxspatiallayer", e, t, r);
                }).catch(() => {}),
                (this._maxSpatialLayer = e));
            }
            async setRtpEncodingParameters(e) {
              if (this._closed) throw new i.InvalidStateError("closed");
              if ("object" != typeof e) throw new TypeError("invalid params");
              await new Promise((t, r) => {
                this.safeEmit("@setrtpencodingparameters", e, t, r);
              });
            }
            onTrackEnded() {
              a.debug('track "ended" event'),
                this.safeEmit("trackended"),
                this._observer.safeEmit("trackended");
            }
            handleTrack() {
              this._track &&
                this._track.addEventListener("ended", this.onTrackEnded);
            }
            destroyTrack() {
              if (this._track)
                try {
                  this._track.removeEventListener("ended", this.onTrackEnded),
                    this._stopTracks && this._track.stop();
                } catch (e) {}
            }
          }
          t.Producer = o;
        },
      },
      t = {};
    function r(n) {
      var s = t[n];
      if (void 0 !== s) return s.exports;
      var i = (t[n] = { exports: {} });
      return e[n].call(i.exports, i, i.exports, r), i.exports;
    }
    (r.amdO = {}),
      (r.n = (e) => {
        var t = e && e.__esModule ? () => e.default : () => e;
        return r.d(t, { a: t }), t;
      }),
      (r.d = (e, t) => {
        for (var n in t)
          r.o(t, n) &&
            !r.o(e, n) &&
            Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
      }),
      (r.g = (function () {
        if ("object" == typeof globalThis) return globalThis;
        try {
          return this || new Function("return this")();
        } catch (e) {
          if ("object" == typeof window) return window;
        }
      })()),
      (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
      (r.r = (e) => {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      });
    var n = {};
    return (
      (() => {
        "use strict";
        r.r(n),
          r.d(n, {
            CameraDeviceInfo: () => pr,
            DeviceInfo: () => ur,
            ExternalE2EEKeyProvider: () => Bi.l,
            MicrophoneDeviceInfo: () => hr,
            VideoSDK: () => Vi,
            ZujoSDK: () => Gi,
          });
        var e = r(2284),
          t = r(467),
          s = r(3029),
          i = r(2901),
          a = r(4467),
          o = r(4756),
          c = r.n(o),
          d = r(6880),
          l = r.n(d);
        function u(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function p(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? u(Object(r), !0).forEach(function (t) {
                  (0, a.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : u(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        function h(e) {
          return (
            "Minified Redux error #" +
            e +
            "; visit https://redux.js.org/Errors?code=" +
            e +
            " for the full message or use the non-minified dev environment for full errors. "
          );
        }
        var m =
            ("function" == typeof Symbol && Symbol.observable) ||
            "@@observable",
          f = function () {
            return Math.random().toString(36).substring(7).split("").join(".");
          },
          g = {
            INIT: "@@redux/INIT" + f(),
            REPLACE: "@@redux/REPLACE" + f(),
            PROBE_UNKNOWN_ACTION: function () {
              return "@@redux/PROBE_UNKNOWN_ACTION" + f();
            },
          };
        function v(e) {
          if ("object" != typeof e || null === e) return !1;
          for (var t = e; null !== Object.getPrototypeOf(t); )
            t = Object.getPrototypeOf(t);
          return Object.getPrototypeOf(e) === t;
        }
        function _(e, t, r) {
          var n;
          if (
            ("function" == typeof t && "function" == typeof r) ||
            ("function" == typeof r && "function" == typeof arguments[3])
          )
            throw new Error(h(0));
          if (
            ("function" == typeof t && void 0 === r && ((r = t), (t = void 0)),
            void 0 !== r)
          ) {
            if ("function" != typeof r) throw new Error(h(1));
            return r(_)(e, t);
          }
          if ("function" != typeof e) throw new Error(h(2));
          var s = e,
            i = t,
            a = [],
            o = a,
            c = !1;
          function d() {
            o === a && (o = a.slice());
          }
          function l() {
            if (c) throw new Error(h(3));
            return i;
          }
          function u(e) {
            if ("function" != typeof e) throw new Error(h(4));
            if (c) throw new Error(h(5));
            var t = !0;
            return (
              d(),
              o.push(e),
              function () {
                if (t) {
                  if (c) throw new Error(h(6));
                  (t = !1), d();
                  var r = o.indexOf(e);
                  o.splice(r, 1), (a = null);
                }
              }
            );
          }
          function p(e) {
            if (!v(e)) throw new Error(h(7));
            if (void 0 === e.type) throw new Error(h(8));
            if (c) throw new Error(h(9));
            try {
              (c = !0), (i = s(i, e));
            } finally {
              c = !1;
            }
            for (var t = (a = o), r = 0; r < t.length; r++) {
              (0, t[r])();
            }
            return e;
          }
          return (
            p({ type: g.INIT }),
            ((n = {
              dispatch: p,
              subscribe: u,
              getState: l,
              replaceReducer: function (e) {
                if ("function" != typeof e) throw new Error(h(10));
                (s = e), p({ type: g.REPLACE });
              },
            })[m] = function () {
              var e,
                t = u;
              return (
                ((e = {
                  subscribe: function (e) {
                    if ("object" != typeof e || null === e)
                      throw new Error(h(11));
                    function r() {
                      e.next && e.next(l());
                    }
                    return r(), { unsubscribe: t(r) };
                  },
                })[m] = function () {
                  return this;
                }),
                e
              );
            }),
            n
          );
        }
        function y() {
          for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
            t[r] = arguments[r];
          return 0 === t.length
            ? function (e) {
                return e;
              }
            : 1 === t.length
            ? t[0]
            : t.reduce(function (e, t) {
                return function () {
                  return e(t.apply(void 0, arguments));
                };
              });
        }
        function b() {
          for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
            t[r] = arguments[r];
          return function (e) {
            return function () {
              var r = e.apply(void 0, arguments),
                n = function () {
                  throw new Error(h(15));
                },
                s = {
                  getState: r.getState,
                  dispatch: function () {
                    return n.apply(void 0, arguments);
                  },
                },
                i = t.map(function (e) {
                  return e(s);
                });
              return (
                (n = y.apply(void 0, i)(r.dispatch)),
                p(p({}, r), {}, { dispatch: n })
              );
            };
          };
        }
        function w(e) {
          return function (t) {
            var r = t.dispatch,
              n = t.getState;
            return function (t) {
              return function (s) {
                return "function" == typeof s ? s(r, n, e) : t(s);
              };
            };
          };
        }
        var S = w();
        S.withExtraArgument = w;
        const R = S;
        var k = r(2211),
          E = r.n(k);
        function C(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function T(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? C(Object(r), !0).forEach(function (t) {
                  (0, a.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : C(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var P = {
          url: null,
          state: "new",
          activeSpeakerId: null,
          statsPeerId: null,
          faceDetection: !1,
        };
        const O = function () {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : P,
            t = arguments.length > 1 ? arguments[1] : void 0;
          switch (t.type) {
            case "SET_ROOM_URL":
              var r = t.payload.url;
              return T(T({}, e), {}, { url: r });
            case "SET_ROOM_STATE":
              var n = t.payload.state;
              return T(
                T({}, e),
                {},
                "connected" === n
                  ? { state: n }
                  : { state: n, activeSpeakerId: null, statsPeerId: null }
              );
            case "SET_ROOM_ACTIVE_SPEAKER":
              var s = t.payload.peerId;
              return T(T({}, e), {}, { activeSpeakerId: s });
            case "SET_ROOM_STATS_PEER_ID":
              var i = t.payload.peerId;
              return e.statsPeerId === i
                ? T(T({}, e), {}, { statsPeerId: null })
                : T(T({}, e), {}, { statsPeerId: i });
            case "SET_FACE_DETECTION":
              var a = t.payload;
              return T(T({}, e), {}, { faceDetection: a });
            case "REMOVE_PEER":
              var o = t.payload.peerId,
                c = T({}, e);
              return (
                o && o === e.activeSpeakerId && (c.activeSpeakerId = null),
                o && o === e.statsPeerId && (c.statsPeerId = null),
                c
              );
            default:
              return e;
          }
        };
        function x(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function D(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? x(Object(r), !0).forEach(function (t) {
                  (0, a.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : x(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var I = {
          id: null,
          displayName: null,
          displayNameSet: !1,
          device: null,
          canSendMic: !1,
          canSendWebcam: !1,
          canChangeWebcam: !1,
          webcamInProgress: !1,
          shareInProgress: !1,
          audioOnly: !1,
          audioOnlyInProgress: !1,
          audioMuted: !1,
          restartIceInProgress: !1,
        };
        const A = function () {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : I,
            t = arguments.length > 1 ? arguments[1] : void 0;
          switch (t.type) {
            case "SET_ROOM_STATE":
              return "closed" === t.payload.state
                ? D(
                    D({}, e),
                    {},
                    {
                      webcamInProgress: !1,
                      shareInProgress: !1,
                      audioOnly: !1,
                      audioOnlyInProgress: !1,
                      audioMuted: !1,
                      restartIceInProgress: !1,
                    }
                  )
                : e;
            case "SET_ME":
              var r = t.payload,
                n = r.peerId,
                s = r.displayName,
                i = r.displayNameSet,
                a = r.device;
              return D(
                D({}, e),
                {},
                { id: n, displayName: s, displayNameSet: i, device: a }
              );
            case "SET_MEDIA_CAPABILITIES":
              var o = t.payload,
                c = o.canSendMic,
                d = o.canSendWebcam;
              return D(D({}, e), {}, { canSendMic: c, canSendWebcam: d });
            case "SET_CAN_CHANGE_WEBCAM":
              var l = t.payload;
              return D(D({}, e), {}, { canChangeWebcam: l });
            case "SET_WEBCAM_IN_PROGRESS":
              var u = t.payload.flag;
              return D(D({}, e), {}, { webcamInProgress: u });
            case "SET_SHARE_IN_PROGRESS":
              var p = t.payload.flag;
              return D(D({}, e), {}, { shareInProgress: p });
            case "SET_DISPLAY_NAME":
              var h = t.payload.displayName;
              return (
                h || (h = e.displayName),
                D(D({}, e), {}, { displayName: h, displayNameSet: !0 })
              );
            case "SET_AUDIO_ONLY_STATE":
              var m = t.payload.enabled;
              return D(D({}, e), {}, { audioOnly: m });
            case "SET_AUDIO_ONLY_IN_PROGRESS":
              var f = t.payload.flag;
              return D(D({}, e), {}, { audioOnlyInProgress: f });
            case "SET_AUDIO_MUTED_STATE":
              var g = t.payload.enabled;
              return D(D({}, e), {}, { audioMuted: g });
            case "SET_RESTART_ICE_IN_PROGRESS":
              var v = t.payload.flag;
              return D(D({}, e), {}, { restartIceInProgress: v });
            default:
              return e;
          }
        };
        function M(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function L(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? M(Object(r), !0).forEach(function (t) {
                  (0, a.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : M(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var N = {};
        const j = function () {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : N,
            t = arguments.length > 1 ? arguments[1] : void 0;
          switch (t.type) {
            case "SET_ROOM_STATE":
              return "closed" === t.payload.state ? {} : e;
            case "ADD_PRODUCER":
              var r = t.payload.producer;
              return L(L({}, e), {}, (0, a.A)({}, r.id, r));
            case "REMOVE_PRODUCER":
              var n = t.payload.producerId,
                s = L({}, e);
              return delete s[n], s;
            case "SET_PRODUCER_PAUSED":
              var i = t.payload.producerId,
                o = L(L({}, e[i]), {}, { paused: !0 });
              return L(L({}, e), {}, (0, a.A)({}, i, o));
            case "SET_PRODUCER_RESUMED":
              var c = t.payload.producerId,
                d = L(L({}, e[c]), {}, { paused: !1 });
              return L(L({}, e), {}, (0, a.A)({}, c, d));
            case "SET_PRODUCER_TRACK":
              var l = t.payload,
                u = l.producerId,
                p = l.track,
                h = L(L({}, e[u]), {}, { track: p });
              return L(L({}, e), {}, (0, a.A)({}, u, h));
            case "SET_PRODUCER_SCORE":
              var m = t.payload,
                f = m.producerId,
                g = m.score,
                v = e[f];
              if (!v) return e;
              var _ = L(L({}, v), {}, { score: g });
              return L(L({}, e), {}, (0, a.A)({}, f, _));
            default:
              return e;
          }
        };
        function B(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function F(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? B(Object(r), !0).forEach(function (t) {
                  (0, a.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : B(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var U = {};
        const W = function () {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : U,
            t = arguments.length > 1 ? arguments[1] : void 0;
          switch (t.type) {
            case "SET_ROOM_STATE":
              return "closed" === t.payload.state ? {} : e;
            case "ADD_DATA_PRODUCER":
              var r = t.payload.dataProducer;
              return F(F({}, e), {}, (0, a.A)({}, r.id, r));
            case "REMOVE_DATA_PRODUCER":
              var n = t.payload.dataProducerId,
                s = F({}, e);
              return delete s[n], s;
            default:
              return e;
          }
        };
        var q = r(5458);
        function V(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function H(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? V(Object(r), !0).forEach(function (t) {
                  (0, a.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : V(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var z = {};
        function G(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function K(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? G(Object(r), !0).forEach(function (t) {
                  (0, a.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : G(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var $ = {};
        function J(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function Q(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? J(Object(r), !0).forEach(function (t) {
                  (0, a.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : J(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var Y = {};
        var X = [];
        const Z = (function (e) {
          for (var t = Object.keys(e), r = {}, n = 0; n < t.length; n++) {
            var s = t[n];
            0, "function" == typeof e[s] && (r[s] = e[s]);
          }
          var i,
            a = Object.keys(r);
          try {
            !(function (e) {
              Object.keys(e).forEach(function (t) {
                var r = e[t];
                if (void 0 === r(void 0, { type: g.INIT }))
                  throw new Error(h(12));
                if (void 0 === r(void 0, { type: g.PROBE_UNKNOWN_ACTION() }))
                  throw new Error(h(13));
              });
            })(r);
          } catch (e) {
            i = e;
          }
          return function (e, t) {
            if ((void 0 === e && (e = {}), i)) throw i;
            for (var n = !1, s = {}, o = 0; o < a.length; o++) {
              var c = a[o],
                d = r[c],
                l = e[c],
                u = d(l, t);
              if (void 0 === u) {
                t && t.type;
                throw new Error(h(14));
              }
              (s[c] = u), (n = n || u !== l);
            }
            return (n = n || a.length !== Object.keys(e).length) ? s : e;
          };
        })({
          room: O,
          me: A,
          producers: j,
          dataProducers: W,
          peers: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : z,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                return "closed" === t.payload.state ? {} : e;
              case "ADD_PEER":
                var r = t.payload.peer;
                return H(H({}, e), {}, (0, a.A)({}, r.id, r));
              case "REMOVE_PEER":
                var n = t.payload.peerId,
                  s = H({}, e);
                return delete s[n], s;
              case "SET_PEER_DISPLAY_NAME":
                var i = t.payload,
                  o = i.displayName,
                  c = e[i.peerId];
                if (!c) throw new Error("no Peer found");
                var d = H(H({}, c), {}, { displayName: o });
                return H(H({}, e), {}, (0, a.A)({}, d.id, d));
              case "ADD_CONSUMER":
                var l = t.payload,
                  u = l.consumer,
                  p = e[l.peerId];
                if (!p) return H({}, e);
                var h = [].concat((0, q.A)(p.consumers), [u.id]),
                  m = H(H({}, p), {}, { consumers: h });
                return H(H({}, e), {}, (0, a.A)({}, m.id, m));
              case "REMOVE_CONSUMER":
                var f = t.payload,
                  g = f.consumerId,
                  v = e[f.peerId];
                if (!v) return e;
                var _ = v.consumers.indexOf(g);
                if (-1 === _) return H({}, e);
                var y = v.consumers.slice();
                y.splice(_, 1);
                var b = H(H({}, v), {}, { consumers: y });
                return H(H({}, e), {}, (0, a.A)({}, b.id, b));
              case "ADD_DATA_CONSUMER":
                var w = t.payload,
                  S = w.dataConsumer,
                  R = w.peerId;
                if (!R) return e;
                var k = e[R];
                if (!k) return H({}, e);
                var E = [].concat((0, q.A)(k.dataConsumers), [S.id]),
                  C = H(H({}, k), {}, { dataConsumers: E });
                return H(H({}, e), {}, (0, a.A)({}, C.id, C));
              case "REMOVE_DATA_CONSUMER":
                var T = t.payload,
                  P = T.dataConsumerId,
                  O = T.peerId;
                if (!O) return e;
                var x = e[O];
                if (!x) return e;
                var D = x.dataConsumers.indexOf(P);
                if (-1 === D) return H({}, e);
                var I = x.dataConsumers.slice();
                I.splice(D, 1);
                var A = H(H({}, x), {}, { dataConsumers: I });
                return H(H({}, e), {}, (0, a.A)({}, A.id, A));
              default:
                return e;
            }
          },
          consumers: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : $,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                return "closed" === t.payload.state ? {} : e;
              case "ADD_CONSUMER":
                var r = t.payload.consumer;
                return K(K({}, e), {}, (0, a.A)({}, r.id, r));
              case "REMOVE_CONSUMER":
                var n = t.payload.consumerId,
                  s = K({}, e);
                return delete s[n], s;
              case "SET_CONSUMER_PAUSED":
                var i,
                  o = t.payload,
                  c = o.consumerId,
                  d = o.originator,
                  l = e[c];
                return (
                  (i = K(
                    K({}, l),
                    {},
                    "local" === d
                      ? { locallyPaused: !0, paused: !0 }
                      : { remotelyPaused: !0, paused: !0 }
                  )),
                  K(K({}, e), {}, (0, a.A)({}, c, i))
                );
              case "SET_CONSUMER_RESUMED":
                var u,
                  p = t.payload,
                  h = p.consumerId,
                  m = p.originator,
                  f = e[h];
                return (
                  (u = K(
                    K({}, f),
                    {},
                    "local" === m
                      ? { locallyPaused: !1, paused: !1 }
                      : { remotelyPaused: !1, paused: !1 }
                  )),
                  K(K({}, e), {}, (0, a.A)({}, h, u))
                );
              case "SET_CONSUMER_CURRENT_LAYERS":
                var g = t.payload,
                  v = g.consumerId,
                  _ = g.spatialLayer,
                  y = g.temporalLayer,
                  b = K(
                    K({}, e[v]),
                    {},
                    { currentSpatialLayer: _, currentTemporalLayer: y }
                  );
                return K(K({}, e), {}, (0, a.A)({}, v, b));
              case "SET_CONSUMER_PREFERRED_LAYERS":
                var w = t.payload,
                  S = w.consumerId,
                  R = w.spatialLayer,
                  k = w.temporalLayer,
                  E = K(
                    K({}, e[S]),
                    {},
                    { preferredSpatialLayer: R, preferredTemporalLayer: k }
                  );
                return K(K({}, e), {}, (0, a.A)({}, S, E));
              case "SET_CONSUMER_PRIORITY":
                var C = t.payload,
                  T = C.consumerId,
                  P = C.priority,
                  O = K(K({}, e[T]), {}, { priority: P });
                return K(K({}, e), {}, (0, a.A)({}, T, O));
              case "SET_CONSUMER_TRACK":
                var x = t.payload,
                  D = x.consumerId,
                  I = x.track,
                  A = K(K({}, e[D]), {}, { track: I });
                return K(K({}, e), {}, (0, a.A)({}, D, A));
              case "SET_CONSUMER_SCORE":
                var M = t.payload,
                  L = M.consumerId,
                  N = M.score,
                  j = e[L];
                if (!j) return e;
                var B = K(K({}, j), {}, { score: N });
                return K(K({}, e), {}, (0, a.A)({}, L, B));
              default:
                return e;
            }
          },
          dataConsumers: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : Y,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                return "closed" === t.payload.state ? {} : e;
              case "ADD_DATA_CONSUMER":
                var r = t.payload.dataConsumer;
                return Q(Q({}, e), {}, (0, a.A)({}, r.id, r));
              case "REMOVE_DATA_CONSUMER":
                var n = t.payload.dataConsumerId,
                  s = Q({}, e);
                return delete s[n], s;
              default:
                return e;
            }
          },
          notifications: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : X,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "ADD_NOTIFICATION":
                var r = t.payload.notification;
                return [].concat((0, q.A)(e), [r]);
              case "REMOVE_NOTIFICATION":
                var n = t.payload.notificationId;
                return e.filter(function (e) {
                  return e.id !== n;
                });
              case "REMOVE_ALL_NOTIFICATIONS":
                return [];
              default:
                return e;
            }
          },
        });
        var ee = r(1919);
        var te = r(7007),
          re = r(296),
          ne =
            (r(1919).default,
            (0, i.A)(function e() {
              (0, s.A)(this, e), (this.roomClient = null);
            })),
          se = new ((function () {
            function e() {
              (0, s.A)(this, e), e.instance || (e.instance = new ne());
            }
            return (0, i.A)(e, [
              {
                key: "getInstance",
                value: function () {
                  return e.instance;
                },
              },
            ]);
          })())();
        Object.freeze(se);
        var ie = se.getInstance(),
          ae = (function () {
            return (0, i.A)(
              function e(t) {
                (0, s.A)(this, e),
                  (0, a.A)(this, "pausedBy", void 0),
                  (this.id = t.id),
                  (this.kind = t.track.kind),
                  (this.codec = t.codec),
                  (this.track = t.track),
                  (this.producerOrConsumer = t.instance),
                  t.appData &&
                    !0 === t.appData.share &&
                    "video" === t.track.kind &&
                    (this.kind = "share"),
                  t.appData &&
                    !0 === t.appData.share &&
                    "audio" === t.track.kind &&
                    (this.kind = "shareAudio"),
                  (this.rtpSender = t.rtpSender),
                  (this.rtpReceiver = t.rtpReceiver);
              },
              [
                {
                  key: "pause",
                  value: function () {
                    ie.roomClient._pauseConsumer(this.producerOrConsumer);
                  },
                },
                {
                  key: "resume",
                  value: function () {
                    ie.roomClient._resumeConsumer(this.producerOrConsumer);
                  },
                },
                {
                  key: "paused",
                  get: function () {
                    return this.producerOrConsumer.paused;
                  },
                },
              ]
            );
          })(),
          oe = r(1803);
        function ce(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function de(e, t) {
          var r =
            ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
            e["@@iterator"];
          if (!r) {
            if (
              Array.isArray(e) ||
              (r = (function (e, t) {
                if (e) {
                  if ("string" == typeof e) return le(e, t);
                  var r = {}.toString.call(e).slice(8, -1);
                  return (
                    "Object" === r && e.constructor && (r = e.constructor.name),
                    "Map" === r || "Set" === r
                      ? Array.from(e)
                      : "Arguments" === r ||
                        /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                      ? le(e, t)
                      : void 0
                  );
                }
              })(e)) ||
              (t && e && "number" == typeof e.length)
            ) {
              r && (e = r);
              var n = 0,
                s = function () {};
              return {
                s,
                n: function () {
                  return n >= e.length
                    ? { done: !0 }
                    : { done: !1, value: e[n++] };
                },
                e: function (e) {
                  throw e;
                },
                f: s,
              };
            }
            throw new TypeError(
              "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
            );
          }
          var i,
            a = !0,
            o = !1;
          return {
            s: function () {
              r = r.call(e);
            },
            n: function () {
              var e = r.next();
              return (a = e.done), e;
            },
            e: function (e) {
              (o = !0), (i = e);
            },
            f: function () {
              try {
                a || null == r.return || r.return();
              } finally {
                if (o) throw i;
              }
            },
          };
        }
        function le(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var r = 0, n = Array(t); r < t; r++) n[r] = e[r];
          return n;
        }
        var ue = "stream-enabled",
          pe = "stream-disabled",
          he = "media-status-changed",
          me = "video-quality-changed",
          fe = "stream-paused",
          ge = "stream-resumed",
          ve = "producer-added",
          _e = "producer-removed",
          ye = "consumer-added",
          be = "consumer-removed",
          we = "e2ee-state-change",
          Se = (function () {
            return (0, i.A)(
              function e(r) {
                var n = this;
                (0, s.A)(this, e),
                  (0, a.A)(
                    this,
                    "captureImage",
                    (0, t.A)(
                      c().mark(function e() {
                        var r,
                          s,
                          i,
                          a,
                          o,
                          d,
                          l,
                          u,
                          p = arguments;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  (s = (r =
                                    p.length > 0 && void 0 !== p[0] ? p[0] : {})
                                    .height),
                                    (i = r.width),
                                    (e.prev = 1),
                                    (a = (0, q.A)(n.streams.values())),
                                    (o = de(a)),
                                    (e.prev = 4),
                                    (l = c().mark(function e() {
                                      var r, n, a, o, l;
                                      return c().wrap(
                                        function (e) {
                                          for (;;)
                                            switch ((e.prev = e.next)) {
                                              case 0:
                                                if (
                                                  "video" != (r = d.value).kind
                                                ) {
                                                  e.next = 19;
                                                  break;
                                                }
                                                return (
                                                  (e.prev = 2),
                                                  (n =
                                                    new MediaStream()).addTrack(
                                                    r.track
                                                  ),
                                                  ((a =
                                                    document.createElement(
                                                      "video"
                                                    )).srcObject = n),
                                                  (a.playsInline = !0),
                                                  ((o =
                                                    document.createElement(
                                                      "canvas"
                                                    )).id = "canvasId"),
                                                  (e.next = 12),
                                                  new Promise(function (e, r) {
                                                    a.addEventListener(
                                                      "loadeddata",
                                                      (0, t.A)(
                                                        c().mark(function t() {
                                                          var n, d, l, u, p, h;
                                                          return c().wrap(
                                                            function (t) {
                                                              for (;;)
                                                                switch (
                                                                  (t.prev =
                                                                    t.next)
                                                                ) {
                                                                  case 0:
                                                                    return (
                                                                      (n =
                                                                        a.videoWidth),
                                                                      (d =
                                                                        a.videoHeight),
                                                                      (l =
                                                                        16 / 9),
                                                                      null ==
                                                                        s &&
                                                                        null ==
                                                                          i &&
                                                                        ((s =
                                                                          d),
                                                                        (i =
                                                                          n)),
                                                                      (null ==
                                                                        s &&
                                                                        null ==
                                                                          s) ||
                                                                        ((s <=
                                                                          0 ||
                                                                          s >
                                                                            d) &&
                                                                          (s =
                                                                            d)),
                                                                      (null ==
                                                                        i &&
                                                                        null ==
                                                                          i) ||
                                                                        ((i <=
                                                                          0 ||
                                                                          i >
                                                                            n) &&
                                                                          (i =
                                                                            n)),
                                                                      null ==
                                                                        s &&
                                                                        (s =
                                                                          i /
                                                                          l),
                                                                      null ==
                                                                        i &&
                                                                        (i =
                                                                          s *
                                                                          l),
                                                                      (o.width =
                                                                        i),
                                                                      (o.height =
                                                                        s),
                                                                      (t.prev = 9),
                                                                      (t.next = 12),
                                                                      a.play()
                                                                    );
                                                                  case 12:
                                                                    document.body.appendChild(
                                                                      a
                                                                    ),
                                                                      (u =
                                                                        (o.width -
                                                                          n *
                                                                            l) /
                                                                        2),
                                                                      (p =
                                                                        (o.height -
                                                                          d *
                                                                            l) /
                                                                        2),
                                                                      o
                                                                        .getContext(
                                                                          "2d"
                                                                        )
                                                                        .clearRect(
                                                                          0,
                                                                          0,
                                                                          u / 2,
                                                                          p / 2
                                                                        ),
                                                                      o
                                                                        .getContext(
                                                                          "2d"
                                                                        )
                                                                        .drawImage(
                                                                          a,
                                                                          0,
                                                                          0
                                                                        ),
                                                                      (h = o
                                                                        .toDataURL(
                                                                          "image/jpeg"
                                                                        )
                                                                        .split(
                                                                          ";base64,"
                                                                        )[1]),
                                                                      document.body.appendChild(
                                                                        o
                                                                      ),
                                                                      document.body.removeChild(
                                                                        o
                                                                      ),
                                                                      document.body.removeChild(
                                                                        a
                                                                      ),
                                                                      e(h),
                                                                      (t.next = 28);
                                                                    break;
                                                                  case 24:
                                                                    (t.prev = 24),
                                                                      (t.t0 =
                                                                        t.catch(
                                                                          9
                                                                        )),
                                                                      r(t.t0),
                                                                      console.log(
                                                                        "error in video",
                                                                        t.t0
                                                                      );
                                                                  case 28:
                                                                  case "end":
                                                                    return t.stop();
                                                                }
                                                            },
                                                            t,
                                                            null,
                                                            [[9, 24]]
                                                          );
                                                        })
                                                      )
                                                    );
                                                  })
                                                );
                                              case 12:
                                                return (
                                                  (l = e.sent),
                                                  e.abrupt("return", { v: l })
                                                );
                                              case 16:
                                                (e.prev = 16),
                                                  (e.t0 = e.catch(2)),
                                                  console.error(
                                                    "err on image capture",
                                                    e.t0
                                                  );
                                              case 19:
                                              case "end":
                                                return e.stop();
                                            }
                                        },
                                        e,
                                        null,
                                        [[2, 16]]
                                      );
                                    })),
                                    o.s();
                                case 7:
                                  if ((d = o.n()).done) {
                                    e.next = 14;
                                    break;
                                  }
                                  return e.delegateYield(l(), "t0", 9);
                                case 9:
                                  if (!(u = e.t0)) {
                                    e.next = 12;
                                    break;
                                  }
                                  return e.abrupt("return", u.v);
                                case 12:
                                  e.next = 7;
                                  break;
                                case 14:
                                  e.next = 19;
                                  break;
                                case 16:
                                  (e.prev = 16), (e.t1 = e.catch(4)), o.e(e.t1);
                                case 19:
                                  return (e.prev = 19), o.f(), e.finish(19);
                                case 22:
                                  throw new Error(
                                    "Camera must be on to capture an image"
                                  );
                                case 25:
                                  (e.prev = 25),
                                    (e.t2 = e.catch(1)),
                                    console.error(
                                      "Error in captureImage::",
                                      e.t2
                                    ),
                                    ie.roomClient._videosdkLogs &&
                                      ie.roomClient._videosdkLogs.pushLogs({
                                        logText: "Error on image capture",
                                        logType: "ERROR",
                                        attributes: { error: e.t2.message },
                                      });
                                case 29:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [
                            [1, 25],
                            [4, 16, 19, 22],
                          ]
                        );
                      })
                    )
                  ),
                  (this.id = r.id),
                  (this.displayName = r.displayName),
                  (this.streams = new Map()),
                  (this.quality = "low"),
                  (this.screenShareQuality = "high"),
                  (this.local = r.local || !1),
                  (this.pinState = { cam: !1, share: !1 }),
                  (this.webcamOn = !1),
                  (this.micOn = !1),
                  (this.mode = r.mode),
                  (this.metaData = r.metaData),
                  (this.eventEmitter = new te.EventEmitter()),
                  (this.participantVideoElements = new Map()),
                  (this.participantAudioElements = new Map()),
                  (this.videoVisible = !1),
                  (this.height = null),
                  (this.width = null),
                  (this.resizeObserver = null);
              },
              [
                {
                  key: "_setPinState",
                  value: function (e) {
                    null != e.cam && (this.pinState.cam = e.cam),
                      null != e.share && (this.pinState.share = e.share);
                  },
                },
                {
                  key: "remove",
                  value: function () {
                    ie.roomClient.removePeer(this.id);
                  },
                },
                {
                  key: "enableMic",
                  value: function () {
                    ie.roomClient.enablePeerMic(this.id);
                  },
                },
                {
                  key: "disableMic",
                  value: function () {
                    ie.roomClient.disablePeerMic(this.id);
                  },
                },
                {
                  key: "enableWebcam",
                  value: function () {
                    ie.roomClient.enablePeerWebcam(this.id);
                  },
                },
                {
                  key: "disableWebcam",
                  value: function () {
                    ie.roomClient.disablePeerWebcam(this.id);
                  },
                },
                {
                  key: "addStream",
                  value: function (e) {
                    if (e) {
                      this.streams.set(e.id, e),
                        "video" !== e.kind ||
                          this.local ||
                          ie.roomClient.setConsumerQuality(e.id, this.quality);
                      var t = new MediaStream();
                      t.addTrack(e.track);
                      try {
                        if (["video", "share"].includes(e.kind)) {
                          var r = this.participantVideoElements.get(e.kind);
                          if (r) {
                            var n = {
                              display: "block",
                              objectFit:
                                "share" === e.kind ? "contain" : "cover",
                              width: "100%",
                            };
                            Object.assign(r.style, n),
                              (r.srcObject = t),
                              r.play().catch(function (t) {
                                console.error(
                                  "Failed to play ".concat(e.kind, " stream:"),
                                  t
                                );
                              }),
                              ("share" === e.kind ||
                                ("video" === e.kind && this.videoVisible)) &&
                                e.resume();
                          }
                        }
                        if (
                          ("audio" === e.kind || "shareAudio" === e.kind) &&
                          !this.local
                        ) {
                          var s = this.participantAudioElements.get(e.kind);
                          s &&
                            ((s.srcObject = t),
                            s.play().catch(function (t) {
                              console.error(
                                "Failed to play ".concat(e.kind, " audio:"),
                                t
                              );
                            }));
                        }
                        this.eventEmitter.emit(ue, e),
                          "video" === e.kind &&
                            !this.local &&
                            this.height &&
                            this.width &&
                            this.setViewPort(this.width, this.height);
                      } catch (e) {
                        console.error("Error in addStream:", e);
                      }
                    } else
                      console.warn("Attempted to add null/undefined stream");
                  },
                },
                {
                  key: "updateStream",
                  value: function (e) {
                    this.streams.set(e.id, e), this.eventEmitter.emit(ue, e);
                  },
                },
                {
                  key: "deleteStream",
                  value: function (e) {
                    var t = this.streams.get(e);
                    if (null != t) {
                      this.streams.delete(e);
                      var r = {
                        video: {
                          collection: this.participantVideoElements,
                          type: "video",
                        },
                        share: {
                          collection: this.participantVideoElements,
                          type: "share",
                        },
                        audio: {
                          collection: this.participantAudioElements,
                          type: "audio",
                        },
                        shareAudio: {
                          collection: this.participantAudioElements,
                          type: "shareAudio",
                        },
                      }[t.kind];
                      if (r) {
                        var n = r.collection.get(r.type);
                        n && (n.style.display = "none");
                      }
                      return this.eventEmitter.emit(pe, t), t;
                    }
                  },
                },
                {
                  key: "streamResumed",
                  value: function (e) {
                    var t = this.streams.get(e);
                    if (
                      null != t &&
                      "video" === t.kind &&
                      this.participantVideoElements.get("video")
                    ) {
                      var r,
                        n =
                          null ===
                            (r = this.participantVideoElements.get("video")) ||
                          void 0 === r
                            ? void 0
                            : r.parentElement.getBoundingClientRect();
                      (!!n && (0, oe.Iy)(n)) ||
                        ((this.videoVisible = !1), t.pause());
                    }
                  },
                },
                {
                  key: "streamPaused",
                  value: function (e) {
                    this.streams.get(e);
                  },
                },
                {
                  key: "updateParticipantMediaState",
                  value: function (e, t) {
                    "audio" == e
                      ? (this.micOn = t)
                      : "video" == e && (this.webcamOn = t),
                      this.eventEmitter.emit(he, {
                        peerId: this.id,
                        kind: e,
                        newStatus: t,
                      });
                  },
                },
                {
                  key: "handleParticipantPause",
                  value: function (e) {
                    if (null != e && e.consumerId) {
                      var t = this.streams.get(e.consumerId);
                      t
                        ? (t.pausedBy = "SUB_MANAGER")
                        : console.warn(
                            "Stream with consumerId ".concat(
                              e.consumerId,
                              " not found."
                            )
                          );
                    }
                    this.eventEmitter.emit(fe, {
                      kind: null == e ? void 0 : e.kind,
                      reason: null == e ? void 0 : e.reason,
                    });
                  },
                },
                {
                  key: "handleParticipantResume",
                  value: function (e) {
                    if (null != e && e.consumerId) {
                      var t = this.streams.get(e.consumerId);
                      t
                        ? (t.pausedBy = void 0)
                        : console.warn(
                            "Stream with consumerId ".concat(
                              e.consumerId,
                              " not found."
                            )
                          );
                    }
                    this.eventEmitter.emit(ge, {
                      kind: null == e ? void 0 : e.kind,
                      reason: null == e ? void 0 : e.reason,
                    });
                  },
                },
                {
                  key: "handleE2EEStateChange",
                  value: function (e) {
                    this.eventEmitter.emit(we, e);
                  },
                },
                {
                  key: "videoQualityChanged",
                  value: function (e, t) {
                    this.eventEmitter.emit(me, {
                      peerId: this.id,
                      prevQuality: e,
                      currentQuality: t,
                    });
                  },
                },
                {
                  key: "setQuality",
                  value: function (e) {
                    if (!this.local) {
                      var t = document.querySelector("#f-".concat(this.id));
                      t &&
                        this.resizeObserver &&
                        this.resizeObserver.unobserve(t),
                        (this.quality = e),
                        (0, q.A)(this.streams.entries()).forEach(function (t) {
                          var r = t[1];
                          "video" === r.kind &&
                            ie.roomClient.setConsumerQuality(r.id, e);
                        });
                    }
                  },
                },
                {
                  key: "setScreenShareQuality",
                  value: function (e) {
                    this.local ||
                      ((this.screenShareQuality = e),
                      this.streams.forEach(function (t) {
                        "share" === t.kind &&
                          ie.roomClient.setConsumerScreenShareQuality(t.id, e);
                      }));
                  },
                },
                {
                  key: "setViewPort",
                  value: function (e, t) {
                    (0, q.A)(this.streams.entries()).forEach(function (r) {
                      var n = r[1];
                      "video" === n.kind &&
                        ie.roomClient.setViewPort(n.producerOrConsumer, e, t);
                    });
                  },
                },
                {
                  key: "pin",
                  value: function (e) {
                    switch (e) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: !0, share: !0 });
                        break;
                      case "CAM":
                        this._setPinState({ cam: !0 });
                        break;
                      case "SHARE":
                        this._setPinState({ share: !0 });
                        break;
                      default:
                        throw new Error("Unknown pin type");
                    }
                    ie.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState,
                    });
                  },
                },
                {
                  key: "unpin",
                  value: function (e) {
                    switch (e) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: !1, share: !1 });
                        break;
                      case "CAM":
                        this._setPinState({ cam: !1 });
                        break;
                      case "SHARE":
                        this._setPinState({ share: !1 });
                        break;
                      default:
                        throw new Error("Unknown unpin type");
                    }
                    ie.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState,
                    });
                  },
                },
                {
                  key: "switchTo",
                  value:
                    ((d = (0, t.A)(
                      c().mark(function e(t) {
                        var r, n, s;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.meetingId),
                                    (n = t.payload),
                                    (s = t.token),
                                    (e.next = 3),
                                    ie.roomClient.switchPeerRoom({
                                      peerId: this.id,
                                      roomId: r,
                                      payload: n,
                                      token: s,
                                    })
                                  );
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e) {
                      return d.apply(this, arguments);
                    }),
                },
                {
                  key: "getVideoStats",
                  value:
                    ((o = (0, t.A)(
                      c().mark(function e() {
                        var t, r, n, s, i;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!this.local) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (
                                    (e.next = 3),
                                    ie.roomClient.getVideoRemoteStats()
                                  );
                                case 3:
                                  return e.abrupt("return", e.sent);
                                case 6:
                                  (t = (0, q.A)(this.streams.entries())),
                                    (r = de(t)),
                                    (e.prev = 8),
                                    r.s();
                                case 10:
                                  if ((n = r.n()).done) {
                                    e.next = 18;
                                    break;
                                  }
                                  if (
                                    ((s = (0, re.A)(n.value, 2)),
                                    (i = s[0]),
                                    "video" != s[1].kind)
                                  ) {
                                    e.next = 16;
                                    break;
                                  }
                                  return (
                                    (e.next = 15),
                                    ie.roomClient.getConsumerRemoteStats(i)
                                  );
                                case 15:
                                  return e.abrupt("return", e.sent);
                                case 16:
                                  e.next = 10;
                                  break;
                                case 18:
                                  e.next = 23;
                                  break;
                                case 20:
                                  (e.prev = 20), (e.t0 = e.catch(8)), r.e(e.t0);
                                case 23:
                                  return (e.prev = 23), r.f(), e.finish(23);
                                case 26:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[8, 20, 23, 26]]
                        );
                      })
                    )),
                    function () {
                      return o.apply(this, arguments);
                    }),
                },
                {
                  key: "getShareStats",
                  value:
                    ((n = (0, t.A)(
                      c().mark(function e() {
                        var t, r, n, s, i;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!this.local) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (
                                    (e.next = 3),
                                    ie.roomClient.getShareRemoteStats()
                                  );
                                case 3:
                                  return e.abrupt("return", e.sent);
                                case 6:
                                  (t = (0, q.A)(this.streams.entries())),
                                    (r = de(t)),
                                    (e.prev = 8),
                                    r.s();
                                case 10:
                                  if ((n = r.n()).done) {
                                    e.next = 18;
                                    break;
                                  }
                                  if (
                                    ((s = (0, re.A)(n.value, 2)),
                                    (i = s[0]),
                                    "share" != s[1].kind)
                                  ) {
                                    e.next = 16;
                                    break;
                                  }
                                  return (
                                    (e.next = 15),
                                    ie.roomClient.getConsumerRemoteStats(i)
                                  );
                                case 15:
                                  return e.abrupt("return", e.sent);
                                case 16:
                                  e.next = 10;
                                  break;
                                case 18:
                                  e.next = 23;
                                  break;
                                case 20:
                                  (e.prev = 20), (e.t0 = e.catch(8)), r.e(e.t0);
                                case 23:
                                  return (e.prev = 23), r.f(), e.finish(23);
                                case 26:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[8, 20, 23, 26]]
                        );
                      })
                    )),
                    function () {
                      return n.apply(this, arguments);
                    }),
                },
                {
                  key: "getShareAudioStats",
                  value:
                    ((r = (0, t.A)(
                      c().mark(function e() {
                        var t, r, n, s, i;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!this.local) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (
                                    (e.next = 3),
                                    ie.roomClient.getShareAudioRemoteStats()
                                  );
                                case 3:
                                  return e.abrupt("return", e.sent);
                                case 6:
                                  (t = (0, q.A)(this.streams.entries())),
                                    (r = de(t)),
                                    (e.prev = 8),
                                    r.s();
                                case 10:
                                  if ((n = r.n()).done) {
                                    e.next = 18;
                                    break;
                                  }
                                  if (
                                    ((s = (0, re.A)(n.value, 2)),
                                    (i = s[0]),
                                    "shareAudio" != s[1].kind)
                                  ) {
                                    e.next = 16;
                                    break;
                                  }
                                  return (
                                    (e.next = 15),
                                    ie.roomClient.getConsumerRemoteStats(i)
                                  );
                                case 15:
                                  return e.abrupt("return", e.sent);
                                case 16:
                                  e.next = 10;
                                  break;
                                case 18:
                                  e.next = 23;
                                  break;
                                case 20:
                                  (e.prev = 20), (e.t0 = e.catch(8)), r.e(e.t0);
                                case 23:
                                  return (e.prev = 23), r.f(), e.finish(23);
                                case 26:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[8, 20, 23, 26]]
                        );
                      })
                    )),
                    function () {
                      return r.apply(this, arguments);
                    }),
                },
                {
                  key: "getAudioStats",
                  value:
                    ((e = (0, t.A)(
                      c().mark(function e() {
                        var t, r, n, s, i;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (this.micOn) {
                                    e.next = 2;
                                    break;
                                  }
                                  return e.abrupt("return", []);
                                case 2:
                                  if (!this.local) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 5),
                                    ie.roomClient.getAudioRemoteStats()
                                  );
                                case 5:
                                  return e.abrupt("return", e.sent);
                                case 8:
                                  (t = (0, q.A)(this.streams.entries())),
                                    (r = de(t)),
                                    (e.prev = 10),
                                    r.s();
                                case 12:
                                  if ((n = r.n()).done) {
                                    e.next = 20;
                                    break;
                                  }
                                  if (
                                    ((s = (0, re.A)(n.value, 2)),
                                    (i = s[0]),
                                    "audio" != s[1].kind)
                                  ) {
                                    e.next = 18;
                                    break;
                                  }
                                  return (
                                    (e.next = 17),
                                    ie.roomClient.getConsumerRemoteStats(i)
                                  );
                                case 17:
                                  return e.abrupt("return", e.sent);
                                case 18:
                                  e.next = 12;
                                  break;
                                case 20:
                                  e.next = 25;
                                  break;
                                case 22:
                                  (e.prev = 22),
                                    (e.t0 = e.catch(10)),
                                    r.e(e.t0);
                                case 25:
                                  return (e.prev = 25), r.f(), e.finish(25);
                                case 28:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[10, 22, 25, 28]]
                        );
                      })
                    )),
                    function () {
                      return e.apply(this, arguments);
                    }),
                },
                {
                  key: "consumeMicStreams",
                  value: function () {
                    ie.roomClient.consumeMicStreams(this.id);
                  },
                },
                {
                  key: "consumeWebcamStreams",
                  value: function () {
                    ie.roomClient.consumeWebcamStreams(this.id);
                  },
                },
                {
                  key: "stopConsumingWebcamStreams",
                  value: function () {
                    ie.roomClient.stopConsumingWebcamStreams(this.id);
                  },
                },
                {
                  key: "stopConsumingMicStreams",
                  value: function () {
                    ie.roomClient.stopConsumingMicStreams(this.id);
                  },
                },
                {
                  key: "renderVideo",
                  value: function (e) {
                    for (
                      var t,
                        r = this,
                        n = e.type,
                        s = void 0 === n ? "video" : n,
                        i = e.maxQuality,
                        o = void 0 === i ? "auto" : i,
                        c = e.videostyle,
                        d = void 0 === c ? {} : c,
                        l = e.containerStyle,
                        u = void 0 === l ? {} : l,
                        p = 0,
                        h = (0, q.A)(this.streams.values());
                      p < h.length;
                      p++
                    ) {
                      var m = h[p];
                      m.kind == s && (t = new MediaStream()).addTrack(m.track);
                    }
                    if (this.participantVideoElements.get(s)) {
                      if (t) {
                        var f = this.participantVideoElements.get(s);
                        f &&
                          ((f.srcObject = t),
                          f.play().catch(function (e) {
                            return console.error("videoElem.play() failed", e);
                          }));
                      }
                      return this.participantVideoElements.get(s);
                    }
                    try {
                      var g = document.createElement("div");
                      g.classList.add(
                        "video-container",
                        "participant-video-".concat(this.id)
                      ),
                        g.setAttribute(
                          "id",
                          "f-"
                            .concat(this.id)
                            .concat("share" === s ? "-share" : "")
                        ),
                        g.style.setProperty("position", "relative"),
                        Object.assign(g.style, u);
                      var v = document.createElement("video");
                      if (
                        (v.setAttribute(
                          "id",
                          "v-"
                            .concat(this.id)
                            .concat("share" === s ? "-share" : "")
                        ),
                        v.setAttribute("playsinline", ""),
                        v.setAttribute("webkit-playsinline", ""),
                        v.setAttribute("x5-playsinline", ""),
                        (v.playsinline = !0),
                        (v.muted = !0),
                        (v.autoplay = !0),
                        (v.onerror = function (e) {
                          console.log(e, "participant video error");
                        }),
                        Object.assign(
                          v.style,
                          (function (e) {
                            for (var t = 1; t < arguments.length; t++) {
                              var r = null != arguments[t] ? arguments[t] : {};
                              t % 2
                                ? ce(Object(r), !0).forEach(function (t) {
                                    (0, a.A)(e, t, r[t]);
                                  })
                                : Object.getOwnPropertyDescriptors
                                ? Object.defineProperties(
                                    e,
                                    Object.getOwnPropertyDescriptors(r)
                                  )
                                : ce(Object(r)).forEach(function (t) {
                                    Object.defineProperty(
                                      e,
                                      t,
                                      Object.getOwnPropertyDescriptor(r, t)
                                    );
                                  });
                            }
                            return e;
                          })(
                            {
                              width: "100%",
                              height: "100%",
                              objectFit: "share" === s ? "contain" : "cover",
                            },
                            d
                          )
                        ),
                        t &&
                          ((v.srcObject = t),
                          v
                            .play()
                            .then(function (e) {
                              console.log("videoElem.play() success", e);
                            })
                            .catch(function (e) {
                              return console.error(
                                "videoElem.play() failed",
                                e
                              );
                            })),
                        g.appendChild(v),
                        this.participantVideoElements.set(s, v),
                        (this.videoVisible = !1),
                        !this.local && "video" === s)
                      ) {
                        var _ = (0, oe.sg)(function (e) {
                          var t,
                            n = de(e);
                          try {
                            for (n.s(); !(t = n.n()).done; ) {
                              if (t.value.intersectionRatio > 0) {
                                r.videoVisible = !0;
                                for (
                                  var s = 0, i = (0, q.A)(r.streams.values());
                                  s < i.length;
                                  s++
                                ) {
                                  var a = i[s];
                                  "video" == a.kind &&
                                    "SUB_MANAGER" !== a.pausedBy &&
                                    a.resume();
                                }
                              } else {
                                r.videoVisible = !1;
                                for (
                                  var o = 0, c = (0, q.A)(r.streams.values());
                                  o < c.length;
                                  o++
                                ) {
                                  var d = c[o];
                                  "video" == d.kind && d.pause();
                                }
                              }
                            }
                          } catch (e) {
                            n.e(e);
                          } finally {
                            n.f();
                          }
                        }, 500);
                        if (
                          (new IntersectionObserver(_, {
                            root: null,
                            rootMargin: "0px",
                            threshold: 0,
                          }).observe(g),
                          "auto" == o && "video" === s)
                        ) {
                          var y = (0, oe.sg)(function (e) {
                              var t = e[0].contentRect,
                                n = t.width,
                                s = t.height;
                              n > 0 &&
                                s > 0 &&
                                ((r.height = s),
                                (r.width = n),
                                r.setViewPort(n, s));
                            }, 500),
                            b = new ResizeObserver(y);
                          b.observe(g), (this.resizeObserver = b);
                        }
                      }
                      return (
                        "video" !== s ||
                          "auto" === o ||
                          this.local ||
                          this.setQuality(o),
                        g
                      );
                    } catch (e) {
                      console.log("Render video Exception", e);
                    }
                  },
                },
                {
                  key: "renderAudio",
                  value: function (e) {
                    var t = e.type,
                      r = void 0 === t ? "audio" : t;
                    if (this.local) return null;
                    try {
                      if (this.participantAudioElements.get(r)) {
                        var n = this.participantAudioElements.get(r),
                          s = this.getAudioStream(r);
                        return (
                          s &&
                            n &&
                            ((n.srcObject = s),
                            n.play().catch(function (e) {
                              return console.error(
                                "Failed to play existing audio:",
                                e
                              );
                            })),
                          n
                        );
                      }
                      var i = document.createElement("audio");
                      i.setAttribute("id", "a-".concat(this.id, "-").concat(r)),
                        (i.autoplay = !1),
                        (i.playsInline = !0),
                        (i.controls = !1),
                        (i.style.display = "none"),
                        (i.onerror = function (e) {
                          return console.log("Audio element error:", e);
                        });
                      var a = this.getAudioStream(r);
                      return (
                        a &&
                          ((i.srcObject = a),
                          i.play().catch(function (e) {
                            return console.error(
                              "Failed to play new audio:",
                              e
                            );
                          })),
                        this.participantAudioElements.set(r, i),
                        i
                      );
                    } catch (e) {
                      return console.error("Render audio exception:", e), null;
                    }
                  },
                },
                {
                  key: "getAudioStream",
                  value: function () {
                    var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : "audio",
                      t = (0, q.A)(this.streams.values()).find(function (t) {
                        return t.kind === e;
                      });
                    if (t) {
                      var r = new MediaStream();
                      return r.addTrack(t.track), t.resume(), r;
                    }
                    return null;
                  },
                },
                {
                  key: "addProducer",
                  value: function (e) {
                    this.eventEmitter.emit(ve, e);
                  },
                },
                {
                  key: "removeProducer",
                  value: function (e) {
                    this.eventEmitter.emit(_e, e);
                  },
                },
                {
                  key: "addConsumer",
                  value: function (e) {
                    this.eventEmitter.emit(ye, e);
                  },
                },
                {
                  key: "removeConsumer",
                  value: function (e) {
                    this.eventEmitter.emit(be, e);
                  },
                },
                {
                  key: "on",
                  value: function (e, t) {
                    switch (e) {
                      case ue:
                      case pe:
                      case he:
                      case me:
                      case fe:
                      case ge:
                      case ve:
                      case _e:
                      case ye:
                      case be:
                      case we:
                        this.eventEmitter.on(e, t);
                        break;
                      default:
                        throw new Error(
                          "Invalid event type from participant onn"
                        );
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    switch (e) {
                      case ue:
                      case pe:
                      case he:
                      case me:
                      case fe:
                      case ge:
                      case ve:
                      case _e:
                      case ye:
                      case be:
                      case we:
                        this.eventEmitter.off(e, t);
                        break;
                      default:
                        throw new Error(
                          "Invalid event type from participant off"
                        );
                    }
                  },
                },
              ]
            );
            var e, r, n, o, d;
          })(),
          Re = r(388),
          ke = r(3954),
          Ee = r(5501),
          Ce = {
            CHARACTER_SPEAKING: "CHARACTER_SPEAKING",
            CHARACTER_THINKING: "CHARACTER_THINKING",
            CHARACTER_LISTENING: "CHARACTER_LISTENING",
          },
          Te = r(2107);
        function Pe() {
          try {
            var e = !Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function () {})
            );
          } catch (e) {}
          return (Pe = function () {
            return !!e;
          })();
        }
        function Oe(e, t, r) {
          xe(e, t), t.set(e, r);
        }
        function xe(e, t) {
          if (t.has(e))
            throw new TypeError(
              "Cannot initialize the same private elements twice on an object"
            );
        }
        function De(e, t) {
          return e.get(Ae(e, t));
        }
        function Ie(e, t, r) {
          return e.set(Ae(e, t), r), r;
        }
        function Ae(e, t, r) {
          if ("function" == typeof e ? e === t : e.has(t))
            return arguments.length < 3 ? t : r;
          throw new TypeError("Private element is not present on this object");
        }
        var Me = "stream-enabled",
          Le = "stream-disabled",
          Ne = "character-joined",
          je = "character-left",
          Be = "media-status-changed",
          Fe = "video-quality-changed",
          Ue = "character-state-changed",
          We = "character-message",
          qe = "user-message",
          Ve = "data",
          He = new WeakMap(),
          ze = new WeakMap(),
          Ge = new WeakMap(),
          Ke = new WeakMap(),
          $e = new WeakMap(),
          Je = new WeakMap(),
          Qe = new WeakMap(),
          Ye = new WeakSet(),
          Xe = (function (e) {
            function r(e) {
              var n, i, o, d;
              return (
                (0, s.A)(this, r),
                (i = this),
                (o = r),
                (d = [
                  {
                    id: e.id,
                    displayName: e.displayName,
                    mode: Te.nI.SEND_AND_RECV,
                    metaData: e.metaData,
                  },
                ]),
                (o = (0, ke.A)(o)),
                (function (e, t) {
                  xe(e, t), t.add(e);
                })(
                  (n = (0, Re.A)(
                    i,
                    Pe()
                      ? Reflect.construct(o, d || [], (0, ke.A)(i).constructor)
                      : o.apply(i, d)
                  )),
                  Ye
                ),
                Oe(n, He, void 0),
                Oe(n, ze, void 0),
                Oe(n, Ge, void 0),
                Oe(n, Ke, void 0),
                Oe(n, $e, void 0),
                Oe(n, Je, void 0),
                Oe(n, Qe, void 0),
                (0, a.A)(
                  n,
                  "captureImage",
                  (0, t.A)(
                    c().mark(function e() {
                      var t,
                        r = arguments;
                      return c().wrap(function (e) {
                        for (;;)
                          switch ((e.prev = e.next)) {
                            case 0:
                              throw (
                                ((t =
                                  r.length > 0 && void 0 !== r[0] ? r[0] : {})
                                  .height,
                                t.width,
                                new Error(
                                  "captureImage method is not supported on character"
                                ))
                              );
                            case 2:
                            case "end":
                              return e.stop();
                          }
                      }, e);
                    })
                  )
                ),
                Ie($e, n, e.interactionId || null),
                (n.id = e.id || null),
                Ie(He, n, e.characterRole),
                Ie(ze, n, e.characterMode),
                Ie(Ge, n, e.knowledgeBases || []),
                (n.displayName = e.displayName),
                Ie(Ke, n, e.language),
                Ie(Je, n, e.state || Ce.CHARACTER_LISTENING),
                Ie(Qe, n, e.roomClient),
                n
              );
            }
            return (
              (0, Ee.A)(r, e),
              (0, i.A)(r, [
                {
                  key: "join",
                  value:
                    ((p = (0, t.A)(
                      c().mark(function e() {
                        var t;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    De(Qe, this).joinCharacter({
                                      interactionId: De($e, this),
                                      characterId: this.id,
                                      characterRole: De(He, this),
                                      displayName: this.displayName,
                                      characterMode: De(ze, this),
                                      knowledgeBases: De(Ge, this),
                                      language: De(Ke, this),
                                      metaData: this.metaData,
                                    })
                                  );
                                case 2:
                                  (t = e.sent) &&
                                    ((this.id = t.characterId),
                                    (this.displayName = t.displayName),
                                    Ie(ze, this, t.characterMode),
                                    Ie(He, this, t.characterRole),
                                    Ie($e, this, t.interactionId),
                                    Ie(Ge, this, t.knowledgeBases),
                                    Ie(Ke, this, t.language),
                                    De(Qe, this)._eventEmitter.emit(
                                      "INIT_CHARACTER",
                                      this
                                    ));
                                case 4:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return p.apply(this, arguments);
                    }),
                },
                {
                  key: "leave",
                  value:
                    ((u = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), De(Qe, this).removeCharacter()
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return u.apply(this, arguments);
                    }),
                },
                {
                  key: "remove",
                  value:
                    ((l = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(function (e) {
                          for (;;)
                            switch ((e.prev = e.next)) {
                              case 0:
                                throw new Error(
                                  "remove method is not supported on character"
                                );
                              case 1:
                              case "end":
                                return e.stop();
                            }
                        }, e);
                      })
                    )),
                    function () {
                      return l.apply(this, arguments);
                    }),
                },
                {
                  key: "sendMessage",
                  value:
                    ((d = (0, t.A)(
                      c().mark(function e(t) {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    De(Qe, this).sendCharacterMessage({
                                      interactionId: De($e, this),
                                      text: t,
                                    })
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e) {
                      return d.apply(this, arguments);
                    }),
                },
                {
                  key: "handleCharacterStateChanged",
                  value: function (e) {
                    Object.keys(Ce).includes(e.status) &&
                      (Ae(Ye, this, Ze).call(this, e.status),
                      this.eventEmitter.emit(Ue, e));
                  },
                },
                {
                  key: "handleCharacterMessage",
                  value: function (e) {
                    this.eventEmitter.emit(We, e);
                  },
                },
                {
                  key: "interrupt",
                  value:
                    ((o = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    De(Qe, this).interruptCharacter({
                                      interactionId: De($e, this),
                                    })
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return o.apply(this, arguments);
                    }),
                },
                {
                  key: "handleUserMessage",
                  value: function (e) {
                    this.eventEmitter.emit(qe, e);
                  },
                },
                {
                  key: "handleCharacterData",
                  value: function (e) {
                    var t = e.topic,
                      r = e.data;
                    this.eventEmitter.emit(Ve, t, r);
                  },
                },
                {
                  key: "enableMic",
                  value: function () {
                    De(Qe, this).enablePeerMic(this.id);
                  },
                },
                {
                  key: "disableMic",
                  value: function () {
                    De(Qe, this).disablePeerMic(this.id);
                  },
                },
                {
                  key: "enableWebcam",
                  value: function () {
                    De(Qe, this).enablePeerWebcam(this.id);
                  },
                },
                {
                  key: "disableWebcam",
                  value: function () {
                    De(Qe, this).disablePeerWebcam(this.id);
                  },
                },
                {
                  key: "updateStream",
                  value: function (e) {
                    throw new Error(
                      "updateStream method is not supported on character"
                    );
                  },
                },
                {
                  key: "switchTo",
                  value:
                    ((n = (0, t.A)(
                      c().mark(function e(t) {
                        return c().wrap(function (e) {
                          for (;;)
                            switch ((e.prev = e.next)) {
                              case 0:
                                throw (
                                  (t.meetingId,
                                  t.payload,
                                  t.token,
                                  new Error(
                                    "switchTo method is not supported on character"
                                  ))
                                );
                              case 2:
                              case "end":
                                return e.stop();
                            }
                        }, e);
                      })
                    )),
                    function (e) {
                      return n.apply(this, arguments);
                    }),
                },
                {
                  key: "pin",
                  value: function (e) {
                    throw new Error("pin method is not supported on character");
                  },
                },
                {
                  key: "on",
                  value: function (e, t) {
                    switch (e) {
                      case Me:
                      case Le:
                      case Ne:
                      case je:
                      case Be:
                      case Fe:
                      case Ue:
                      case We:
                      case qe:
                      case Ve:
                        this.eventEmitter.on(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    switch (e) {
                      case Me:
                      case Le:
                      case Ne:
                      case je:
                      case Be:
                      case Fe:
                      case Ue:
                      case We:
                      case qe:
                      case Ve:
                        this.eventEmitter.off(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
                {
                  key: "state",
                  get: function () {
                    return De(Je, this);
                  },
                },
                {
                  key: "knowledgeBases",
                  get: function () {
                    return De(Ge, this);
                  },
                },
                {
                  key: "characterMode",
                  get: function () {
                    return De(ze, this);
                  },
                },
                {
                  key: "characterRole",
                  get: function () {
                    return De(He, this);
                  },
                },
                {
                  key: "interactionId",
                  get: function () {
                    return De($e, this);
                  },
                },
                {
                  key: "language",
                  get: function () {
                    return De(Ke, this);
                  },
                },
              ])
            );
            var n, o, d, l, u, p;
          })(Se);
        function Ze(e) {
          Ie(Je, this, e);
        }
        function et(e, t, r) {
          (function (e, t) {
            if (t.has(e))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          })(e, t),
            t.set(e, r);
        }
        function tt(e, t, r) {
          if ("function" == typeof e ? e === t : e.has(t))
            return arguments.length < 3 ? t : r;
          throw new TypeError("Private element is not present on this object");
        }
        var rt = new WeakMap(),
          nt = (function () {
            return (0, i.A)(
              function e(t, r) {
                var n,
                  i,
                  a,
                  o = t.id,
                  c = t.displayName;
                (0, s.A)(this, e),
                  et(this, rt, void 0),
                  (this.id = o),
                  (this.displayName = c),
                  (i = this),
                  (a = r),
                  (n = rt).set(tt(n, i), a);
              },
              [
                {
                  key: "switchTo",
                  value:
                    ((e = (0, t.A)(
                      c().mark(function e(t) {
                        var r, n, s;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.meetingId),
                                    (n = t.payload),
                                    (s = t.token),
                                    (e.next = 3),
                                    ie.roomClient.connectionSwitchPeerRoom({
                                      roomId: r,
                                      connectionRoomId:
                                        ((i = rt), (a = this), i.get(tt(i, a))),
                                      payload: n,
                                      peerId: this.id,
                                      token: s,
                                    })
                                  );
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                            var i, a;
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (t) {
                      return e.apply(this, arguments);
                    }),
                },
              ]
            );
            var e;
          })(),
          st = "participant-joined",
          it = "participant-left",
          at = "chat-message",
          ot = (function () {
            return (0, i.A)(
              function e(t, r) {
                var n = this;
                (0, s.A)(this, e),
                  (this.eventEmitter = new te.EventEmitter()),
                  (this.id = t),
                  (this.participants = new Map()),
                  r.forEach(function (e) {
                    n.participants.set(e.id, new nt(e, n.id));
                  });
              },
              [
                {
                  key: "participantJoin",
                  value: function (e) {
                    var t = new nt(e, this.id);
                    this.participants.set(e.id, t),
                      this.eventEmitter.emit(st, t);
                  },
                },
                {
                  key: "participantLeft",
                  value: function (e) {
                    this.participants.delete(e), this.eventEmitter.emit(it, e);
                  },
                },
                {
                  key: "sendChatMessage",
                  value: function (e) {
                    ie.roomClient.connectionSendChatMessage({
                      roomId: this.id,
                      message: e,
                    });
                  },
                },
                {
                  key: "sendChatMessageEvent",
                  value: function (e) {
                    var t = e.participantId,
                      r = e.message;
                    this.eventEmitter.emit(at, {
                      participantId: t,
                      message: r,
                    });
                  },
                },
                {
                  key: "end",
                  value:
                    ((e = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    ie.roomClient.connectionEndMeeting({
                                      roomId: this.id,
                                    })
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return e.apply(this, arguments);
                    }),
                },
                {
                  key: "on",
                  value: function (e, t) {
                    switch (e) {
                      case st:
                      case it:
                      case at:
                        this.eventEmitter.on(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    switch (e) {
                      case st:
                      case it:
                      case at:
                        this.eventEmitter.off(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
              ]
            );
            var e;
          })(),
          ct = (function () {
            return (0, i.A)(
              function e(t) {
                var r = t.roomId,
                  n = t.peers,
                  i = t.payload;
                (0, s.A)(this, e),
                  (this.id = r),
                  (this.payload = i),
                  (this.meeting = new ot(r, n));
              },
              [
                {
                  key: "close",
                  value: function () {
                    ie.roomClient.closeConnection(this.id);
                  },
                },
              ]
            );
          })();
        function dt(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function lt(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? dt(Object(r), !0).forEach(function (t) {
                  (0, a.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : dt(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        function ut(e, t) {
          if (t.has(e))
            throw new TypeError(
              "Cannot initialize the same private elements twice on an object"
            );
        }
        function pt(e, t) {
          return e.get(ht(e, t));
        }
        function ht(e, t, r) {
          if ("function" == typeof e ? e === t : e.has(t))
            return arguments.length < 3 ? t : r;
          throw new TypeError("Private element is not present on this object");
        }
        var mt = "error",
          ft = "meeting-joined",
          gt = "meeting-left",
          vt = "participant-mode-changed",
          _t = "participant-joined",
          yt = "participant-left",
          bt = "speaker-changed",
          wt = "presenter-changed",
          St = "main-participant-changed",
          Rt = "chat-message",
          kt = "entry-requested",
          Et = "entry-responded",
          Ct = "recording-state-changed",
          Tt = "recording-started",
          Pt = "recording-stopped",
          Ot = "livestream-state-changed",
          xt = "livestream-started",
          Dt = "livestream-stopped",
          It = "hls-state-changed",
          At = "hls-started",
          Mt = "hls-stopped",
          Lt = "whiteboard-started",
          Nt = "whiteboard-stopped",
          jt = "video-state-changed",
          Bt = "video-seeked",
          Ft = "mic-requested",
          Ut = "webcam-requested",
          Wt = "stream-enabled",
          qt = "stream-disabled",
          Vt = "pin-state-changed",
          Ht = "connection-open",
          zt = "connection-close",
          Gt = "switch-meeting",
          Kt = "meeting-state-changed",
          $t = "paused-all-streams",
          Jt = "resumed-all-streams",
          Qt = "transcription-state-changed",
          Yt = "transcription-text",
          Xt = "character-joined",
          Zt = "character-left",
          er = new WeakMap(),
          tr = new WeakSet(),
          rr = (function () {
            return (0, i.A)(
              function r(n, i, o) {
                var d,
                  l,
                  u,
                  p,
                  h,
                  m = this;
                (0, s.A)(this, r),
                  ut((d = this), (l = tr)),
                  l.add(d),
                  (function (e, t, r) {
                    ut(e, t), t.set(e, r);
                  })(this, er, void 0),
                  (0, a.A)(this, "pubSub", {
                    publish:
                      ((h = (0, t.A)(
                        c().mark(function t(r, n, s, i) {
                          return c().wrap(function (t) {
                            for (;;)
                              switch ((t.prev = t.next)) {
                                case 0:
                                  if (null == i) {
                                    t.next = 3;
                                    break;
                                  }
                                  if ("object" == (0, e.A)(i)) {
                                    t.next = 3;
                                    break;
                                  }
                                  throw new Error(
                                    '"payload" can only be object.'
                                  );
                                case 3:
                                  return (
                                    (t.next = 5),
                                    m.roomClient.pubsubPublish(r, n, s, i)
                                  );
                                case 5:
                                case "end":
                                  return t.stop();
                              }
                          }, t);
                        })
                      )),
                      function (e, t, r, n) {
                        return h.apply(this, arguments);
                      }),
                    subscribe:
                      ((p = (0, t.A)(
                        c().mark(function e(t, r) {
                          var n;
                          return c().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!pt(er, m).listeners(t).includes(r)) {
                                    e.next = 2;
                                    break;
                                  }
                                  return e.abrupt("return");
                                case 2:
                                  return (
                                    (e.next = 4),
                                    m.roomClient.pubsubSubscribe(t)
                                  );
                                case 4:
                                  return (
                                    (n = e.sent),
                                    pt(er, m).on(t, r),
                                    e.abrupt("return", n)
                                  );
                                case 7:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t) {
                        return p.apply(this, arguments);
                      }),
                    unsubscribe:
                      ((u = (0, t.A)(
                        c().mark(function e(t, r) {
                          return c().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    (pt(er, m).off(t, r),
                                    0 != pt(er, m).listeners(t).length)
                                  ) {
                                    e.next = 4;
                                    break;
                                  }
                                  return (
                                    (e.next = 4),
                                    m.roomClient.pubsubUnsubscribe(t)
                                  );
                                case 4:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t) {
                        return u.apply(this, arguments);
                      }),
                  }),
                  (0, a.A)(
                    this,
                    "uploadBase64File",
                    (function () {
                      var e = (0, t.A)(
                        c().mark(function e(t) {
                          var r, n, s, i, a, o, d;
                          return c().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r = t.base64Data),
                                      (n = t.token),
                                      (s = t.fileName),
                                      (e.prev = 1),
                                      r && n && s)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    throw new Error(
                                      "please provide base64Data, token and fileName"
                                    );
                                  case 4:
                                    return (
                                      (i = "https://"
                                        .concat(
                                          m.baseUrl,
                                          "/base64-upload?roomId="
                                        )
                                        .concat(m.id)),
                                      (a = { fileName: s, base64Data: r }),
                                      (e.next = 8),
                                      fetch(i, {
                                        method: "POST",
                                        body: JSON.stringify(a),
                                        headers: {
                                          "Content-Type": "application/json",
                                          Authorization: n,
                                        },
                                      })
                                    );
                                  case 8:
                                    return (
                                      (o = e.sent), (e.next = 11), o.json()
                                    );
                                  case 11:
                                    return (
                                      (d = e.sent), e.abrupt("return", d.url)
                                    );
                                  case 15:
                                    (e.prev = 15),
                                      (e.t0 = e.catch(1)),
                                      console.error(
                                        "Error while Uploading Base64 File::",
                                        e.t0
                                      ),
                                      m.roomClient._videosdkLogs &&
                                        m.roomClient._videosdkLogs.pushLogs({
                                          logText:
                                            "Error while Uploading Base64 File",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 19:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            null,
                            [[1, 15]]
                          );
                        })
                      );
                      return function (t) {
                        return e.apply(this, arguments);
                      };
                    })()
                  ),
                  (0, a.A)(
                    this,
                    "fetchBase64File",
                    (function () {
                      var e = (0, t.A)(
                        c().mark(function e(t) {
                          var r, n, s, i, a;
                          return c().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r = t.url),
                                      (n = t.token),
                                      (e.prev = 1),
                                      r && n)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    throw new Error(
                                      "please provide url and token"
                                    );
                                  case 4:
                                    return (
                                      (e.next = 6),
                                      fetch(r, {
                                        headers: { Authorization: n },
                                      })
                                    );
                                  case 6:
                                    return (
                                      (s = e.sent),
                                      (e.next = 9),
                                      s.arrayBuffer()
                                    );
                                  case 9:
                                    return (
                                      (i = e.sent),
                                      (a = window.btoa(
                                        new Uint8Array(i).reduce(function (
                                          e,
                                          t
                                        ) {
                                          return e + String.fromCharCode(t);
                                        },
                                        "")
                                      )),
                                      e.abrupt("return", a)
                                    );
                                  case 14:
                                    (e.prev = 14),
                                      (e.t0 = e.catch(1)),
                                      console.error(
                                        "Error while fetching Base64 File::",
                                        e.t0
                                      ),
                                      m.roomClient._videosdkLogs &&
                                        m.roomClient._videosdkLogs.pushLogs({
                                          logText:
                                            "Error while fetching Base64 File",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 18:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            null,
                            [[1, 14]]
                          );
                        })
                      );
                      return function (t) {
                        return e.apply(this, arguments);
                      };
                    })()
                  ),
                  (this.id = n),
                  (this.roomClient = o),
                  (this.activeSpeakerId = null),
                  (this.activePresenterId = null),
                  (this.mainParticipantId = null),
                  (this.connections = new Map()),
                  (this.localParticipant = i),
                  (this.participants = new Map()),
                  (this.characters = new Map()),
                  (this.baseUrl = null),
                  (this.livestreamState = "LIVESTREAM_STOPPED"),
                  (this.recordingState = "RECORDING_STOPPED"),
                  (this.hlsState = "HLS_STOPPED"),
                  (this.transcriptionState = "TRANSCRIPTION_STOPPED"),
                  (this.hlsUrls = {
                    downstreamUrl: null,
                    playbackHlsUrl: null,
                    livestreamUrl: null,
                  }),
                  (this.messages = []),
                  (this.eventEmitter = new te.EventEmitter()),
                  (function (e, t, r) {
                    e.set(ht(e, t), r);
                  })(er, this, new te.EventEmitter()),
                  this.eventEmitter.setMaxListeners(9999),
                  pt(er, this).setMaxListeners(9999),
                  this.roomClient.on("ERROR", function (e) {
                    return m.handleError(e);
                  }),
                  this.roomClient.on("ADD_PEER", function (e) {
                    return m.handlePeerAdd(e);
                  }),
                  this.roomClient.on("REMOVE_PEER", function (e) {
                    return m.handlePeerRemove(e);
                  }),
                  this.roomClient.on("ADD_PRODUCER", function (e) {
                    return m.handleProducerAdd(e);
                  }),
                  this.roomClient.on("UPDATE_PRODUCER", function (e) {
                    return m.handleUpdateProducer(e);
                  }),
                  this.roomClient.on("REMOVE_PRODUCER", function (e) {
                    return m.handleProducerRemove(e);
                  }),
                  this.roomClient.on("ADD_CONSUMER", function (e) {
                    return m.handleConsumerAdd(e);
                  }),
                  this.roomClient.on("REMOVE_CONSUMER", function (e) {
                    return m.handleConsumerRemove(e);
                  }),
                  this.roomClient.on("CONSUMER_RESUMED", function (e) {
                    return m.handleConsumerResume(e);
                  }),
                  this.roomClient.on("CONSUMER_PAUSED", function (e) {
                    return m.handleConsumerPause(e);
                  }),
                  this.roomClient.on(
                    "PARTICIPANT_MEDIA_STATE_CHANGED",
                    function (e) {
                      return m.handleParticipantMediaStateChanged(e);
                    }
                  ),
                  this.roomClient.on("CHAT_MESSAGE", function (e) {
                    return m.handleNewChatMessage(e);
                  }),
                  this.roomClient.on("SET_ROOM_ACTIVE_SPEAKER", function (e) {
                    return m.handleSpeakerChange(e);
                  }),
                  this.roomClient.on("ENTRY_REQUESTED", function (e) {
                    return m.handleEntryRequested(e);
                  }),
                  this.roomClient.on("ENTRY_RESPONDED", function (e) {
                    return m.handleEntryResponded(e);
                  }),
                  this.roomClient.on("MEETING_JOINED", function (e) {
                    return m.handleMeetingJoined(e);
                  }),
                  this.roomClient.on("MEETING_LEFT", function (e) {
                    return m.handleMeetingLeft(e);
                  }),
                  this.roomClient.on("RECORDING_STATE_CHANGED", function (e) {
                    m.handleRecordingStateChanged(e);
                  }),
                  this.roomClient.on("RECORDING_STARTED", function (e) {
                    return m.handleRecordingStarted(e);
                  }),
                  this.roomClient.on("RECORDING_STOPPED", function (e) {
                    return m.handleRecordingStopped(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STATE_CHANGED", function (e) {
                    m.handleLivestreamStateChanged(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STARTED", function (e) {
                    return m.handleLivestreamStarted(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STOPPED", function (e) {
                    return m.handleLivestreamStopped(e);
                  }),
                  this.roomClient.on("HLS_STATE_CHANGED", function (e) {
                    m.handleHlsStateChanged(e);
                  }),
                  this.roomClient.on("HLS_STARTED", function (e) {
                    m.handleHlsStarted(e);
                  }),
                  this.roomClient.on("HLS_STOPPED", function (e) {
                    m.handleHlsStopped(e);
                  }),
                  this.roomClient.on(
                    "TRANSCRIPTION_STATE_CHANGED",
                    function (e) {
                      m.handleTranscriptionStateChanged(e);
                    }
                  ),
                  this.roomClient.on("TRANSCRIPTION_TEXT", function (e) {
                    m.handleTranscriptionText(e);
                  }),
                  this.roomClient.on("SUB_MANAGER_RESUMED", function (e) {
                    m.handleParticipantResumeBySubManager(e);
                  }),
                  this.roomClient.on("SUB_MANAGER_PAUSED", function (e) {
                    m.handleParticipantPausedBySubManager(e);
                  }),
                  this.roomClient.on("WHITEBOARD_STARTED", function (e) {
                    return m.handleWhiteboardStarted(e);
                  }),
                  this.roomClient.on("WHITEBOARD_STOPPED", function (e) {
                    return m.handleWhiteboardStopped(e);
                  }),
                  this.roomClient.on("VIDEO_STATE_CHANGED", function (e) {
                    return m.handleVideoStateChanged(e);
                  }),
                  this.roomClient.on("VIDEO_SEEKED", function (e) {
                    return m.handleVideoSeeked(e);
                  }),
                  this.roomClient.on("PIN_STATE_CHANGED", function (e) {
                    m.handlePinStateChanged(e);
                  }),
                  this.roomClient.on("MIC_REQUESTED", function (e) {
                    return m.handleMicRequested(e);
                  }),
                  this.roomClient.on("WEBCAM_REQUESTED", function (e) {
                    return m.handleWebcamRequested(e);
                  }),
                  this.roomClient.on("CONNECTION_OPEN", function (e) {
                    return m.handleConnectionOpen(e);
                  }),
                  this.roomClient.on("CONNECTION_CLOSE", function (e) {
                    return m.handleConnectionClose(e);
                  }),
                  this.roomClient.on(
                    "CONNECTION_PARTICIPANT_JOIN",
                    function (e) {
                      return m.handleConnectionParticipantJoin(e);
                    }
                  ),
                  this.roomClient.on("SWITCH_ROOM", function (e) {
                    return m.handleSwitchMeeting(e);
                  }),
                  this.roomClient.on("CONNECTION_CHAT_MESSAGE", function (e) {
                    return m.handleConnectionChatMessage(e);
                  }),
                  this.roomClient.on(
                    "CONNECTION_PARTICIPANT_LEFT",
                    function (e) {
                      m.handleConnectionParticipantLeft(e);
                    }
                  ),
                  this.roomClient.on("PUBSUB_MESSAGE", function (e) {
                    return ht(tr, m, nr).call(m, e);
                  }),
                  this.roomClient.on("PEER_MODE_CHANGED", function (e) {
                    return ht(tr, m, sr).call(m, e);
                  }),
                  this.updateMainParticipant(this.localParticipant.id),
                  this.roomClient.on("MEETING_STATE_CHANGED", function (e) {
                    return m.handleMeetingStateChanged(e);
                  }),
                  this.roomClient.on("ALL_CONSUMERS_PAUSED", function (e) {
                    return m.handleConsumersPaused(e);
                  }),
                  this.roomClient.on("ALL_CONSUMERS_RESUMED", function (e) {
                    return m.handleConsumersResumed(e);
                  }),
                  this.roomClient.on("VIDEO_QUALITY_CHANGED", function (e) {
                    return m.handleVideoQualityChanged(e);
                  }),
                  this.roomClient.on("ADD_CHARACTER", function (e) {
                    return m.handleAddCharacter(e);
                  }),
                  this.roomClient.on("INIT_CHARACTER", function (e) {
                    return m.handleInitCharacter(e);
                  }),
                  this.roomClient.on("REMOVE_CHARACTER", function (e) {
                    return m.handleRemoveCharacter(e);
                  }),
                  this.roomClient.on("CHARACTER_STATE_CHANGED", function (e) {
                    return m.handleCharacterStateChanged(e);
                  }),
                  this.roomClient.on("CHARACTER_MESSAGE", function (e) {
                    return m.handleCharacterMessage(e);
                  }),
                  this.roomClient.on("USER_MESSAGE", function (e) {
                    return m.handleUserMessage(e);
                  }),
                  this.roomClient.on("CHARACTER_DATA", function (e) {
                    return m.handleOnCharacterData(e);
                  }),
                  this.roomClient.on("E2EE_STATE_CHANGE", function (e) {
                    return m.handleE2EEStateChange(e);
                  }),
                  this.roomClient.on(
                    "REMOVE_PARTICIPANTS_FOR_SWITCH_MEETING",
                    function () {
                      return m.handleOnRemoveCurrentMeetingParticipant();
                    }
                  );
              },
              [
                {
                  key: "handleError",
                  value: function (e) {
                    this.eventEmitter.listenerCount(mt) > 0 &&
                      this.eventEmitter.emit(mt, e);
                  },
                },
                {
                  key: "join",
                  value: function () {
                    this.roomClient.join();
                  },
                },
                {
                  key: "changeMode",
                  value: function (e) {
                    this.roomClient.changeMode(e);
                  },
                },
                {
                  key: "leave",
                  value: function () {
                    this.roomClient.close({ sendLeft: !0 });
                  },
                },
                {
                  key: "end",
                  value: function () {
                    this.roomClient.closeRoom();
                  },
                },
                {
                  key: "respondEntry",
                  value: function (e, t) {
                    this.roomClient.respondEntry(e, t);
                  },
                },
                {
                  key: "pinnedParticipants",
                  get: function () {
                    return this.roomClient._pinnedParticipants;
                  },
                },
                {
                  key: "muteMic",
                  value: function () {
                    this.roomClient.disableMic();
                  },
                },
                {
                  key: "unmuteMic",
                  value: function () {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : void 0;
                    this.roomClient.enableMic(e);
                  },
                },
                {
                  key: "publishAudio",
                  value:
                    ((v = (0, t.A)(
                      c().mark(function e() {
                        var t,
                          r = arguments;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (t =
                                      r.length > 0 && void 0 !== r[0]
                                        ? r[0]
                                        : void 0),
                                    (e.next = 3),
                                    this.roomClient.enableMic(t)
                                  );
                                case 3:
                                  return e.abrupt("return");
                                case 4:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return v.apply(this, arguments);
                    }),
                },
                {
                  key: "unpublishAudio",
                  value:
                    ((g = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), this.roomClient.disableMic()
                                  );
                                case 2:
                                  return e.abrupt("return");
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return g.apply(this, arguments);
                    }),
                },
                {
                  key: "disableWebcam",
                  value: function () {
                    this.roomClient.disableWebcam();
                  },
                },
                {
                  key: "enableWebcam",
                  value: function () {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : void 0;
                    this.roomClient.enableWebcam(e);
                  },
                },
                {
                  key: "publishVideo",
                  value:
                    ((f = (0, t.A)(
                      c().mark(function e() {
                        var t,
                          r = arguments;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (t =
                                      r.length > 0 && void 0 !== r[0]
                                        ? r[0]
                                        : void 0),
                                    this.roomClient.enableWebcam(t),
                                    e.abrupt("return")
                                  );
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return f.apply(this, arguments);
                    }),
                },
                {
                  key: "unpublishVideo",
                  value:
                    ((m = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    this.roomClient.disableWebcam(),
                                    e.abrupt("return")
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return m.apply(this, arguments);
                    }),
                },
                {
                  key: "disableScreenShare",
                  value: function () {
                    this.roomClient.disableShare();
                  },
                },
                {
                  key: "enableScreenShare",
                  value: function () {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : void 0;
                    this.roomClient.enableShare(e);
                  },
                },
                {
                  key: "pubblishScreenShare",
                  value: function () {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : void 0;
                    this.roomClient.enableShare(e);
                  },
                },
                {
                  key: "unpublishScreenShare",
                  value: function () {
                    this.roomClient.disableShare();
                  },
                },
                {
                  key: "sendChatMessage",
                  value: function (e) {
                    this.roomClient.sendChatMessage(e);
                    var t = {
                      text: e,
                      timestamp: new Date().getTime(),
                      senderId: this.localParticipant.id,
                      senderName: this.localParticipant.displayName,
                    };
                    this.handleNewChatMessage(t);
                  },
                },
                {
                  key: "pauseAllStreams",
                  value: function (e) {
                    this.roomClient.pauseAllConsumers(e);
                  },
                },
                {
                  key: "resumeAllStreams",
                  value: function (e) {
                    this.roomClient.resumeAllConsumers(e);
                  },
                },
                {
                  key: "startRecording",
                  value: function (e, t, r, n) {
                    this.roomClient.startRecording(e, t, r, n);
                  },
                },
                {
                  key: "stopRecording",
                  value: function () {
                    this.roomClient.stopRecording();
                  },
                },
                {
                  key: "startTranscription",
                  value: function (e) {
                    this.roomClient.startTranscription(e);
                  },
                },
                {
                  key: "stopTranscription",
                  value: function () {
                    this.roomClient.stopTranscription();
                  },
                },
                {
                  key: "startLivestream",
                  value: function (e, t) {
                    this.roomClient.startLivestream(e, t);
                  },
                },
                {
                  key: "stopLivestream",
                  value: function () {
                    this.roomClient.stopLivestream();
                  },
                },
                {
                  key: "startHls",
                  value:
                    ((h = (0, t.A)(
                      c().mark(function e(t, r) {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), this.roomClient.startHls(t, r)
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e, t) {
                      return h.apply(this, arguments);
                    }),
                },
                {
                  key: "stopHls",
                  value: function () {
                    this.roomClient.stopHls();
                  },
                },
                {
                  key: "createCharacter",
                  value: function (e) {
                    if (!e.interactionId && !e.id)
                      throw new Error("InteractionId or id is required");
                    return new Xe(
                      lt(lt({}, e), {}, { roomClient: this.roomClient })
                    );
                  },
                },
                {
                  key: "getMics",
                  value:
                    ((p = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), this.roomClient.getMics()
                                  );
                                case 2:
                                  return e.abrupt("return", e.sent);
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return p.apply(this, arguments);
                    }),
                },
                {
                  key: "getWebcams",
                  value:
                    ((u = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), this.roomClient.getWebcams()
                                  );
                                case 2:
                                  return e.abrupt("return", e.sent);
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return u.apply(this, arguments);
                    }),
                },
                {
                  key: "changeMic",
                  value: function (e) {
                    this.roomClient.changeMic(e);
                  },
                },
                {
                  key: "changeWebcam",
                  value: function (e) {
                    this.roomClient.changeWebcam(e);
                  },
                },
                {
                  key: "replaceWebcamStream",
                  value: function (e) {
                    this.roomClient.replaceWebcamStream(e);
                  },
                },
                {
                  key: "setWebcamQuality",
                  value: function (e) {
                    this.roomClient.setWebcamQuality(e);
                  },
                },
                {
                  key: "startWhiteboard",
                  value: function () {
                    this.roomClient.startWhiteboard();
                  },
                },
                {
                  key: "stopWhiteboard",
                  value: function () {
                    this.roomClient.stopWhiteboard();
                  },
                },
                {
                  key: "startVideo",
                  value: function (e) {
                    var t = e.link;
                    this.roomClient.startVideo({ link: t });
                  },
                },
                {
                  key: "stopVideo",
                  value: function () {
                    this.roomClient.stopVideo();
                  },
                },
                {
                  key: "resumeVideo",
                  value: function () {
                    this.roomClient.resumeVideo();
                  },
                },
                {
                  key: "refreshConnection",
                  value: function () {
                    this.roomClient.restartIce();
                  },
                },
                {
                  key: "pauseVideo",
                  value: function (e) {
                    var t = e.currentTime;
                    this.roomClient.pauseVideo(t);
                  },
                },
                {
                  key: "seekVideo",
                  value: function (e) {
                    var t = e.currentTime;
                    this.roomClient.seekVideo(t);
                  },
                },
                {
                  key: "handlePeerAdd",
                  value: function (e) {
                    var t = e.peer,
                      r = new Se(t);
                    this.participants.set(r.id, r),
                      this.eventEmitter.emit(_t, r),
                      1 === this.participants.size &&
                        this.updateMainParticipant(r.id);
                  },
                },
                {
                  key: "handlePeerRemove",
                  value: function (e) {
                    var t = e.peerId,
                      r = this.participants.get(t);
                    null != r &&
                      (this.participants.delete(t),
                      this.eventEmitter.emit(yt, r),
                      this.activePresenterId === r.id &&
                        ((this.activePresenterId = null),
                        this.eventEmitter.emit(wt, this.activePresenterId)),
                      this.mainParticipantId === r.id &&
                        (this.participants.size > 0
                          ? this.updateMainParticipant(
                              this.participants.entries().next().value[1].id
                            )
                          : this.updateMainParticipant(
                              this.localParticipant.id
                            )));
                  },
                },
                {
                  key: "handleProducerAdd",
                  value: function (e) {
                    var t = e.producer,
                      r = { id: t.id, rtpSender: t.rtpSender };
                    this.localParticipant.addProducer(r);
                    var n = new ae(t);
                    this.localParticipant.addStream(n),
                      "share" === n.kind &&
                        ((this.activePresenterId = this.localParticipant.id),
                        this.eventEmitter.emit(wt, this.activePresenterId),
                        this.updateMainParticipant(this.localParticipant.id));
                  },
                },
                {
                  key: "handleUpdateProducer",
                  value: function (e) {
                    var t = e.producer,
                      r = new ae(t);
                    this.localParticipant.updateStream(r);
                  },
                },
                {
                  key: "handleProducerRemove",
                  value: function (e) {
                    var t = e.producerId;
                    this.localParticipant.removeProducer(t);
                    var r = this.localParticipant.deleteStream(t);
                    if (r && "share" === r.kind) {
                      (this.activePresenterId = null),
                        this.eventEmitter.emit(wt, this.activePresenterId);
                      var n =
                        this.participants.size > 0
                          ? this.participants.entries().next().value[1].id
                          : null;
                      this.updateMainParticipant(
                        this.activeSpeakerId || n || this.localParticipant.id
                      );
                    }
                    r &&
                      "audio" === r.kind &&
                      this.activeSpeakerId === this.localParticipant.id &&
                      this.handleSpeakerChange({ peerId: null });
                  },
                },
                {
                  key: "handleConsumerAdd",
                  value: function (e) {
                    var t = e.consumer,
                      r = e.peerId,
                      n = this.participants.get(r) || this.characters.get(r);
                    if (n) {
                      var s = { id: t.id, rtpReceiver: t.rtpReceiver };
                      n.addConsumer(s);
                      var i = new ae(t);
                      n.addStream(i),
                        this.eventEmitter.emit(Wt, i),
                        "share" === i.kind &&
                          ((this.activePresenterId = n.id),
                          this.eventEmitter.emit(wt, this.activePresenterId),
                          this.updateMainParticipant(n.id));
                    }
                  },
                },
                {
                  key: "handleConsumerResume",
                  value: function (e) {
                    var t = e.consumerId,
                      r = e.peerId,
                      n = this.participants.get(r);
                    n && n.streamResumed(t);
                  },
                },
                {
                  key: "handleConsumerPause",
                  value: function (e) {
                    var t = e.consumerId,
                      r = e.peerId,
                      n = this.participants.get(r);
                    n && n.streamPaused(t);
                  },
                },
                {
                  key: "handleConsumerRemove",
                  value: function (e) {
                    var t = e.consumerId,
                      r = e.peerId,
                      n = this.participants.get(r) || this.characters.get(r);
                    if (null != n && n) {
                      n.removeConsumer(t);
                      var s = n.deleteStream(t);
                      if (
                        (this.eventEmitter.emit(qt, s), s && "share" === s.kind)
                      ) {
                        (this.activePresenterId = null),
                          this.eventEmitter.emit(wt, this.activePresenterId);
                        var i =
                          this.participants.size > 0
                            ? this.participants.entries().next().value[1].id
                            : null;
                        this.updateMainParticipant(
                          this.activeSpeakerId || i || this.localParticipant.id
                        );
                      }
                    }
                  },
                },
                {
                  key: "handleParticipantMediaStateChanged",
                  value: function (e) {
                    var t = e.peerId,
                      r = e.kind,
                      n = e.newState,
                      s = this.participants.get(t) || this.characters.get(t);
                    this.localParticipant.id == t &&
                      (s = this.localParticipant),
                      s &&
                        s &&
                        ("audio" == r
                          ? (s.micOn = n)
                          : "video" == r && (s.webcamOn = n),
                        s.updateParticipantMediaState(r, n));
                  },
                },
                {
                  key: "handleParticipantPausedBySubManager",
                  value: function (e) {
                    var t = this.participants.get(e.peerId);
                    t && t && t.handleParticipantPause(e);
                  },
                },
                {
                  key: "handleParticipantResumeBySubManager",
                  value: function (e) {
                    var t = this.participants.get(e.peerId);
                    t && t && t.handleParticipantResume(e);
                  },
                },
                {
                  key: "handleSpeakerChange",
                  value: function (e) {
                    var t = e.peerId;
                    this.activeSpeakerId !== t &&
                      ((this.activeSpeakerId = t),
                      this.eventEmitter.emit(bt, t),
                      t &&
                        t !== this.localParticipant.id &&
                        this.activePresenterId !== this.mainParticipantId &&
                        t !== this.mainParticipantId &&
                        this.updateMainParticipant(t));
                  },
                },
                {
                  key: "handleNewChatMessage",
                  value: function (e) {
                    var t = e.senderId,
                      r = { senderId: t, text: e.text, timestamp: e.timestamp };
                    if (this.localParticipant.id === t)
                      r.senderName = this.localParticipant.displayName;
                    else {
                      var n = this.participants.get(t);
                      n && (r.senderName = n.displayName);
                    }
                    this.messages.push(r), this.eventEmitter.emit(Rt, r);
                  },
                },
                {
                  key: "updateMainParticipant",
                  value: function (e) {
                    this.mainParticipantId = e;
                    var t = null;
                    (t =
                      e === this.localParticipant.id
                        ? this.localParticipant
                        : this.participants.get(this.mainParticipantId)),
                      this.eventEmitter.emit(St, t);
                  },
                },
                {
                  key: "handleEntryRequested",
                  value: function (e) {
                    var t = this,
                      r = e.id,
                      n = e.name;
                    this.eventEmitter.emit(kt, {
                      participantId: r,
                      name: n,
                      allow: function () {
                        t.roomClient.respondEntry(r, "allowed");
                      },
                      deny: function () {
                        t.roomClient.respondEntry(r, "denied");
                      },
                    });
                  },
                },
                {
                  key: "handleEntryResponded",
                  value: function (e) {
                    var t = e.id,
                      r = e.decision;
                    this.eventEmitter.emit(Et, t, r);
                  },
                },
                {
                  key: "handleMeetingJoined",
                  value: function (e) {
                    var t = e.peers,
                      r = e.poll,
                      n = e.messages,
                      s = e.baseUrl,
                      i = e.switchRoomId;
                    "string" == typeof i && (this.id = i),
                      (this.baseUrl = s),
                      n.length > 0 && (this.messages = n),
                      this.eventEmitter.emit(ft, {
                        switchRoomId: i || null,
                        peers: t,
                        poll: r,
                        messages: n,
                      });
                  },
                },
                {
                  key: "handleMeetingLeft",
                  value: function (e) {
                    this.eventEmitter.emit(gt, e);
                  },
                },
                {
                  key: "handleRecordingStateChanged",
                  value: function (e) {
                    (this.recordingState = e.status),
                      this.eventEmitter.emit(Ct, e);
                  },
                },
                {
                  key: "handleLivestreamStateChanged",
                  value: function (e) {
                    (this.livestreamState = e.status),
                      this.eventEmitter.emit(Ot, e);
                  },
                },
                {
                  key: "handleHlsStateChanged",
                  value: function (e) {
                    (this.hlsState = e.status),
                      "HLS_PLAYABLE" == e.status
                        ? (this.hlsUrls = {
                            downstreamUrl: e.downstreamUrl,
                            playbackHlsUrl: e.playbackHlsUrl,
                            livestreamUrl: e.livestreamUrl,
                          })
                        : "HLS_STOPPED" == e.status &&
                          (this.hlsUrls = {
                            downstreamUrl: null,
                            playbackHlsUrl: null,
                            livestreamUrl: null,
                          }),
                      this.eventEmitter.emit(It, e);
                  },
                },
                {
                  key: "handleTranscriptionStateChanged",
                  value: function (e) {
                    (this.transcriptionState = e.status),
                      this.eventEmitter.emit(Qt, e);
                  },
                },
                {
                  key: "handleTranscriptionText",
                  value: function (e) {
                    this.eventEmitter.emit(Yt, e);
                  },
                },
                {
                  key: "handleRecordingStarted",
                  value: function () {
                    this.eventEmitter.emit(Tt);
                  },
                },
                {
                  key: "handleRecordingStopped",
                  value: function () {
                    this.eventEmitter.emit(Pt);
                  },
                },
                {
                  key: "handleLivestreamStarted",
                  value: function () {
                    this.eventEmitter.emit(xt);
                  },
                },
                {
                  key: "handleLivestreamStopped",
                  value: function () {
                    this.eventEmitter.emit(Dt);
                  },
                },
                {
                  key: "handleHlsStarted",
                  value: function (e) {
                    this.eventEmitter.emit(At, e);
                  },
                },
                {
                  key: "handleHlsStopped",
                  value: function () {
                    this.eventEmitter.emit(Mt);
                  },
                },
                {
                  key: "handleWhiteboardStarted",
                  value: function (e) {
                    this.eventEmitter.emit(Lt, e);
                  },
                },
                {
                  key: "handleWhiteboardStopped",
                  value: function (e) {
                    !(function (e) {
                      if (null == e)
                        throw new TypeError("Cannot destructure " + e);
                    })(e),
                      this.eventEmitter.emit(Nt);
                  },
                },
                {
                  key: "handleAddCharacter",
                  value: function (e) {
                    var t,
                      r = e.id,
                      n =
                        null !== (t = this.characters.get(r)) && void 0 !== t
                          ? t
                          : new Xe(
                              lt(
                                lt({}, e),
                                {},
                                {
                                  state: Ce.CHARACTER_LISTENING,
                                  roomClient: this.roomClient,
                                }
                              )
                            );
                    this.characters.set(r, n),
                      this.eventEmitter.emit(Xt, n),
                      n.eventEmitter.emit(Xt);
                  },
                },
                {
                  key: "handleInitCharacter",
                  value: function (e) {
                    this.characters.set(e.id, e);
                  },
                },
                {
                  key: "handleRemoveCharacter",
                  value: function (e) {
                    var t = e.id;
                    if (this.characters.has(t)) {
                      var r = this.characters.get(t);
                      this.eventEmitter.emit(Zt, r),
                        r.eventEmitter.emit(Zt),
                        this.characters.delete(t);
                    }
                  },
                },
                {
                  key: "handleCharacterStateChanged",
                  value: function (e) {
                    var t = e.id;
                    this.characters.has(t) &&
                      this.characters.get(t).handleCharacterStateChanged(e);
                  },
                },
                {
                  key: "handleCharacterMessage",
                  value: function (e) {
                    var t = e.id;
                    this.characters.has(t) &&
                      this.characters.get(t).handleCharacterMessage(e);
                  },
                },
                {
                  key: "handleUserMessage",
                  value: function (e) {
                    var t = e.id;
                    this.characters.has(t) &&
                      this.characters.get(t).handleUserMessage(e);
                  },
                },
                {
                  key: "handleOnCharacterData",
                  value: function (e) {
                    var t = e.id;
                    this.characters.has(t) &&
                      this.characters.get(t).handleCharacterData(e);
                  },
                },
                {
                  key: "handleOnRemoveCurrentMeetingParticipant",
                  value: function () {
                    var e = this;
                    (0, q.A)(this.participants.keys()).forEach(function (t) {
                      t !== e.localParticipant.id &&
                        e.handlePeerRemove({ peerId: t });
                    });
                  },
                },
                {
                  key: "handleVideoStateChanged",
                  value: function (e) {
                    this.eventEmitter.emit(jt, e);
                  },
                },
                {
                  key: "handleVideoSeeked",
                  value: function (e) {
                    var t = e.currentTime;
                    this.eventEmitter.emit(Bt, { currentTime: t });
                  },
                },
                {
                  key: "handlePinStateChanged",
                  value: function (e) {
                    var t = e.peerId,
                      r = e.state,
                      n = e.pinnedBy;
                    this.eventEmitter.emit(Vt, {
                      participantId: t,
                      state: r,
                      pinnedBy: n,
                    });
                  },
                },
                {
                  key: "handleMeetingStateChanged",
                  value: function (e) {
                    var t = e.state;
                    this.eventEmitter.emit(Kt, { state: t });
                  },
                },
                {
                  key: "handleConsumersPaused",
                  value: function (e) {
                    var t = e.kind;
                    this.eventEmitter.emit($t, { kind: t });
                  },
                },
                {
                  key: "handleConsumersResumed",
                  value: function (e) {
                    var t = e.kind;
                    this.eventEmitter.emit(Jt, { kind: t });
                  },
                },
                {
                  key: "handleVideoQualityChanged",
                  value: function (e) {
                    var t = e.peerId,
                      r = e.prevQuality,
                      n = e.currentQuality,
                      s = this.participants.get(t) || this.characters.get(t);
                    s && s && s.videoQualityChanged(r, n);
                  },
                },
                {
                  key: "handleMicRequested",
                  value: function (e) {
                    var t = this,
                      r = e.peerId;
                    this.eventEmitter.emit(Ft, {
                      participantId: r,
                      accept: function () {
                        return t.unmuteMic();
                      },
                      reject: function () {},
                    });
                  },
                },
                {
                  key: "handleWebcamRequested",
                  value: function (e) {
                    var t = this,
                      r = e.peerId;
                    this.eventEmitter.emit(Ut, {
                      participantId: r,
                      accept: function () {
                        return t.enableWebcam();
                      },
                      reject: function () {},
                    });
                  },
                },
                {
                  key: "handleConnectionParticipantJoin",
                  value: function (e) {
                    var t = e.roomId,
                      r = e.peer,
                      n = this.connections.get(t);
                    null != n && n.meeting.participantJoin(r);
                  },
                },
                {
                  key: "handleConnectionParticipantLeft",
                  value: function (e) {
                    var t = e.roomId,
                      r = e.peerId,
                      n = this.connections.get(t);
                    null != n && n.meeting.participantLeft(r);
                  },
                },
                {
                  key: "handleConnectionOpen",
                  value: function (e) {
                    var t = e.peers,
                      r = e.roomId,
                      n = e.payload,
                      s = new ct({ roomId: r, peers: t, payload: n });
                    this.connections.set(s.id, s),
                      this.eventEmitter.emit(Ht, s);
                  },
                },
                {
                  key: "handleConnectionClose",
                  value: function (e) {
                    var t = e.roomId;
                    null != this.connections.get(t) &&
                      (this.connections.delete(t),
                      this.eventEmitter.emit(zt, t));
                  },
                },
                {
                  key: "enableAdaptiveSubscription",
                  value:
                    ((l = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    this.roomClient.enableAdaptiveSubscription()
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return l.apply(this, arguments);
                    }),
                },
                {
                  key: "disableAdaptiveSubscription",
                  value:
                    ((d = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    this.roomClient.disableAdaptiveSubscription()
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return d.apply(this, arguments);
                    }),
                },
                {
                  key: "enableE2EE",
                  value:
                    ((o = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    this.roomClient.toggleE2EEEnabled(!0)
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return o.apply(this, arguments);
                    }),
                },
                {
                  key: "disableE2EE",
                  value:
                    ((n = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    this.roomClient.toggleE2EEEnabled(!1)
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return n.apply(this, arguments);
                    }),
                },
                {
                  key: "handleSwitchMeeting",
                  value: function (e) {
                    var t = e.roomId,
                      r = e.token,
                      n = e.payload,
                      s = e.peerId,
                      i = e.connectionPeerId,
                      a = e.connectionRoomId,
                      o = s
                        ? {
                            meetingId: t,
                            payload: n,
                            token: r,
                            participantId: s,
                          }
                        : {
                            meetingId: t,
                            payload: n,
                            token: r,
                            connectionParticipantId: i,
                            connectionMeetingId: a,
                          };
                    this.eventEmitter.emit(Gt, o);
                  },
                },
                {
                  key: "handleConnectionChatMessage",
                  value: function (e) {
                    var t = e.roomId,
                      r = e.peerId,
                      n = e.message,
                      s = this.connections.get(t);
                    null != s &&
                      s.meeting.sendChatMessageEvent({
                        participantId: r,
                        message: n,
                      });
                  },
                },
                {
                  key: "handleE2EEStateChange",
                  value: function (e) {
                    var t = e.peerId,
                      r =
                        this.localParticipant.id == t
                          ? this.localParticipant
                          : this.participants.get(t) || this.characters.get(t);
                    r && r && r.handleE2EEStateChange(e);
                  },
                },
                {
                  key: "connectTo",
                  value:
                    ((r = (0, t.A)(
                      c().mark(function e(t) {
                        var r, n;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.meetingId),
                                    (n = t.payload),
                                    (e.next = 3),
                                    this.roomClient.openConnection({
                                      roomId: r,
                                      payload: n,
                                    })
                                  );
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e) {
                      return r.apply(this, arguments);
                    }),
                },
                {
                  key: "switchTo",
                  value: function (e) {
                    var t = e.meetingId,
                      r = e.token;
                    if (!t || "string" != typeof t || "" === t.trim())
                      throw new Error(
                        "Invalid meetingId: must be a non-empty string"
                      );
                    this.roomClient.switchTo({
                      meetingId: t,
                      token: r,
                      participantId: this.localParticipant.id,
                    });
                  },
                },
                {
                  key: "selectedCameraDevice",
                  get: function () {
                    var e;
                    return null === (e = this.roomClient._webcam) ||
                      void 0 === e
                      ? void 0
                      : e.device;
                  },
                },
                {
                  key: "selectedMicrophoneDevice",
                  get: function () {
                    var e;
                    return null === (e = this.roomClient._mic) || void 0 === e
                      ? void 0
                      : e.device;
                  },
                },
                {
                  key: "on",
                  value: function (e, t) {
                    switch (e) {
                      case _t:
                      case yt:
                      case bt:
                      case wt:
                      case St:
                      case Rt:
                      case kt:
                      case Et:
                      case Ct:
                      case Tt:
                      case Pt:
                      case Ot:
                      case xt:
                      case Dt:
                      case At:
                      case Mt:
                      case It:
                      case Qt:
                      case Yt:
                      case Wt:
                      case qt:
                      case Lt:
                      case Nt:
                      case Xt:
                      case Zt:
                      case ft:
                      case gt:
                      case jt:
                      case Bt:
                      case Ft:
                      case Ut:
                      case Vt:
                      case Ht:
                      case zt:
                      case Gt:
                      case Kt:
                      case vt:
                      case $t:
                      case Jt:
                      case mt:
                        this.eventEmitter.on(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type " + e);
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    switch (e) {
                      case _t:
                      case yt:
                      case bt:
                      case wt:
                      case St:
                      case Rt:
                      case kt:
                      case Et:
                      case Ct:
                      case Tt:
                      case Pt:
                      case Ot:
                      case xt:
                      case Dt:
                      case It:
                      case At:
                      case Mt:
                      case Qt:
                      case Yt:
                      case Wt:
                      case qt:
                      case Lt:
                      case Nt:
                      case Xt:
                      case Zt:
                      case ft:
                      case gt:
                      case jt:
                      case Bt:
                      case Ft:
                      case Ut:
                      case Vt:
                      case Ht:
                      case zt:
                      case Gt:
                      case Kt:
                      case mt:
                      case vt:
                      case $t:
                      case Jt:
                        this.eventEmitter.off(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type.");
                    }
                  },
                },
              ]
            );
            var r, n, o, d, l, u, p, h, m, f, g, v;
          })();
        function nr(e) {
          var t = e.topic,
            r = e.message,
            n = e.senderId,
            s = e.timestamp,
            i = e.senderName,
            a = e.id,
            o = e.payload;
          t &&
            r &&
            pt(er, this).emit(t, {
              message: r,
              senderId: n,
              timestamp: s,
              topic: t,
              senderName: i,
              id: a,
              payload: o,
            });
        }
        function sr(e) {
          var t = e.peerId,
            r = e.mode;
          t === this.localParticipant.id
            ? (this.localParticipant.mode = r)
            : (this.participants.get(t).mode = r),
            this.activePresenterId !== this.localParticipant.id ||
              (0, Te.kR)(r) ||
              ((this.activePresenterId = null),
              this.eventEmitter.emit(wt, this.activePresenterId)),
            this.eventEmitter.emit(vt, { participantId: t, mode: r });
        }
        var ir = r(7080),
          ar = r(5071),
          or = r(4973),
          cr = r(9027);
        function dr(e, t, r) {
          return (
            (t = (0, ke.A)(t)),
            (0, Re.A)(
              e,
              lr()
                ? Reflect.construct(t, r || [], (0, ke.A)(e).constructor)
                : t.apply(e, r)
            )
          );
        }
        function lr() {
          try {
            var e = !Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function () {})
            );
          } catch (e) {}
          return (lr = function () {
            return !!e;
          })();
        }
        var ur = (function (e) {
            function t(e, r, n, i) {
              return (0, s.A)(this, t), dr(this, t, [e, r, n, i]);
            }
            return (0, Ee.A)(t, e), (0, i.A)(t);
          })(
            (0, i.A)(function e(t, r, n, i) {
              (0, s.A)(this, e),
                (this.deviceId = t),
                (this.groupId = r),
                (this.kind = n),
                (this.label = i);
            })
          ),
          pr = (function (e) {
            function t(e, r, n, i) {
              return (0, s.A)(this, t), dr(this, t, [e, r, n, i]);
            }
            return (0, Ee.A)(t, e), (0, i.A)(t);
          })(ur),
          hr = (function (e) {
            function t(e, r, n, i) {
              return (0, s.A)(this, t), dr(this, t, [e, r, n, i]);
            }
            return (0, Ee.A)(t, e), (0, i.A)(t);
          })(ur),
          mr = (function (e) {
            function t(e, r, n, i) {
              return (0, s.A)(this, t), dr(this, t, [e, r, n, i]);
            }
            return (0, Ee.A)(t, e), (0, i.A)(t);
          })(ur),
          fr = {
            AUDIO: "audio",
            VIDEO: "video",
            AUDIO_AND_VIDEO: "audio_video",
          },
          gr = (r(328), r(7654));
        function vr(e, t) {
          return null == e || null == t
            ? NaN
            : e < t
            ? -1
            : e > t
            ? 1
            : e >= t
            ? 0
            : NaN;
        }
        function _r(e, t) {
          return null == e || null == t
            ? NaN
            : t < e
            ? -1
            : t > e
            ? 1
            : t >= e
            ? 0
            : NaN;
        }
        function yr(e) {
          let t, r, n;
          function s(e, n, s = 0, i = e.length) {
            if (s < i) {
              if (0 !== t(n, n)) return i;
              do {
                const t = (s + i) >>> 1;
                r(e[t], n) < 0 ? (s = t + 1) : (i = t);
              } while (s < i);
            }
            return s;
          }
          return (
            2 !== e.length
              ? ((t = vr),
                (r = (t, r) => vr(e(t), r)),
                (n = (t, r) => e(t) - r))
              : ((t = e === vr || e === _r ? e : br), (r = e), (n = e)),
            {
              left: s,
              center: function (e, t, r = 0, i = e.length) {
                const a = s(e, t, r, i - 1);
                return a > r && n(e[a - 1], t) > -n(e[a], t) ? a - 1 : a;
              },
              right: function (e, n, s = 0, i = e.length) {
                if (s < i) {
                  if (0 !== t(n, n)) return i;
                  do {
                    const t = (s + i) >>> 1;
                    r(e[t], n) <= 0 ? (s = t + 1) : (i = t);
                  } while (s < i);
                }
                return s;
              },
            }
          );
        }
        function br() {
          return 0;
        }
        const wr = yr(vr),
          Sr = wr.right,
          Rr =
            (wr.left,
            yr(function (e) {
              return null === e ? NaN : +e;
            }).center,
            Sr);
        function kr(e, t) {
          switch (arguments.length) {
            case 0:
              break;
            case 1:
              this.range(e);
              break;
            default:
              this.range(t).domain(e);
          }
          return this;
        }
        function Er() {
          var e,
            t = [0.5],
            r = [0, 1],
            n = 1;
          function s(s) {
            return null != s && s <= s ? r[Rr(t, s, 0, n)] : e;
          }
          return (
            (s.domain = function (e) {
              return arguments.length
                ? ((t = Array.from(e)),
                  (n = Math.min(t.length, r.length - 1)),
                  s)
                : t.slice();
            }),
            (s.range = function (e) {
              return arguments.length
                ? ((r = Array.from(e)),
                  (n = Math.min(t.length, r.length - 1)),
                  s)
                : r.slice();
            }),
            (s.invertExtent = function (e) {
              var n = r.indexOf(e);
              return [t[n - 1], t[n]];
            }),
            (s.unknown = function (t) {
              return arguments.length ? ((e = t), s) : e;
            }),
            (s.copy = function () {
              return Er().domain(t).range(r).unknown(e);
            }),
            kr.apply(s, arguments)
          );
        }
        function Cr(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(e);
            t &&
              (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function Tr(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? Cr(Object(r), !0).forEach(function (t) {
                  Dr(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : Cr(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        function Pr(e, t) {
          if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function");
        }
        function Or(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n = t[r];
            (n.enumerable = n.enumerable || !1),
              (n.configurable = !0),
              "value" in n && (n.writable = !0),
              Object.defineProperty(e, Gr(n.key), n);
          }
        }
        function xr(e, t, r) {
          return (
            t && Or(e.prototype, t),
            r && Or(e, r),
            Object.defineProperty(e, "prototype", { writable: !1 }),
            e
          );
        }
        function Dr(e, t, r) {
          return (
            (t = Gr(t)) in e
              ? Object.defineProperty(e, t, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = r),
            e
          );
        }
        function Ir(e, t) {
          if ("function" != typeof t && null !== t)
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          (e.prototype = Object.create(t && t.prototype, {
            constructor: { value: e, writable: !0, configurable: !0 },
          })),
            Object.defineProperty(e, "prototype", { writable: !1 }),
            t && Mr(e, t);
        }
        function Ar(e) {
          return (
            (Ar = Object.setPrototypeOf
              ? Object.getPrototypeOf.bind()
              : function (e) {
                  return e.__proto__ || Object.getPrototypeOf(e);
                }),
            Ar(e)
          );
        }
        function Mr(e, t) {
          return (
            (Mr = Object.setPrototypeOf
              ? Object.setPrototypeOf.bind()
              : function (e, t) {
                  return (e.__proto__ = t), e;
                }),
            Mr(e, t)
          );
        }
        function Lr(e, t) {
          if (null == e) return {};
          var r,
            n,
            s = (function (e, t) {
              if (null == e) return {};
              var r,
                n,
                s = {},
                i = Object.keys(e);
              for (n = 0; n < i.length; n++)
                (r = i[n]), t.indexOf(r) >= 0 || (s[r] = e[r]);
              return s;
            })(e, t);
          if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(e);
            for (n = 0; n < i.length; n++)
              (r = i[n]),
                t.indexOf(r) >= 0 ||
                  (Object.prototype.propertyIsEnumerable.call(e, r) &&
                    (s[r] = e[r]));
          }
          return s;
        }
        function Nr(e) {
          if (void 0 === e)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return e;
        }
        function jr(e) {
          var t = (function () {
            if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
              return (
                Boolean.prototype.valueOf.call(
                  Reflect.construct(Boolean, [], function () {})
                ),
                !0
              );
            } catch (e) {
              return !1;
            }
          })();
          return function () {
            var r,
              n = Ar(e);
            if (t) {
              var s = Ar(this).constructor;
              r = Reflect.construct(n, arguments, s);
            } else r = n.apply(this, arguments);
            return (function (e, t) {
              if (t && ("object" == typeof t || "function" == typeof t))
                return t;
              if (void 0 !== t)
                throw new TypeError(
                  "Derived constructors may only return object or undefined"
                );
              return Nr(e);
            })(this, r);
          };
        }
        function Br(e, t) {
          for (
            ;
            !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = Ar(e));

          );
          return e;
        }
        function Fr() {
          return (
            (Fr =
              "undefined" != typeof Reflect && Reflect.get
                ? Reflect.get.bind()
                : function (e, t, r) {
                    var n = Br(e, t);
                    if (n) {
                      var s = Object.getOwnPropertyDescriptor(n, t);
                      return s.get
                        ? s.get.call(arguments.length < 3 ? e : r)
                        : s.value;
                    }
                  }),
            Fr.apply(this, arguments)
          );
        }
        function Ur(e, t, r, n) {
          return (
            (Ur =
              "undefined" != typeof Reflect && Reflect.set
                ? Reflect.set
                : function (e, t, r, n) {
                    var s,
                      i = Br(e, t);
                    if (i) {
                      if ((s = Object.getOwnPropertyDescriptor(i, t)).set)
                        return s.set.call(n, r), !0;
                      if (!s.writable) return !1;
                    }
                    if ((s = Object.getOwnPropertyDescriptor(n, t))) {
                      if (!s.writable) return !1;
                      (s.value = r), Object.defineProperty(n, t, s);
                    } else Dr(n, t, r);
                    return !0;
                  }),
            Ur(e, t, r, n)
          );
        }
        function Wr(e, t, r, n, s) {
          if (!Ur(e, t, r, n || e) && s)
            throw new TypeError("failed to set property");
          return r;
        }
        function qr(e, t) {
          return (
            (function (e) {
              if (Array.isArray(e)) return e;
            })(e) ||
            (function (e, t) {
              var r =
                null == e
                  ? null
                  : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
                    e["@@iterator"];
              if (null != r) {
                var n,
                  s,
                  i,
                  a,
                  o = [],
                  c = !0,
                  d = !1;
                try {
                  if (((i = (r = r.call(e)).next), 0 === t)) {
                    if (Object(r) !== r) return;
                    c = !1;
                  } else
                    for (
                      ;
                      !(c = (n = i.call(r)).done) &&
                      (o.push(n.value), o.length !== t);
                      c = !0
                    );
                } catch (e) {
                  (d = !0), (s = e);
                } finally {
                  try {
                    if (
                      !c &&
                      null != r.return &&
                      ((a = r.return()), Object(a) !== a)
                    )
                      return;
                  } finally {
                    if (d) throw s;
                  }
                }
                return o;
              }
            })(e, t) ||
            Hr(e, t) ||
            (function () {
              throw new TypeError(
                "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            })()
          );
        }
        function Vr(e) {
          return (
            (function (e) {
              if (Array.isArray(e)) return zr(e);
            })(e) ||
            (function (e) {
              if (
                ("undefined" != typeof Symbol && null != e[Symbol.iterator]) ||
                null != e["@@iterator"]
              )
                return Array.from(e);
            })(e) ||
            Hr(e) ||
            (function () {
              throw new TypeError(
                "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            })()
          );
        }
        function Hr(e, t) {
          if (e) {
            if ("string" == typeof e) return zr(e, t);
            var r = Object.prototype.toString.call(e).slice(8, -1);
            return (
              "Object" === r && e.constructor && (r = e.constructor.name),
              "Map" === r || "Set" === r
                ? Array.from(e)
                : "Arguments" === r ||
                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                ? zr(e, t)
                : void 0
            );
          }
        }
        function zr(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
          return n;
        }
        function Gr(e) {
          var t = (function (e, t) {
            if ("object" != typeof e || null === e) return e;
            var r = e[Symbol.toPrimitive];
            if (void 0 !== r) {
              var n = r.call(e, t || "default");
              if ("object" != typeof n) return n;
              throw new TypeError(
                "@@toPrimitive must return a primitive value."
              );
            }
            return ("string" === t ? String : Number)(e);
          })(e, "string");
          return "symbol" == typeof t ? t : String(t);
        }
        function Kr(e, t) {
          return (function (e, t) {
            if (t.get) return t.get.call(e);
            return t.value;
          })(e, Jr(e, t, "get"));
        }
        function $r(e, t, r) {
          return (
            (function (e, t, r) {
              if (t.set) t.set.call(e, r);
              else {
                if (!t.writable)
                  throw new TypeError(
                    "attempted to set read only private field"
                  );
                t.value = r;
              }
            })(e, Jr(e, t, "set"), r),
            r
          );
        }
        function Jr(e, t, r) {
          if (!t.has(e))
            throw new TypeError(
              "attempted to " + r + " private field on non-instance"
            );
          return t.get(e);
        }
        function Qr(e, t, r) {
          if (!t.has(e))
            throw new TypeError(
              "attempted to get private field on non-instance"
            );
          return r;
        }
        function Yr(e, t) {
          if (t.has(e))
            throw new TypeError(
              "Cannot initialize the same private elements twice on an object"
            );
        }
        function Xr(e, t, r) {
          Yr(e, t), t.set(e, r);
        }
        function Zr(e, t) {
          Yr(e, t), t.add(e);
        }
        var en = "https://speed.cloudflare.com",
          tn = {
            autoStart: !0,
            downloadApiUrl: "".concat(en, "/__down"),
            uploadApiUrl: "".concat(en, "/__up"),
            logMeasurementApiUrl: null,
            logAimApiUrl: "https://aim.cloudflare.com/__log",
            turnServerUri: "turn.speed.cloudflare.com:50000",
            turnServerCredsApiUrl: "".concat(en, "/turn-creds"),
            turnServerUser: null,
            turnServerPass: null,
            rpkiInvalidHost: "invalid.rpki.cloudflare.com",
            cfTraceUrl: "".concat(en, "/cdn-cgi/trace"),
            includeCredentials: !1,
            measurements: [
              { type: "latency", numPackets: 1 },
              { type: "download", bytes: 1e5, count: 1, bypassMinDuration: !0 },
              { type: "latency", numPackets: 20 },
              { type: "download", bytes: 1e5, count: 9 },
              { type: "download", bytes: 1e6, count: 8 },
              { type: "upload", bytes: 1e5, count: 8 },
              {
                type: "packetLoss",
                numPackets: 1e3,
                batchSize: 10,
                batchWaitTime: 10,
                responsesWaitTime: 3e3,
              },
              { type: "upload", bytes: 1e6, count: 6 },
              { type: "download", bytes: 1e7, count: 6 },
              { type: "upload", bytes: 1e7, count: 4 },
              { type: "download", bytes: 25e6, count: 4 },
              { type: "upload", bytes: 25e6, count: 4 },
              { type: "download", bytes: 1e8, count: 3 },
              { type: "upload", bytes: 5e7, count: 3 },
              { type: "download", bytes: 25e7, count: 2 },
            ],
            measureDownloadLoadedLatency: !0,
            measureUploadLoadedLatency: !0,
            loadedLatencyThrottle: 400,
            bandwidthFinishRequestDuration: 1e3,
            estimatedServerTime: 10,
            latencyPercentile: 0.5,
            bandwidthPercentile: 0.9,
            bandwidthMinRequestDuration: 10,
            loadedRequestMinDuration: 250,
            loadedLatencyMaxPoints: 20,
          },
          rn = {
            aimMeasurementScoring: {
              packetLoss: Er([0.01, 0.05, 0.25, 0.5], [10, 5, 0, -10, -20]),
              latency: Er([10, 20, 50, 100, 500], [20, 10, 5, 0, -10, -20]),
              loadedLatencyIncrease: Er(
                [10, 20, 50, 100, 500],
                [20, 10, 5, 0, -10, -20]
              ),
              jitter: Er([10, 20, 100, 500], [10, 5, 0, -10, -20]),
              download: Er([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30]),
              upload: Er([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30]),
            },
            aimExperiencesDefs: {
              streaming: {
                input: [
                  "latency",
                  "packetLoss",
                  "download",
                  "loadedLatencyIncrease",
                ],
                pointThresholds: [15, 20, 40, 60],
              },
              gaming: {
                input: ["latency", "packetLoss", "loadedLatencyIncrease"],
                pointThresholds: [5, 15, 25, 30],
              },
              rtc: {
                input: [
                  "latency",
                  "jitter",
                  "packetLoss",
                  "loadedLatencyIncrease",
                ],
                pointThresholds: [5, 15, 25, 40],
              },
            },
          },
          nn = function (e) {
            var t = e.headers.get("server-timing");
            if (t) {
              var r = t.match(/dur=([0-9.]+)/);
              if (r) return +r[1];
            }
          },
          sn = function (e) {
            return e.responseStart - e.requestStart;
          },
          an = function (e) {
            return e.responseEnd - e.responseStart;
          },
          on = function (e) {
            return e.ping + e.payloadDownloadTime;
          },
          cn = function (e) {
            return e.ttfb;
          },
          dn = function (e, t) {
            var r = e.duration,
              n = e.transferSize,
              s = r / 1e3;
            return s ? (8 * (n || 1.005 * +t)) / s : void 0;
          },
          ln = function (e, t) {
            var r = e.duration / 1e3;
            return r ? (8 * t * 1.005) / r : void 0;
          },
          un = gr(function (e) {
            return "0".repeat(e);
          }),
          pn = new WeakMap(),
          hn = new WeakMap(),
          mn = new WeakMap(),
          fn = new WeakMap(),
          gn = new WeakMap(),
          vn = new WeakMap(),
          _n = new WeakMap(),
          yn = new WeakMap(),
          bn = new WeakMap(),
          wn = new WeakMap(),
          Sn = new WeakMap(),
          Rn = new WeakMap(),
          kn = new WeakMap(),
          En = new WeakMap(),
          Cn = new WeakMap(),
          Tn = new WeakMap(),
          Pn = new WeakMap(),
          On = new WeakMap(),
          xn = new WeakMap(),
          Dn = new WeakMap(),
          In = new WeakMap(),
          An = new WeakMap(),
          Mn = new WeakSet(),
          Ln = new WeakSet(),
          Nn = new WeakSet(),
          jn = new WeakSet();
        function Bn(e) {
          var t = this;
          e !== Kr(this, Rn) &&
            ($r(this, Rn, e),
            setTimeout(function () {
              return Kr(t, fn).call(t, Kr(t, Rn));
            }));
        }
        function Fn(e, t) {
          var r = this,
            n = Kr(this, bn)[e],
            s = n.bytes,
            i = n.dir,
            a = Kr(this, En),
            o = a[i].hasOwnProperty(s)
              ? a[i][s]
              : {
                  timings: [],
                  numMeasurements: Kr(this, bn)
                    .filter(function (e) {
                      var t = e.bytes,
                        r = e.dir;
                      return s === t && i === r;
                    })
                    .map(function (e) {
                      return e.count;
                    })
                    .reduce(function (e, t) {
                      return e + t;
                    }, 0),
                };
          t && o.timings.push(t),
            (o.timings = o.timings.slice(-o.numMeasurements)),
            (a[i][s] = o),
            t
              ? setTimeout(function () {
                  Kr(r, vn).call(r, Tr({ type: i, bytes: s }, t), a);
                })
              : Kr(this, gn).call(this, Kr(this, bn)[e], a);
        }
        function Un() {
          var e = this,
            t = Kr(this, bn),
            r = t[Kr(this, Cn)];
          if (Kr(this, Tn) >= r.count) {
            var n = Kr(this, kn);
            if (
              Kr(this, On) > this.finishRequestDuration &&
              !r.bypassMinDuration
            ) {
              var s = r.dir;
              (Kr(this, kn)[s] = !0),
                Object.values(Kr(this, kn)).every(function (e) {
                  return e;
                }) && Kr(this, _n).call(this, Kr(this, En));
            }
            $r(this, Tn, 0),
              $r(this, On, -1 / 0),
              performance.clearResourceTimings();
            do {
              $r(this, Cn, Kr(this, Cn) + 1);
            } while (Kr(this, Cn) < t.length && n[t[Kr(this, Cn)].dir]);
            if (Kr(this, Cn) >= t.length)
              return (
                $r(this, kn, { down: !0, up: !0 }),
                Qr(this, Mn, Bn).call(this, !1),
                void Kr(this, _n).call(this, Kr(this, En))
              );
            r = t[Kr(this, Cn)];
          }
          var i = Kr(this, Cn);
          0 === Kr(this, Tn) && Qr(this, Ln, Fn).call(this, i);
          var a = r,
            o = a.bytes,
            c = "down" === a.dir,
            d = Kr(this, c ? wn : Sn),
            l = Object.assign({}, Kr(this, pn));
          c && (l.bytes = "".concat(o));
          var u,
            p = ""
              .concat(
                d.startsWith("http") || d.startsWith("//")
                  ? ""
                  : window.location.origin
              )
              .concat(d, "?")
              .concat(
                Object.entries(l)
                  .map(function (e) {
                    var t = qr(e, 2),
                      r = t[0],
                      n = t[1];
                    return "".concat(r, "=").concat(n);
                  })
                  .join("&")
              ),
            h = Object.assign(
              {},
              c ? {} : { method: "POST", body: un(o) },
              Kr(this, hn)
            ),
            m = $r(
              this,
              In,
              fetch(p, h)
                .then(function (e) {
                  if (e.ok) return e;
                  throw Error(e.statusText);
                })
                .then(function (t) {
                  return e.getServerTime && (u = e.getServerTime(t)), t;
                })
                .then(function (t) {
                  return t.text().then(function (r) {
                    return (
                      Kr(e, mn) &&
                        Kr(e, mn).call(e, {
                          url: p,
                          headers: t.headers,
                          body: r,
                        }),
                      r
                    );
                  });
                })
                .then(function (t, r) {
                  if (m._cancel) r("cancelled");
                  else {
                    var n = performance.getEntriesByName(p).slice(-1)[0],
                      s = {
                        transferSize: n.transferSize,
                        ttfb: sn(n),
                        payloadDownloadTime: an(n),
                        serverTime: u || -1,
                        measTime: new Date(),
                      };
                    if (
                      ((s.ping = Math.max(0.01, s.ttfb - (u || Kr(e, Dn)))),
                      (s.duration = (c ? on : cn)(s)),
                      (s.bps = (c ? dn : ln)(s, o)),
                      c && o)
                    ) {
                      var a = +o;
                      s.transferSize &&
                        (s.transferSize < a || s.transferSize / a > 1.05) &&
                        console.warn(
                          "Requested "
                            .concat(a, "B but received ")
                            .concat(s.transferSize, "B (")
                            .concat(
                              Math.round((s.transferSize / a) * 1e4) / 100,
                              "%)."
                            )
                        );
                    }
                    Qr(e, Ln, Fn).call(e, i, s);
                    var d = s.duration;
                    $r(e, On, Kr(e, On) < 0 ? d : Math.min(Kr(e, On), d)),
                      $r(e, Tn, Kr(e, Tn) + 1),
                      $r(e, Pn, 0),
                      Kr(e, xn)
                        ? $r(
                            e,
                            An,
                            setTimeout(function () {
                              return Qr(e, Nn, Un).call(e);
                            }, Kr(e, xn))
                          )
                        : Qr(e, Nn, Un).call(e);
                  }
                })
                .catch(function (t) {
                  var r, n;
                  m._cancel ||
                    (console.warn("Error fetching ".concat(p, ": ").concat(t)),
                    $r(e, Pn, ((r = Kr(e, Pn)), (n = r++), r)),
                    n < 20
                      ? Qr(e, Nn, Un).call(e)
                      : ($r(e, Pn, 0),
                        Qr(e, Mn, Bn).call(e, !1),
                        Kr(e, yn).call(
                          e,
                          "Connection failed to "
                            .concat(p, ". Gave up after ")
                            .concat(20, " retries.")
                        )));
                })
            );
        }
        function Wn() {
          var e = Kr(this, In);
          e && (e._cancel = !0);
        }
        var qn = (function () {
            function e(t) {
              var r =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
                n = r.downloadApiUrl,
                s = r.uploadApiUrl,
                i = r.throttleMs,
                a = void 0 === i ? 0 : i,
                o = r.estimatedServerTime,
                c = void 0 === o ? 0 : o;
              if (
                (Pr(this, e),
                Zr(this, jn),
                Zr(this, Nn),
                Zr(this, Ln),
                Zr(this, Mn),
                Xr(this, pn, { writable: !0, value: {} }),
                Xr(this, hn, { writable: !0, value: {} }),
                Dr(this, "finishRequestDuration", 1e3),
                Dr(this, "getServerTime", nn),
                Xr(this, mn, {
                  writable: !0,
                  value: function (e) {
                    return e;
                  },
                }),
                Xr(this, fn, { writable: !0, value: function () {} }),
                Xr(this, gn, { writable: !0, value: function () {} }),
                Xr(this, vn, { writable: !0, value: function () {} }),
                Xr(this, _n, { writable: !0, value: function () {} }),
                Xr(this, yn, { writable: !0, value: function () {} }),
                Xr(this, bn, { writable: !0, value: void 0 }),
                Xr(this, wn, { writable: !0, value: void 0 }),
                Xr(this, Sn, { writable: !0, value: void 0 }),
                Xr(this, Rn, { writable: !0, value: !1 }),
                Xr(this, kn, { writable: !0, value: { down: !1, up: !1 } }),
                Xr(this, En, { writable: !0, value: { down: {}, up: {} } }),
                Xr(this, Cn, { writable: !0, value: 0 }),
                Xr(this, Tn, { writable: !0, value: 0 }),
                Xr(this, Pn, { writable: !0, value: 0 }),
                Xr(this, On, { writable: !0, value: -1 / 0 }),
                Xr(this, xn, { writable: !0, value: 0 }),
                Xr(this, Dn, { writable: !0, value: 0 }),
                Xr(this, In, { writable: !0, value: void 0 }),
                Xr(this, An, { writable: !0, value: void 0 }),
                !t)
              )
                throw new Error("Missing measurements argument");
              if (!n) throw new Error("Missing downloadApiUrl argument");
              if (!s) throw new Error("Missing uploadApiUrl argument");
              $r(this, bn, t),
                $r(this, wn, n),
                $r(this, Sn, s),
                $r(this, xn, a),
                $r(this, Dn, Math.max(0, c));
            }
            return (
              xr(e, [
                {
                  key: "results",
                  get: function () {
                    return Kr(this, En);
                  },
                },
                {
                  key: "qsParams",
                  get: function () {
                    return Kr(this, pn);
                  },
                  set: function (e) {
                    $r(this, pn, e);
                  },
                },
                {
                  key: "fetchOptions",
                  get: function () {
                    return Kr(this, hn);
                  },
                  set: function (e) {
                    $r(this, hn, e);
                  },
                },
                {
                  key: "responseHook",
                  set: function (e) {
                    $r(this, mn, e);
                  },
                },
                {
                  key: "onRunningChange",
                  set: function (e) {
                    $r(this, fn, e);
                  },
                },
                {
                  key: "onNewMeasurementStarted",
                  set: function (e) {
                    $r(this, gn, e);
                  },
                },
                {
                  key: "onMeasurementResult",
                  set: function (e) {
                    $r(this, vn, e);
                  },
                },
                {
                  key: "onFinished",
                  set: function (e) {
                    $r(this, _n, e);
                  },
                },
                {
                  key: "onConnectionError",
                  set: function (e) {
                    $r(this, yn, e);
                  },
                },
                {
                  key: "pause",
                  value: function () {
                    clearTimeout(Kr(this, An)),
                      Qr(this, jn, Wn).call(this),
                      Qr(this, Mn, Bn).call(this, !1);
                  },
                },
                {
                  key: "play",
                  value: function () {
                    Kr(this, Rn) ||
                      (Qr(this, Mn, Bn).call(this, !0),
                      Qr(this, Nn, Un).call(this));
                  },
                },
              ]),
              e
            );
          })(),
          Vn = [
            "measureParallelLatency",
            "parallelLatencyThrottleMs",
            "downloadApiUrl",
            "uploadApiUrl",
            "estimatedServerTime",
          ],
          Hn = new WeakMap(),
          zn = new WeakSet();
        function Gn(e) {
          var t = this;
          Kr(this, Hn) &&
            (e
              ? setTimeout(function () {
                  return Kr(t, Hn).play();
                }, 20)
              : Kr(this, Hn).pause());
        }
        var Kn = (function (e) {
            Ir(r, e);
            var t = jr(r);
            function r(e) {
              var n,
                s,
                i,
                a =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
                o = a.measureParallelLatency,
                c = void 0 !== o && o,
                d = a.parallelLatencyThrottleMs,
                l = void 0 === d ? 100 : d,
                u = a.downloadApiUrl,
                p = a.uploadApiUrl,
                h = a.estimatedServerTime,
                m = void 0 === h ? 0 : h,
                f = Lr(a, Vn);
              return (
                Pr(this, r),
                Zr(
                  Nr(
                    (i = t.call(
                      this,
                      e,
                      Tr(
                        {
                          downloadApiUrl: u,
                          uploadApiUrl: p,
                          estimatedServerTime: m,
                        },
                        f
                      )
                    ))
                  ),
                  zn
                ),
                Xr(Nr(i), Hn, { writable: !0, value: void 0 }),
                c &&
                  ($r(
                    Nr(i),
                    Hn,
                    new qn(
                      [
                        {
                          dir: "down",
                          bytes: 0,
                          count: 1 / 0,
                          bypassMinDuration: !0,
                        },
                      ],
                      {
                        downloadApiUrl: u,
                        uploadApiUrl: p,
                        estimatedServerTime: m,
                        throttleMs: l,
                      }
                    )
                  ),
                  (Kr(Nr(i), Hn).qsParams = {
                    during: "".concat(e[0].dir, "load"),
                  }),
                  Wr(
                    ((n = Nr(i)), Ar(r.prototype)),
                    "onRunningChange",
                    Qr(Nr(i), zn, Gn),
                    n,
                    !0
                  ),
                  Wr(
                    ((s = Nr(i)), Ar(r.prototype)),
                    "onConnectionError",
                    function () {
                      return Kr(Nr(i), Hn).pause();
                    },
                    s,
                    !0
                  )),
                i
              );
            }
            return (
              xr(r, [
                {
                  key: "latencyResults",
                  get: function () {
                    return Kr(this, Hn) && Kr(this, Hn).results.down[0].timings;
                  },
                },
                {
                  key: "onParallelLatencyResult",
                  set: function (e) {
                    Kr(this, Hn) &&
                      (Kr(this, Hn).onMeasurementResult = function (t) {
                        return e(t);
                      });
                  },
                },
                {
                  key: "fetchOptions",
                  get: function () {
                    return Fr(Ar(r.prototype), "fetchOptions", this);
                  },
                  set: function (e) {
                    Wr(Ar(r.prototype), "fetchOptions", e, this, !0),
                      Kr(this, Hn) && (Kr(this, Hn).fetchOptions = e);
                  },
                },
                {
                  key: "onRunningChange",
                  set: function (e) {
                    var t = this;
                    Wr(
                      Ar(r.prototype),
                      "onRunningChange",
                      function (r) {
                        Qr(t, zn, Gn).call(t, r), e(r);
                      },
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "onConnectionError",
                  set: function (e) {
                    var t = this;
                    Wr(
                      Ar(r.prototype),
                      "onConnectionError",
                      function () {
                        Kr(t, Hn) && Kr(t, Hn).pause(),
                          e.apply(void 0, arguments);
                      },
                      this,
                      !0
                    );
                  },
                },
              ]),
              r
            );
          })(qn),
          $n = ["measurementId", "logApiUrl"],
          Jn = new WeakMap(),
          Qn = new WeakMap(),
          Yn = new WeakMap(),
          Xn = new WeakMap(),
          Zn = new WeakSet(),
          es = new WeakSet();
        function ts(e) {
          Kr(this, Xn) &&
            ($r(this, Yn, +e.headers.get("cf-meta-request-time")),
            $r(this, Qn, e.body.slice(-300).split("___").pop()));
        }
        function rs(e) {
          if (Kr(this, Xn)) {
            var t = {
              type: e.type,
              bytes: e.bytes,
              ping: Math.round(e.ping),
              ttfb: Math.round(e.ttfb),
              payloadDownloadTime: Math.round(e.payloadDownloadTime),
              duration: Math.round(e.duration),
              transferSize: Math.round(e.transferSize),
              serverTime: Math.round(e.serverTime),
              token: Kr(this, Qn),
              requestTime: Kr(this, Yn),
              measId: Kr(this, Jn),
            };
            $r(this, Qn, null),
              $r(this, Yn, null),
              fetch(
                Kr(this, Xn),
                Tr(
                  { method: "POST", body: JSON.stringify(t) },
                  this.fetchOptions
                )
              );
          }
        }
        var ns = (function (e) {
            Ir(r, e);
            var t = jr(r);
            function r(e) {
              var n,
                s,
                i,
                a,
                o =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
                c = o.measurementId,
                d = o.logApiUrl,
                l = Lr(o, $n);
              return (
                Pr(this, r),
                Zr(Nr((a = t.call(this, e, l))), es),
                Zr(Nr(a), Zn),
                Xr(Nr(a), Jn, { writable: !0, value: void 0 }),
                Xr(Nr(a), Qn, { writable: !0, value: void 0 }),
                Xr(Nr(a), Yn, { writable: !0, value: void 0 }),
                Xr(Nr(a), Xn, { writable: !0, value: void 0 }),
                $r(Nr(a), Jn, c),
                $r(Nr(a), Xn, d),
                Wr(
                  ((n = Nr(a)), Ar(r.prototype)),
                  "qsParams",
                  d ? { measId: Kr(Nr(a), Jn) } : {},
                  n,
                  !0
                ),
                Wr(
                  ((s = Nr(a)), Ar(r.prototype)),
                  "responseHook",
                  function (e) {
                    return Qr(Nr(a), Zn, ts).call(Nr(a), e);
                  },
                  s,
                  !0
                ),
                Wr(
                  ((i = Nr(a)), Ar(r.prototype)),
                  "onMeasurementResult",
                  function (e) {
                    return Qr(Nr(a), es, rs).call(Nr(a), e);
                  },
                  i,
                  !0
                ),
                a
              );
            }
            return (
              xr(r, [
                {
                  key: "qsParams",
                  set: function (e) {
                    Wr(
                      Ar(r.prototype),
                      "qsParams",
                      Kr(this, Xn) ? Tr({ measId: Kr(this, Jn) }, e) : e,
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "responseHook",
                  set: function (e) {
                    var t = this;
                    Wr(
                      Ar(r.prototype),
                      "responseHook",
                      function (r) {
                        e(r), Qr(t, Zn, ts).call(t, r);
                      },
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "onMeasurementResult",
                  set: function (e) {
                    var t = this;
                    Wr(
                      Ar(r.prototype),
                      "onMeasurementResult",
                      function (r) {
                        for (
                          var n = arguments.length,
                            s = new Array(n > 1 ? n - 1 : 0),
                            i = 1;
                          i < n;
                          i++
                        )
                          s[i - 1] = arguments[i];
                        e.apply(void 0, [r].concat(s)),
                          Qr(t, es, rs).call(t, r);
                      },
                      this,
                      !0
                    );
                  },
                },
              ]),
              r
            );
          })(Kn),
          ss = new WeakMap(),
          is = new WeakMap(),
          as = new WeakMap(),
          os = new WeakSet(),
          cs = new WeakSet(),
          ds = new WeakSet(),
          ls = (function () {
            function e(t) {
              if (
                (Pr(this, e),
                Zr(this, ds),
                Zr(this, cs),
                Zr(this, os),
                Xr(this, ss, { writable: !0, value: !1 }),
                Xr(this, is, { writable: !0, value: void 0 }),
                Xr(this, as, { writable: !0, value: void 0 }),
                !t)
              )
                throw new Error("Missing operation to perform");
              $r(this, as, t), this.play();
            }
            return (
              xr(e, [
                {
                  key: "pause",
                  value: function () {
                    Qr(this, ds, hs).call(this),
                      Qr(this, os, us).call(this, !1);
                  },
                },
                {
                  key: "stop",
                  value: function () {
                    this.pause();
                  },
                },
                {
                  key: "play",
                  value: function () {
                    Kr(this, ss) ||
                      (Qr(this, os, us).call(this, !0),
                      Qr(this, cs, ps).call(this));
                  },
                },
              ]),
              e
            );
          })();
        function us(e) {
          e !== Kr(this, ss) && $r(this, ss, e);
        }
        function ps() {
          var e = this,
            t = $r(
              this,
              is,
              Kr(this, as)
                .call(this)
                .then(function () {
                  !t._cancel && Qr(e, cs, ps).call(e);
                })
            );
        }
        function hs() {
          var e = Kr(this, is);
          e && (e._cancel = !0);
        }
        var ms = new WeakMap(),
          fs = (function () {
            function e() {
              var t = this,
                r =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {},
                n = r.download,
                s = r.upload;
              if (
                (Pr(this, e),
                Dr(this, "qsParams", {}),
                Dr(this, "fetchOptions", {}),
                Xr(this, ms, { writable: !0, value: [] }),
                !n && !s)
              )
                throw new Error(
                  "Missing at least one of download/upload config"
                );
              [
                [n, "download"],
                [s, "upload"],
              ]
                .filter(function (e) {
                  return qr(e, 1)[0];
                })
                .forEach(function (e) {
                  var t = qr(e, 2),
                    r = t[0],
                    n = t[1],
                    s = r.apiUrl,
                    i = r.chunkSize;
                  if (!s)
                    throw new Error("Missing ".concat(n, " apiUrl argument"));
                  if (!i)
                    throw new Error(
                      "Missing ".concat(n, " chunkSize argument")
                    );
                });
              var i = function (e) {
                var r = e.apiUrl,
                  n = e.qsParams,
                  s = void 0 === n ? {} : n,
                  i = e.fetchOptions,
                  a = void 0 === i ? {} : i;
                return new ls(function () {
                  var e = Object.assign({}, s, t.qsParams),
                    n = ""
                      .concat(
                        r.startsWith("http") || r.startsWith("//")
                          ? ""
                          : window.location.origin
                      )
                      .concat(r, "?")
                      .concat(
                        Object.entries(e)
                          .map(function (e) {
                            var t = qr(e, 2),
                              r = t[0],
                              n = t[1];
                            return "".concat(r, "=").concat(n);
                          })
                          .join("&")
                      ),
                    i = Object.assign({}, a, t.fetchOptions);
                  return fetch(n, i)
                    .then(function (e) {
                      if (e.ok) return e;
                      throw Error(e.statusText);
                    })
                    .then(function (e) {
                      return e.text();
                    });
                });
              };
              n &&
                Kr(this, ms).push(
                  i({
                    apiUrl: n.apiUrl,
                    qsParams: { bytes: "".concat(n.chunkSize) },
                  })
                ),
                s &&
                  Kr(this, ms).push(
                    i({
                      apiUrl: s.apiUrl,
                      fetchOptions: {
                        method: "POST",
                        body: "0".repeat(s.chunkSize),
                      },
                    })
                  );
            }
            return (
              xr(e, [
                {
                  key: "pause",
                  value: function () {
                    Kr(this, ms).forEach(function (e) {
                      return e.pause();
                    });
                  },
                },
                {
                  key: "stop",
                  value: function () {
                    this.pause();
                  },
                },
                {
                  key: "play",
                  value: function () {
                    Kr(this, ms).forEach(function (e) {
                      return e.play();
                    });
                  },
                },
              ]),
              e
            );
          })(),
          gs = ["iceServers", "acceptIceCandidate", "dataChannelCfg"],
          vs = new WeakMap(),
          _s = new WeakMap(),
          ys = new WeakMap(),
          bs = new WeakMap(),
          ws = new WeakMap(),
          Ss = (function () {
            function e() {
              var t = this,
                r =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {},
                n = r.iceServers,
                s = void 0 === n ? [] : n,
                i = r.acceptIceCandidate,
                a =
                  void 0 === i
                    ? function (e) {
                        var t = e.protocol || "";
                        if (!t && e.candidate) {
                          var r = e.candidate.split(" ");
                          r.length >= 3 && (t = r[2]);
                        }
                        return "udp" === t.toLowerCase();
                      }
                    : i,
                o = r.dataChannelCfg,
                c = void 0 === o ? { ordered: !1, maxRetransmits: 0 } : o,
                d = Lr(r, gs);
              Pr(this, e),
                Dr(this, "onOpen", function () {}),
                Dr(this, "onClose", function () {}),
                Dr(this, "onMessageReceived", function () {}),
                Xr(this, vs, { writable: !0, value: !1 }),
                Xr(this, _s, { writable: !0, value: void 0 }),
                Xr(this, ys, { writable: !0, value: void 0 }),
                Xr(this, bs, { writable: !0, value: void 0 }),
                Xr(this, ws, { writable: !0, value: void 0 });
              var l = new RTCPeerConnection(Tr({ iceServers: s }, d)),
                u = new RTCPeerConnection(Tr({ iceServers: s }, d)),
                p = l.createDataChannel("channel", c);
              (p.onopen = function () {
                $r(t, vs, !0), t.onOpen();
              }),
                (p.onclose = function () {
                  return t.close();
                }),
                (u.ondatachannel = function (e) {
                  var r = e.channel;
                  (r.onclose = function () {
                    return t.close();
                  }),
                    (r.onmessage = function (e) {
                      return t.onMessageReceived(e.data);
                    }),
                    $r(t, ws, r);
                }),
                (l.onicecandidate = function (e) {
                  e.candidate &&
                    a(e.candidate) &&
                    u.addIceCandidate(e.candidate);
                }),
                (u.onicecandidate = function (e) {
                  e.candidate &&
                    a(e.candidate) &&
                    l.addIceCandidate(e.candidate);
                }),
                l
                  .createOffer()
                  .then(function (e) {
                    return l.setLocalDescription(e);
                  })
                  .then(function () {
                    return u.setRemoteDescription(l.localDescription);
                  })
                  .then(function () {
                    return u.createAnswer();
                  })
                  .then(function (e) {
                    return u.setLocalDescription(e);
                  })
                  .then(function () {
                    return l.setRemoteDescription(u.localDescription);
                  }),
                $r(this, _s, l),
                $r(this, ys, u),
                $r(this, bs, p),
                $r(this, vs, !1);
            }
            return (
              xr(e, [
                {
                  key: "send",
                  value: function (e) {
                    return Kr(this, bs).send(e);
                  },
                },
                {
                  key: "close",
                  value: function () {
                    return (
                      Kr(this, _s) && Kr(this, _s).close(),
                      Kr(this, ys) && Kr(this, ys).close(),
                      Kr(this, bs) && Kr(this, bs).close(),
                      Kr(this, ws) && Kr(this, ws).close(),
                      Kr(this, vs) && this.onClose(),
                      $r(this, vs, !1),
                      this
                    );
                  },
                },
              ]),
              e
            );
          })(),
          Rs = new WeakMap(),
          ks = new WeakMap(),
          Es = new WeakMap(),
          Cs = new WeakMap(),
          Ts = new WeakMap(),
          Ps = new WeakMap(),
          Os = (function () {
            function e() {
              var t = this,
                r =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {},
                n = r.turnServerUri,
                s = r.turnServerCredsApi,
                i = r.turnServerCredsApiParser,
                a =
                  void 0 === i
                    ? function (e) {
                        return {
                          turnServerUser: e.username,
                          turnServerPass: e.credential,
                        };
                      }
                    : i,
                o = r.turnServerCredsApiIncludeCredentials,
                c = void 0 !== o && o,
                d = r.turnServerUser,
                l = r.turnServerPass,
                u = r.numMsgs,
                p = void 0 === u ? 100 : u,
                h = r.batchSize,
                m = void 0 === h ? 10 : h,
                f = r.batchWaitTime,
                g = void 0 === f ? 10 : f,
                v = r.responsesWaitTime,
                _ = void 0 === v ? 5e3 : v,
                y = r.connectionTimeout,
                b = void 0 === y ? 5e3 : y;
              if (
                (Pr(this, e),
                Xr(this, Rs, { writable: !0, value: function () {} }),
                Xr(this, ks, { writable: !0, value: function () {} }),
                Xr(this, Es, { writable: !0, value: function () {} }),
                Dr(this, "onMsgSent", function () {}),
                Dr(this, "onAllMsgsSent", function () {}),
                Dr(this, "onMsgReceived", function () {}),
                Xr(this, Cs, { writable: !0, value: {} }),
                Xr(this, Ts, { writable: !0, value: void 0 }),
                Xr(this, Ps, { writable: !0, value: void 0 }),
                !n)
              )
                throw new Error("Missing turnServerUri argument");
              if (!((d && l) || s))
                throw new Error(
                  "Missing either turnServerCredsApi or turnServerUser+turnServerPass arguments"
                );
              $r(this, Ps, p),
                (d && l
                  ? Promise.resolve({ turnServerUser: d, turnServerPass: l })
                  : fetch(s, { credentials: c ? "include" : void 0 })
                      .then(function (e) {
                        return e.json();
                      })
                      .then(function (e) {
                        if (e.error) throw e.error;
                        return e;
                      })
                      .then(a)
                )
                  .catch(function (e) {
                    return Kr(t, Rs).call(t, e);
                  })
                  .then(function (e) {
                    var r = e.turnServerUser,
                      s = e.turnServerPass,
                      i = $r(
                        t,
                        Ts,
                        new Ss({
                          iceServers: [
                            {
                              urls: "turn:".concat(n, "?transport=udp"),
                              username: r,
                              credential: s,
                            },
                          ],
                          iceTransportPolicy: "relay",
                        })
                      ),
                      a = !1;
                    setTimeout(function () {
                      a ||
                        (i.close(),
                        Kr(t, ks).call(t, "ICE connection timeout!"));
                    }, b);
                    var o = Kr(t, Cs);
                    (i.onOpen = function () {
                      a = !0;
                      var e = t;
                      !(function t(r) {
                        if (r <= p) {
                          for (var n = r; n <= Math.min(p, r + m - 1); )
                            (o[n] = !1), i.send(n), e.onMsgSent(n), n++;
                          setTimeout(function () {
                            return t(n);
                          }, g);
                        } else {
                          e.onAllMsgsSent(Object.keys(o).length);
                          var s = function () {
                              i.close(), Kr(e, Es).call(e, e.results);
                            },
                            a = setTimeout(s, _),
                            c = Object.values(Kr(e, Cs)).filter(function (e) {
                              return !e;
                            }).length;
                          i.onMessageReceived = function (t) {
                            clearTimeout(a),
                              (o[t] = !0),
                              e.onMsgReceived(t),
                              --c <= 0 &&
                              Object.values(Kr(e, Cs)).every(function (e) {
                                return e;
                              })
                                ? s()
                                : (a = setTimeout(s, _));
                          };
                        }
                      })(1);
                    }),
                      (i.onMessageReceived = function (e) {
                        (o[e] = !0), t.onMsgReceived(e);
                      });
                  })
                  .catch(function (e) {
                    return Kr(t, ks).call(t, e.toString());
                  });
            }
            return (
              xr(e, [
                {
                  key: "onCredentialsFailure",
                  set: function (e) {
                    $r(this, Rs, e);
                  },
                },
                {
                  key: "onConnectionError",
                  set: function (e) {
                    $r(this, ks, e);
                  },
                },
                {
                  key: "onFinished",
                  set: function (e) {
                    $r(this, Es, e);
                  },
                },
                {
                  key: "results",
                  get: function () {
                    var e = Kr(this, Ps),
                      t = Object.keys(Kr(this, Cs)).length,
                      r = Object.entries(Kr(this, Cs))
                        .filter(function (e) {
                          return !qr(e, 2)[1];
                        })
                        .map(function (e) {
                          return +qr(e, 1)[0];
                        });
                    return {
                      totalMessages: e,
                      numMessagesSent: t,
                      packetLoss: r.length / t,
                      lostMessages: r,
                    };
                  },
                },
              ]),
              e
            );
          })(),
          xs = [
            "downloadChunkSize",
            "uploadChunkSize",
            "downloadApiUrl",
            "uploadApiUrl",
          ],
          Ds = new WeakMap(),
          Is = (function (e) {
            Ir(r, e);
            var t = jr(r);
            function r() {
              var e,
                n,
                s,
                i,
                a =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {},
                o = a.downloadChunkSize,
                c = a.uploadChunkSize,
                d = a.downloadApiUrl,
                l = a.uploadApiUrl,
                u = Lr(a, xs);
              return (
                Pr(this, r),
                Xr(Nr((i = t.call(this, u))), Ds, {
                  writable: !0,
                  value: void 0,
                }),
                (o || c) &&
                  ($r(
                    Nr(i),
                    Ds,
                    new fs({
                      download: o ? { apiUrl: d, chunkSize: o } : null,
                      upload: c ? { apiUrl: l, chunkSize: c } : null,
                    })
                  ),
                  Wr(
                    ((e = Nr(i)), Ar(r.prototype)),
                    "onCredentialsFailure",
                    Wr(
                      ((s = Nr(i)), Ar(r.prototype)),
                      "onConnectionError",
                      Wr(
                        ((n = Nr(i)), Ar(r.prototype)),
                        "onFinished",
                        function () {
                          return Kr(Nr(i), Ds).stop();
                        },
                        n,
                        !0
                      ),
                      s,
                      !0
                    ),
                    e,
                    !0
                  )),
                i
              );
            }
            return (
              xr(r, [
                {
                  key: "qsParams",
                  set: function (e) {
                    Kr(this, Ds) && (Kr(this, Ds).qsParams = e);
                  },
                },
                {
                  key: "fetchOptions",
                  set: function (e) {
                    Kr(this, Ds) && (Kr(this, Ds).fetchOptions = e);
                  },
                },
                {
                  key: "onCredentialsFailure",
                  set: function (e) {
                    var t = this;
                    Wr(
                      Ar(r.prototype),
                      "onCredentialsFailure",
                      function () {
                        e.apply(void 0, arguments),
                          Kr(t, Ds) && Kr(t, Ds).stop();
                      },
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "onConnectionError",
                  set: function (e) {
                    var t = this;
                    Wr(
                      Ar(r.prototype),
                      "onConnectionError",
                      function () {
                        e.apply(void 0, arguments),
                          Kr(t, Ds) && Kr(t, Ds).stop();
                      },
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "onFinished",
                  set: function (e) {
                    var t = this;
                    Wr(
                      Ar(r.prototype),
                      "onFinished",
                      function () {
                        e.apply(void 0, arguments),
                          Kr(t, Ds) && Kr(t, Ds).stop();
                      },
                      this,
                      !0
                    );
                  },
                },
              ]),
              r
            );
          })(Os),
          As = ["reachable"],
          Ms = xr(function e(t) {
            var r = this,
              n =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : {},
              s = n.timeout,
              i = void 0 === s ? -1 : s,
              a = n.fetchOptions,
              o = void 0 === a ? {} : a;
            Pr(this, e), Dr(this, "onFinished", function () {});
            var c = !1,
              d = function (e) {
                var n = e.reachable,
                  s = Lr(e, As);
                c ||
                  ((c = !0),
                  r.onFinished(Tr({ targetUrl: t, reachable: n }, s)));
              };
            fetch(t, o)
              .then(function (e) {
                d({ reachable: !0, response: e });
              })
              .catch(function (e) {
                d({ reachable: !1, error: e });
              }),
              i > 0 &&
                setTimeout(function () {
                  return d({ reachable: !1, error: "Request timeout" });
                }, i);
          }),
          Ls = function (e) {
            var t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0.5;
            if (!e.length) return 0;
            var r = e.slice().sort(function (e, t) {
                return e - t;
              }),
              n = (e.length - 1) * t,
              s = n % 1;
            if (0 === s) return r[Math.round(n)];
            var i = [Math.floor, Math.ceil].map(function (e) {
              return r[e(n)];
            });
            return i[0] + (i[1] - i[0]) * s;
          },
          Ns = new WeakMap(),
          js = new WeakMap(),
          Bs = (function () {
            function e(t) {
              var r = this;
              Pr(this, e),
                Dr(this, "getLatencyPoints", function (e) {
                  return e.timings.map(function (e) {
                    return e.ping;
                  });
                }),
                Dr(this, "getLatency", function (e) {
                  return Ls(r.getLatencyPoints(e), Kr(r, Ns).latencyPercentile);
                }),
                Dr(this, "getBandwidthPoints", function (e) {
                  return Object.entries(e)
                    .map(function (e) {
                      var t = qr(e, 2),
                        r = t[0];
                      return t[1].timings.map(function (e) {
                        var t = e.bps,
                          n = e.duration,
                          s = e.ping,
                          i = e.measTime,
                          a = e.serverTime,
                          o = e.transferSize;
                        return {
                          bytes: +r,
                          bps: t,
                          duration: n,
                          ping: s,
                          measTime: i,
                          serverTime: a,
                          transferSize: o,
                        };
                      });
                    })
                    .flat();
                }),
                Dr(this, "getBandwidth", function (e) {
                  return Ls(
                    r
                      .getBandwidthPoints(e)
                      .filter(function (e) {
                        return (
                          e.duration >= Kr(r, Ns).bandwidthMinRequestDuration
                        );
                      })
                      .map(function (e) {
                        return e.bps;
                      })
                      .filter(function (e) {
                        return e;
                      }),
                    Kr(r, Ns).bandwidthPercentile
                  );
                }),
                Dr(this, "getLoadedLatency", function (e) {
                  return r.getLatency({ timings: Kr(r, js).call(r, e) });
                }),
                Dr(this, "getLoadedJitter", function (e) {
                  return r.getJitter({ timings: Kr(r, js).call(r, e) });
                }),
                Dr(this, "getLoadedLatencyPoints", function (e) {
                  return r.getLatencyPoints({ timings: Kr(r, js).call(r, e) });
                }),
                Dr(this, "getPacketLoss", function (e) {
                  return e.packetLoss;
                }),
                Dr(this, "getPacketLossDetails", function (e) {
                  return e;
                }),
                Dr(this, "getReachability", function (e) {
                  return !!e.reachable;
                }),
                Dr(this, "getReachabilityDetails", function (e) {
                  return { host: e.host, reachable: e.reachable };
                }),
                Xr(this, Ns, { writable: !0, value: void 0 }),
                Xr(this, js, {
                  writable: !0,
                  value: function (e) {
                    return Object.values(e)
                      .filter(function (e) {
                        return (
                          e.timings.length &&
                          Math.min.apply(
                            Math,
                            Vr(
                              e.timings.map(function (e) {
                                return e.duration;
                              })
                            )
                          ) >= Kr(r, Ns).loadedRequestMinDuration
                        );
                      })
                      .map(function (e) {
                        return e.sideLatency || [];
                      })
                      .flat()
                      .slice(-Kr(r, Ns).loadedLatencyMaxPoints);
                  },
                }),
                $r(this, Ns, t);
            }
            return (
              xr(e, [
                {
                  key: "getJitter",
                  value: function (e) {
                    var t = this.getLatencyPoints(e);
                    return t.length < 2
                      ? null
                      : t.reduce(function (e, t) {
                          var r = e.sumDeltas,
                            n = void 0 === r ? 0 : r,
                            s = e.prevLatency;
                          return {
                            sumDeltas: n + (void 0 !== s ? Math.abs(s - t) : 0),
                            prevLatency: t,
                          };
                        }, {}).sumDeltas /
                          (t.length - 1);
                  },
                },
              ]),
              e
            );
          })(),
          Fs = ["bad", "poor", "average", "good", "great"],
          Us = {
            loadedLatencyIncrease: function (e) {
              return e.latency && (e.downLoadedLatency || e.upLoadedLatency)
                ? Math.max(e.downLoadedLatency, e.upLoadedLatency) - e.latency
                : void 0;
            },
          },
          Ws = { packetLoss: 0 },
          qs = new WeakMap(),
          Vs = (function () {
            function e(t) {
              Pr(this, e),
                Xr(this, qs, { writable: !0, value: void 0 }),
                $r(this, qs, t);
            }
            return (
              xr(e, [
                {
                  key: "getScores",
                  value: function (e) {
                    var t = Object.assign.apply(
                      Object,
                      Vr(
                        Object.entries(Kr(this, qs).aimMeasurementScoring).map(
                          function (t) {
                            var r = qr(t, 2),
                              n = r[0],
                              s = r[1],
                              i = Us.hasOwnProperty(n) ? Us[n](e) : e[n];
                            return void 0 === i
                              ? Ws.hasOwnProperty(n)
                                ? Dr({}, n, Ws[n])
                                : {}
                              : Dr({}, n, void 0 === i ? 0 : +s(i));
                          }
                        )
                      )
                    );
                    return Object.assign.apply(
                      Object,
                      [{}].concat(
                        Vr(
                          Object.entries(Kr(this, qs).aimExperiencesDefs)
                            .filter(function (e) {
                              return qr(e, 2)[1].input.every(function (e) {
                                return t.hasOwnProperty(e);
                              });
                            })
                            .map(function (e) {
                              var r,
                                n = qr(e, 2),
                                s = n[0],
                                i = n[1],
                                a = i.input,
                                o = i.pointThresholds,
                                c = Math.max(
                                  0,
                                  ((r = a.map(function (e) {
                                    return t[e];
                                  })),
                                  r.reduce(function (e, t) {
                                    return e + t;
                                  }, 0))
                                ),
                                d = Er(o, [0, 1, 2, 3, 4])(c);
                              return Dr({}, s, {
                                points: c,
                                classificationIdx: d,
                                classificationName: Fs[d],
                              });
                            })
                        )
                      )
                    );
                  },
                },
              ]),
              e
            );
          })(),
          Hs = new WeakMap(),
          zs = new WeakMap(),
          Gs = new WeakMap(),
          Ks = new WeakMap(),
          $s = new WeakMap(),
          Js = new WeakMap(),
          Qs = new WeakMap(),
          Ys = new WeakMap(),
          Xs = (function () {
            function e(t) {
              var r = this;
              Pr(this, e),
                Dr(this, "raw", void 0),
                Dr(this, "getUnloadedLatency", function () {
                  return Kr(r, Ks).call(r, "getLatency", "latency");
                }),
                Dr(this, "getUnloadedJitter", function () {
                  return Kr(r, Ks).call(r, "getJitter", "latency");
                }),
                Dr(this, "getUnloadedLatencyPoints", function () {
                  return Kr(r, Ks).call(r, "getLatencyPoints", "latency", []);
                }),
                Dr(this, "getDownLoadedLatency", function () {
                  return Kr(r, Ks).call(r, "getLoadedLatency", "download");
                }),
                Dr(this, "getDownLoadedJitter", function () {
                  return Kr(r, Ks).call(r, "getLoadedJitter", "download");
                }),
                Dr(this, "getDownLoadedLatencyPoints", function () {
                  return Kr(r, Ks).call(
                    r,
                    "getLoadedLatencyPoints",
                    "download",
                    []
                  );
                }),
                Dr(this, "getUpLoadedLatency", function () {
                  return Kr(r, Ks).call(r, "getLoadedLatency", "upload");
                }),
                Dr(this, "getUpLoadedJitter", function () {
                  return Kr(r, Ks).call(r, "getLoadedJitter", "upload");
                }),
                Dr(this, "getUpLoadedLatencyPoints", function () {
                  return Kr(r, Ks).call(
                    r,
                    "getLoadedLatencyPoints",
                    "upload",
                    []
                  );
                }),
                Dr(this, "getDownloadBandwidth", function () {
                  return Kr(r, Ks).call(r, "getBandwidth", "download");
                }),
                Dr(this, "getDownloadBandwidthPoints", function () {
                  return Kr(r, Ks).call(
                    r,
                    "getBandwidthPoints",
                    "download",
                    []
                  );
                }),
                Dr(this, "getUploadBandwidth", function () {
                  return Kr(r, Ks).call(r, "getBandwidth", "upload");
                }),
                Dr(this, "getUploadBandwidthPoints", function () {
                  return Kr(r, Ks).call(r, "getBandwidthPoints", "upload", []);
                }),
                Dr(this, "getPacketLoss", function () {
                  return Kr(r, Ks).call(r, "getPacketLoss", "packetLoss");
                }),
                Dr(this, "getPacketLossDetails", function () {
                  return Kr(r, Ks).call(
                    r,
                    "getPacketLossDetails",
                    "packetLoss",
                    void 0,
                    !0
                  );
                }),
                Dr(this, "getScores", function () {
                  return Kr(r, Gs).getScores(r.getSummary());
                }),
                Xr(this, Hs, { writable: !0, value: void 0 }),
                Xr(this, zs, { writable: !0, value: void 0 }),
                Xr(this, Gs, { writable: !0, value: void 0 }),
                Xr(this, Ks, {
                  writable: !0,
                  value: function (e, t) {
                    var n =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : void 0,
                      s =
                        arguments.length > 3 &&
                        void 0 !== arguments[3] &&
                        arguments[3];
                    return r.raw.hasOwnProperty(t) && r.raw[t].started
                      ? s && r.raw[t].error
                        ? { error: r.raw[t].error }
                        : Kr(r, zs)[e](r.raw[t].results)
                      : n;
                  },
                }),
                Xr(this, $s, {
                  writable: !0,
                  value: function () {
                    return Kr(r, Ks).call(
                      r,
                      "getReachability",
                      "v4Reachability"
                    );
                  },
                }),
                Xr(this, Js, {
                  writable: !0,
                  value: function () {
                    return Kr(r, Ks).call(
                      r,
                      "getReachabilityDetails",
                      "v4Reachability"
                    );
                  },
                }),
                Xr(this, Qs, {
                  writable: !0,
                  value: function () {
                    return Kr(r, Ks).call(
                      r,
                      "getReachability",
                      "v6Reachability"
                    );
                  },
                }),
                Xr(this, Ys, {
                  writable: !0,
                  value: function () {
                    return Kr(r, Ks).call(
                      r,
                      "getReachabilityDetails",
                      "v6Reachability"
                    );
                  },
                }),
                $r(this, Hs, t),
                this.clear(),
                $r(this, zs, new Bs(Kr(this, Hs))),
                $r(this, Gs, new Vs(Kr(this, Hs)));
            }
            return (
              xr(e, [
                {
                  key: "isFinished",
                  get: function () {
                    return Object.values(this.raw).every(function (e) {
                      return e.finished;
                    });
                  },
                },
                {
                  key: "clear",
                  value: function () {
                    this.raw = Object.assign.apply(
                      Object,
                      [{}].concat(
                        Vr(
                          Vr(
                            new Set(
                              Kr(this, Hs).measurements.map(function (e) {
                                return e.type;
                              })
                            )
                          ).map(function (e) {
                            return Dr({}, e, {
                              started: !1,
                              finished: !1,
                              results: {},
                            });
                          })
                        )
                      )
                    );
                  },
                },
                {
                  key: "getSummary",
                  value: function () {
                    var e = {
                      download: this.getDownloadBandwidth,
                      upload: this.getUploadBandwidth,
                      latency: this.getUnloadedLatency,
                      jitter: this.getUnloadedJitter,
                      downLoadedLatency: this.getDownLoadedLatency,
                      downLoadedJitter: this.getDownLoadedJitter,
                      upLoadedLatency: this.getUpLoadedLatency,
                      upLoadedJitter: this.getUpLoadedJitter,
                      packetLoss: this.getPacketLoss,
                      v4Reachability: Kr(this, $s),
                      v6Reachability: Kr(this, Qs),
                    };
                    return Object.assign.apply(
                      Object,
                      Vr(
                        Object.entries(e).map(function (e) {
                          var t = qr(e, 2),
                            r = t[0],
                            n = (0, t[1])();
                          return void 0 === n ? {} : Dr({}, r, n);
                        })
                      )
                    );
                  },
                },
              ]),
              e
            );
          })(),
          Zs = function (e) {
            var t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
            return e ? Math.round(e * Math.pow(10, t)) / Math.pow(10, t) : e;
          },
          ei = function (e) {
            return e.map(function (e) {
              return Zs(e, 2);
            });
          },
          ti = function (e) {
            return e.map(function (e) {
              return { bytes: +e.bytes, bps: Zs(e.bps) };
            });
          },
          ri = {
            latencyMs: ["getUnloadedLatencyPoints", ei],
            download: ["getDownloadBandwidthPoints", ti],
            upload: ["getUploadBandwidthPoints", ti],
            downLoadedLatencyMs: ["getDownLoadedLatencyPoints", ei],
            upLoadedLatencyMs: ["getUpLoadedLatencyPoints", ei],
            packetLoss: [
              "getPacketLossDetails",
              function (e) {
                return e.error
                  ? void 0
                  : {
                      numMessages: e.numMessagesSent,
                      lossRatio: Zs(e.packetLoss, 4),
                    };
              },
            ],
          },
          ni = function (e, t) {
            var r = t.apiUrl,
              n = {};
            Object.entries(ri).forEach(function (t) {
              var r = qr(t, 2),
                s = r[0],
                i = qr(r[1], 2),
                a = i[0],
                o = i[1],
                c =
                  void 0 === o
                    ? function (e) {
                        return e;
                      }
                    : o,
                d = e[a]();
              d && (n[s] = c(d));
            });
            var s = e.getScores();
            s &&
              (n.scores = Object.assign.apply(
                Object,
                [{}].concat(
                  Vr(
                    Object.entries(s).map(function (e) {
                      var t,
                        r = qr(e, 2),
                        n = r[0],
                        s = r[1];
                      return Dr({}, n, {
                        points: (t = s).points,
                        classification: t.classificationName,
                      });
                    })
                  )
                )
              )),
              fetch(r, { method: "POST", body: JSON.stringify(n) });
          },
          si = ["type"],
          ii = ["numPackets"],
          ai = ["bytes"],
          oi = ["latency", "latencyUnderLoad", "download", "upload"],
          ci = function () {
            return "".concat(Math.round(1e16 * Math.random()));
          },
          di = new WeakMap(),
          li = new WeakMap(),
          ui = new WeakMap(),
          pi = new WeakMap(),
          hi = new WeakMap(),
          mi = new WeakMap(),
          fi = new WeakMap(),
          gi = new WeakMap(),
          vi = new WeakMap(),
          _i = new WeakMap(),
          yi = new WeakMap(),
          bi = new WeakSet(),
          wi = new WeakSet(),
          Si = new WeakSet(),
          Ri = new WeakSet(),
          ki = new WeakSet(),
          Ei = new WeakSet(),
          Ci = new WeakSet(),
          Ti = (function () {
            function e() {
              var t =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : {};
              Pr(this, e),
                Zr(this, Ci),
                Zr(this, Ei),
                Zr(this, ki),
                Zr(this, Ri),
                Zr(this, Si),
                Zr(this, wi),
                Zr(this, bi),
                Dr(this, "onRunningChange", function () {}),
                Dr(this, "onResultsChange", function () {}),
                Xr(this, di, { writable: !0, value: function () {} }),
                Xr(this, li, { writable: !0, value: function () {} }),
                Xr(this, ui, { writable: !0, value: void 0 }),
                Xr(this, pi, { writable: !0, value: void 0 }),
                Xr(this, hi, { writable: !0, value: ci() }),
                Xr(this, mi, { writable: !0, value: -1 }),
                Xr(this, fi, { writable: !0, value: void 0 }),
                Xr(this, gi, { writable: !0, value: 1e6 }),
                Xr(this, vi, { writable: !0, value: 1e6 }),
                Xr(this, _i, { writable: !0, value: !1 }),
                Xr(this, yi, { writable: !0, value: !1 }),
                $r(this, ui, Object.assign({}, tn, t, rn)),
                $r(this, pi, new Xs(Kr(this, ui))),
                Kr(this, ui).autoStart && this.play();
            }
            return (
              xr(e, [
                {
                  key: "results",
                  get: function () {
                    return Kr(this, pi);
                  },
                },
                {
                  key: "isRunning",
                  get: function () {
                    return Kr(this, _i);
                  },
                },
                {
                  key: "isFinished",
                  get: function () {
                    return Kr(this, yi);
                  },
                },
                {
                  key: "onFinish",
                  set: function (e) {
                    $r(this, di, e);
                  },
                },
                {
                  key: "onError",
                  set: function (e) {
                    $r(this, li, e);
                  },
                },
                {
                  key: "pause",
                  value: function () {
                    oi.includes(Qr(this, Si, xi).call(this)) &&
                      Kr(this, fi).pause(),
                      Qr(this, bi, Pi).call(this, !1);
                  },
                },
                {
                  key: "play",
                  value: function () {
                    Kr(this, _i) ||
                      (Qr(this, bi, Pi).call(this, !0),
                      Qr(this, Ci, Mi).call(this));
                  },
                },
                {
                  key: "restart",
                  value: function () {
                    Qr(this, ki, Ii).call(this), this.play();
                  },
                },
              ]),
              e
            );
          })();
        function Pi(e) {
          e !== Kr(this, _i) &&
            ($r(this, _i, e), this.onRunningChange(Kr(this, _i)));
        }
        function Oi(e) {
          var t = this;
          e !== Kr(this, yi) &&
            ($r(this, yi, e),
            e &&
              setTimeout(function () {
                return Kr(t, di).call(t, t.results);
              }));
        }
        function xi() {
          return Kr(this, mi) < 0 ||
            Kr(this, mi) >= Kr(this, ui).measurements.length
            ? null
            : Kr(this, ui).measurements[Kr(this, mi)].type;
        }
        function Di() {
          return Kr(this, pi).raw[Qr(this, Si, xi).call(this)] || void 0;
        }
        function Ii() {
          Qr(this, Ei, Ai).call(this),
            $r(this, hi, ci()),
            $r(this, mi, -1),
            $r(this, fi, void 0),
            Qr(this, bi, Pi).call(this, !1),
            Qr(this, wi, Oi).call(this, !1),
            Kr(this, pi).clear();
        }
        function Ai() {
          var e = Kr(this, fi);
          e &&
            ((e.onFinished =
              e.onConnectionError =
              e.onFail =
              e.onMsgReceived =
              e.onCredentialsFailure =
              e.onMeasurementResult =
                function () {}),
            oi.includes(Qr(this, Si, xi).call(this)) && e.pause());
        }
        function Mi() {
          var e,
            t = this;
          if (
            !(
              oi.includes(Qr(this, Si, xi).call(this)) &&
              Qr(this, Ri, Di).call(this) &&
              Qr(this, Ri, Di).call(this).started
            ) ||
            Qr(this, Ri, Di).call(this).finished ||
            Qr(this, Ri, Di).call(this).finishedCurrentRound ||
            Qr(this, Ri, Di).call(this).error
          ) {
            if (
              ($r(this, mi, ((e = Kr(this, mi)), ++e)),
              Kr(this, mi) >= Kr(this, ui).measurements.length)
            )
              return (
                Qr(this, bi, Pi).call(this, !1),
                void Qr(this, wi, Oi).call(this, !0)
              );
            var r,
              n = Kr(this, ui).measurements[Kr(this, mi)],
              s = n.type,
              i = Lr(n, si),
              a = Qr(this, Ri, Di).call(this),
              o = Kr(this, ui),
              c = o.downloadApiUrl,
              d = o.uploadApiUrl,
              l = o.estimatedServerTime;
            switch (s) {
              case "v4Reachability":
              case "v6Reachability":
                (r = new Ms("https://".concat(i.host), {
                  fetchOptions: { method: "GET", mode: "no-cors" },
                })).onFinished = function (e) {
                  (a.finished = !0),
                    (a.results = Tr({ host: i.host }, e)),
                    t.onResultsChange({ type: s }),
                    Qr(t, Ci, Mi).call(t);
                };
                break;
              case "rpki":
                (r = new Ms("https://".concat(Kr(this, ui).rpkiInvalidHost), {
                  timeout: 5e3,
                })).onFinished = function (e) {
                  (e.response ? e.response.json() : Promise.resolve()).then(
                    function (r) {
                      (a.finished = !0),
                        (a.results = Tr(
                          {
                            host: Kr(t, ui).rpkiInvalidHost,
                            filteringInvalids: !e.reachable,
                          },
                          r ? { asn: r.asn, name: r.name } : {}
                        )),
                        t.onResultsChange({ type: s }),
                        Qr(t, Ci, Mi).call(t);
                    }
                  );
                };
                break;
              case "nxdomain":
                (r = new Ms("https://".concat(i.nxhost), {
                  fetchOptions: { mode: "no-cors" },
                })).onFinished = function (e) {
                  (a.finished = !0),
                    (a.results = { host: i.nxhost, reachable: e.reachable }),
                    t.onResultsChange({ type: s }),
                    Qr(t, Ci, Mi).call(t);
                };
                break;
              case "packetLoss":
              case "packetLossUnderLoad":
                a.finished = !1;
                var u = i.numPackets,
                  p = Lr(i, ii),
                  h = Kr(this, ui),
                  m = h.turnServerUri,
                  f = h.turnServerCredsApiUrl,
                  g = h.turnServerUser,
                  v = h.turnServerPass,
                  _ = h.includeCredentials;
                ((r = new Is(
                  Tr(
                    {
                      turnServerUri: m,
                      turnServerCredsApi: f,
                      turnServerCredsApiIncludeCredentials: _,
                      turnServerUser: g,
                      turnServerPass: v,
                      numMsgs: u,
                      downloadChunkSize: i.loadDown ? Kr(this, gi) : void 0,
                      uploadChunkSize: i.loadUp ? Kr(this, vi) : void 0,
                      downloadApiUrl: c,
                      uploadApiUrl: d,
                    },
                    p
                  )
                )).onMsgReceived = function () {
                  (a.results = Object.assign({}, r.results)),
                    t.onResultsChange({ type: s });
                }),
                  (r.onFinished = function () {
                    (a.finished = !0),
                      t.onResultsChange({ type: s }),
                      Qr(t, Ci, Mi).call(t);
                  }),
                  (r.onConnectionError = function (e) {
                    (a.error = e),
                      t.onResultsChange({ type: s }),
                      Kr(t, li).call(
                        t,
                        "Connection error while measuring packet loss: ".concat(
                          e
                        )
                      ),
                      Qr(t, Ci, Mi).call(t);
                  }),
                  (r.onCredentialsFailure = function () {
                    (a.error = "unable to get turn server credentials"),
                      t.onResultsChange({ type: s }),
                      Kr(t, li).call(
                        t,
                        "Error while measuring packet loss: unable to get turn server credentials."
                      ),
                      Qr(t, Ci, Mi).call(t);
                  });
                break;
              case "latency":
              case "latencyUnderLoad":
                (a.finished = !1),
                  ((r = new ns(
                    [
                      {
                        dir: "down",
                        bytes: 0,
                        count: i.numPackets,
                        bypassMinDuration: !0,
                      },
                    ],
                    {
                      downloadApiUrl: c,
                      uploadApiUrl: d,
                      estimatedServerTime: l,
                      logApiUrl: Kr(this, ui).logMeasurementApiUrl,
                      measurementId: Kr(this, hi),
                      downloadChunkSize: i.loadDown ? Kr(this, gi) : void 0,
                      uploadChunkSize: i.loadUp ? Kr(this, vi) : void 0,
                    }
                  )).fetchOptions = {
                    credentials: Kr(this, ui).includeCredentials
                      ? "include"
                      : void 0,
                  }),
                  (r.onMeasurementResult = r.onNewMeasurementStarted =
                    function (e, r) {
                      (a.results = Object.assign({}, r.down[0])),
                        t.onResultsChange({ type: s });
                    }),
                  (r.onFinished = function () {
                    (a.finished = !0),
                      t.onResultsChange({ type: s }),
                      Kr(t, _i) && Qr(t, Ci, Mi).call(t);
                  }),
                  (r.onConnectionError = function (e) {
                    (a.error = e),
                      t.onResultsChange({ type: s }),
                      Kr(t, li).call(
                        t,
                        "Connection error while measuring latency: ".concat(e)
                      ),
                      Qr(t, Ci, Mi).call(t);
                  }),
                  r.play();
                break;
              case "download":
              case "upload":
                if (a.finished || a.error) Qr(this, Ci, Mi).call(this);
                else {
                  delete a.finishedCurrentRound;
                  var y = Kr(this, ui)[
                    "measure".concat(
                      "download" === s ? "Down" : "Up",
                      "loadLoadedLatency"
                    )
                  ];
                  ((r = new ns(
                    [Tr({ dir: "download" === s ? "down" : "up" }, i)],
                    {
                      downloadApiUrl: c,
                      uploadApiUrl: d,
                      estimatedServerTime: l,
                      logApiUrl: Kr(this, ui).logMeasurementApiUrl,
                      measurementId: Kr(this, hi),
                      measureParallelLatency: y,
                      parallelLatencyThrottleMs: Kr(this, ui)
                        .loadedLatencyThrottle,
                    }
                  )).fetchOptions = {
                    credentials: Kr(this, ui).includeCredentials
                      ? "include"
                      : void 0,
                  }),
                    (r.finishRequestDuration = Kr(
                      this,
                      ui
                    ).bandwidthFinishRequestDuration),
                    (r.onNewMeasurementStarted = function (e) {
                      var r = e.count,
                        n = e.bytes,
                        i = (a.results = Object.assign({}, a.results));
                      !i.hasOwnProperty(n) &&
                        (i[n] = {
                          timings: [],
                          numMeasurements: 0,
                          sideLatency: y ? [] : void 0,
                        }),
                        i[n].numMeasurements - i[n].timings.length !== r &&
                          ((i[n].numMeasurements += r),
                          t.onResultsChange({ type: s }));
                    }),
                    (r.onMeasurementResult = function (e) {
                      var r = e.bytes,
                        n = Lr(e, ai);
                      a.results[r].timings.push(n),
                        (a.results = Object.assign({}, a.results)),
                        t.onResultsChange({ type: s });
                    }),
                    (r.onParallelLatencyResult = function (e) {
                      a.results[i.bytes].sideLatency.push(e),
                        (a.results = Object.assign({}, a.results)),
                        t.onResultsChange({ type: s });
                    }),
                    (r.onFinished = function (e) {
                      var r = !Kr(t, ui)
                          .measurements.slice(Kr(t, mi) + 1)
                          .map(function (e) {
                            return e.type;
                          })
                          .includes(s),
                        n = Math.min.apply(
                          Math,
                          Vr(
                            Object.values("download" === s ? e.down : e.up)
                              .slice(-1)[0]
                              .timings.map(function (e) {
                                return e.duration;
                              })
                          )
                        );
                      if (
                        r ||
                        (!i.bypassMinDuration &&
                          n > Kr(t, ui).bandwidthFinishRequestDuration)
                      ) {
                        (a.finished = !0), t.onResultsChange({ type: s });
                        var o =
                          0.5 *
                          Object.keys(a.results)
                            .map(function (e) {
                              return +e;
                            })
                            .sort(function (e, t) {
                              return t - e;
                            })[0];
                        "download" === s && $r(t, gi, o),
                          "upload" === s && $r(t, vi, o);
                      } else a.finishedCurrentRound = !0;
                      Kr(t, _i) && Qr(t, Ci, Mi).call(t);
                    }),
                    (r.onConnectionError = function (e) {
                      (a.error = e),
                        t.onResultsChange({ type: s }),
                        Kr(t, li).call(
                          t,
                          "Connection error while measuring "
                            .concat(s, ": ")
                            .concat(e)
                        ),
                        Qr(t, Ci, Mi).call(t);
                    }),
                    r.play();
                }
            }
            $r(this, fi, r),
              (a.started = !0),
              this.onResultsChange({ type: s });
          } else Kr(this, fi).play();
        }
        var Li = new WeakMap(),
          Ni = new WeakMap(),
          ji = (function (e) {
            Ir(r, e);
            var t = jr(r);
            function r(e) {
              var n, s;
              Pr(this, r);
              for (
                var i = arguments.length,
                  a = new Array(i > 1 ? i - 1 : 0),
                  o = 1;
                o < i;
                o++
              )
                a[o - 1] = arguments[o];
              return (
                Xr(Nr((s = t.call.apply(t, [this, e].concat(a)))), Li, {
                  writable: !0,
                  value: void 0,
                }),
                Xr(Nr(s), Ni, {
                  writable: !0,
                  value: function (e) {
                    Kr(Nr(s), Li) && ni(e, { apiUrl: Kr(Nr(s), Li) });
                  },
                }),
                Wr(
                  ((n = Nr(s)), Ar(r.prototype)),
                  "onFinish",
                  Kr(Nr(s), Ni),
                  n,
                  !0
                ),
                $r(Nr(s), Li, Object.assign({}, tn, e, rn).logAimApiUrl),
                s
              );
            }
            return (
              xr(r, [
                {
                  key: "onFinish",
                  set: function (e) {
                    var t = this;
                    Wr(
                      Ar(r.prototype),
                      "onFinish",
                      function (r) {
                        e(r), Kr(t, Ni).call(t, r);
                      },
                      this,
                      !0
                    );
                  },
                },
              ]),
              r
            );
          })(Ti),
          Bi = r(9633);
        function Fi(e, t) {
          var r =
            ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
            e["@@iterator"];
          if (!r) {
            if (
              Array.isArray(e) ||
              (r = (function (e, t) {
                if (e) {
                  if ("string" == typeof e) return Ui(e, t);
                  var r = {}.toString.call(e).slice(8, -1);
                  return (
                    "Object" === r && e.constructor && (r = e.constructor.name),
                    "Map" === r || "Set" === r
                      ? Array.from(e)
                      : "Arguments" === r ||
                        /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                      ? Ui(e, t)
                      : void 0
                  );
                }
              })(e)) ||
              (t && e && "number" == typeof e.length)
            ) {
              r && (e = r);
              var n = 0,
                s = function () {};
              return {
                s,
                n: function () {
                  return n >= e.length
                    ? { done: !0 }
                    : { done: !1, value: e[n++] };
                },
                e: function (e) {
                  throw e;
                },
                f: s,
              };
            }
            throw new TypeError(
              "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
            );
          }
          var i,
            a = !0,
            o = !1;
          return {
            s: function () {
              r = r.call(e);
            },
            n: function () {
              var e = r.next();
              return (a = e.done), e;
            },
            e: function (e) {
              (o = !0), (i = e);
            },
            f: function () {
              try {
                a || null == r.return || r.return();
              } finally {
                if (o) throw i;
              }
            },
          };
        }
        function Ui(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var r = 0, n = Array(t); r < t; r++) n[r] = e[r];
          return n;
        }
        var Wi = [R],
          qi = !1,
          Vi = (function () {
            return (0, i.A)(
              function e() {
                (0, s.A)(this, e), (0, a.A)(this, "keyProvider", null);
              },
              null,
              [
                {
                  key: "setKeyProvider",
                  value: function (e) {
                    this.keyProvider = e;
                  },
                },
                {
                  key: "getKeyProvider",
                  value: function () {
                    return this.keyProvider;
                  },
                },
                {
                  key: "config",
                  value: function (e) {
                    if (!e)
                      throw new Error(
                        "'token' is empty, please provide it in config"
                      );
                    this.apiKey = e;
                    var t = _(Z, void 0, b.apply(void 0, Wi));
                    (window.STORE = t), ee.default.init({ store: t });
                  },
                },
                {
                  key: "getCameras",
                  value:
                    ((v = (0, t.A)(
                      c().mark(function e() {
                        var r, n, s, i;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((e.prev = 0),
                                    (r =
                                      navigator.userAgent.includes("Firefox")),
                                    (n = []),
                                    !r)
                                  ) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 6),
                                    new Promise(function (e, r) {
                                      navigator.mediaDevices
                                        .getUserMedia({ audio: !1, video: !0 })
                                        .then(
                                          (function () {
                                            var r = (0, t.A)(
                                              c().mark(function t(r) {
                                                var s;
                                                return c().wrap(function (t) {
                                                  for (;;)
                                                    switch ((t.prev = t.next)) {
                                                      case 0:
                                                        return (
                                                          (t.next = 2),
                                                          navigator.mediaDevices.enumerateDevices()
                                                        );
                                                      case 2:
                                                        (s = t.sent),
                                                          (n = s
                                                            .filter(function (
                                                              e
                                                            ) {
                                                              return (
                                                                "videoinput" ===
                                                                e.kind
                                                              );
                                                            })
                                                            .map(function (e) {
                                                              return new pr(
                                                                e.deviceId,
                                                                e.groupId,
                                                                e.kind,
                                                                e.label
                                                              );
                                                            })),
                                                          e(n),
                                                          r
                                                            .getTracks()
                                                            .forEach(function (
                                                              e
                                                            ) {
                                                              return e.stop();
                                                            });
                                                      case 6:
                                                      case "end":
                                                        return t.stop();
                                                    }
                                                }, t);
                                              })
                                            );
                                            return function (e) {
                                              return r.apply(this, arguments);
                                            };
                                          })()
                                        )
                                        .catch(function (e) {
                                          console.error(
                                            "Error in getCameras()",
                                            e
                                          ),
                                            r(e);
                                        });
                                    })
                                  );
                                case 6:
                                  e.next = 12;
                                  break;
                                case 8:
                                  return (
                                    (e.next = 10),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 10:
                                  (s = e.sent),
                                    (n = s
                                      .filter(function (e) {
                                        return "videoinput" === e.kind;
                                      })
                                      .map(function (e) {
                                        return new pr(
                                          e.deviceId,
                                          e.groupId,
                                          e.kind,
                                          e.label
                                        );
                                      }));
                                case 12:
                                  return e.abrupt("return", n);
                                case 15:
                                  (e.prev = 15),
                                    (e.t0 = e.catch(0)),
                                    (i = e.t0.message),
                                    e.t0 instanceof TypeError &&
                                      "TypeError" === e.t0.name &&
                                      (i =
                                        ir.q.ERROR_CAMERA_ACCESS_UNAVAILABLE
                                          .message),
                                    console.error(
                                      "An error occurred in getCameras(), ".concat(
                                        i
                                      )
                                    );
                                case 20:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [[0, 15]]
                        );
                      })
                    )),
                    function () {
                      return v.apply(this, arguments);
                    }),
                },
                {
                  key: "getMicrophones",
                  value:
                    ((g = (0, t.A)(
                      c().mark(function e() {
                        var r, n, s, i;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((e.prev = 0),
                                    (r =
                                      navigator.userAgent.includes("Firefox")),
                                    (n = []),
                                    !r)
                                  ) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 6),
                                    new Promise(function (e, r) {
                                      navigator.mediaDevices
                                        .getUserMedia({ audio: !0, video: !1 })
                                        .then(
                                          (function () {
                                            var r = (0, t.A)(
                                              c().mark(function t(r) {
                                                var s;
                                                return c().wrap(function (t) {
                                                  for (;;)
                                                    switch ((t.prev = t.next)) {
                                                      case 0:
                                                        return (
                                                          (t.next = 2),
                                                          navigator.mediaDevices.enumerateDevices()
                                                        );
                                                      case 2:
                                                        (s = t.sent),
                                                          (n = s
                                                            .filter(function (
                                                              e
                                                            ) {
                                                              return (
                                                                "audioinput" ===
                                                                e.kind
                                                              );
                                                            })
                                                            .map(function (e) {
                                                              return new hr(
                                                                e.deviceId,
                                                                e.groupId,
                                                                e.kind,
                                                                e.label
                                                              );
                                                            })),
                                                          e(n),
                                                          r
                                                            .getTracks()
                                                            .forEach(function (
                                                              e
                                                            ) {
                                                              return e.stop();
                                                            });
                                                      case 6:
                                                      case "end":
                                                        return t.stop();
                                                    }
                                                }, t);
                                              })
                                            );
                                            return function (e) {
                                              return r.apply(this, arguments);
                                            };
                                          })()
                                        )
                                        .catch(function (e) {
                                          console.error(
                                            "Error in getMicrophones()",
                                            e
                                          ),
                                            r(e);
                                        });
                                    })
                                  );
                                case 6:
                                  e.next = 12;
                                  break;
                                case 8:
                                  return (
                                    (e.next = 10),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 10:
                                  (s = e.sent),
                                    (n = s
                                      .filter(function (e) {
                                        return "audioinput" === e.kind;
                                      })
                                      .map(function (e) {
                                        return new hr(
                                          e.deviceId,
                                          e.groupId,
                                          e.kind,
                                          e.label
                                        );
                                      }));
                                case 12:
                                  return e.abrupt("return", n);
                                case 15:
                                  (e.prev = 15),
                                    (e.t0 = e.catch(0)),
                                    (i = e.t0.message),
                                    e.t0 instanceof TypeError &&
                                      "TypeError" === e.t0.name &&
                                      (i =
                                        ir.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE
                                          .message),
                                    console.error(
                                      "An error occurred in getMicrophones(), ".concat(
                                        i
                                      )
                                    );
                                case 20:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [[0, 15]]
                        );
                      })
                    )),
                    function () {
                      return g.apply(this, arguments);
                    }),
                },
                {
                  key: "getPlaybackDevices",
                  value:
                    ((f = (0, t.A)(
                      c().mark(function e() {
                        var r, n, s, i;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((e.prev = 0),
                                    (r =
                                      navigator.userAgent.includes("Firefox")),
                                    (n = []),
                                    !r)
                                  ) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 6),
                                    new Promise(function (e, r) {
                                      navigator.mediaDevices
                                        .getUserMedia({ audio: !0, video: !1 })
                                        .then(
                                          (function () {
                                            var r = (0, t.A)(
                                              c().mark(function t(r) {
                                                var s;
                                                return c().wrap(function (t) {
                                                  for (;;)
                                                    switch ((t.prev = t.next)) {
                                                      case 0:
                                                        return (
                                                          (t.next = 2),
                                                          navigator.mediaDevices.enumerateDevices()
                                                        );
                                                      case 2:
                                                        (s = t.sent),
                                                          (n = s
                                                            .filter(function (
                                                              e
                                                            ) {
                                                              return (
                                                                "audiooutput" ===
                                                                e.kind
                                                              );
                                                            })
                                                            .map(function (e) {
                                                              return new mr(
                                                                e.deviceId,
                                                                e.groupId,
                                                                e.kind,
                                                                e.label
                                                              );
                                                            })),
                                                          e(n),
                                                          r
                                                            .getTracks()
                                                            .forEach(function (
                                                              e
                                                            ) {
                                                              return e.stop();
                                                            });
                                                      case 6:
                                                      case "end":
                                                        return t.stop();
                                                    }
                                                }, t);
                                              })
                                            );
                                            return function (e) {
                                              return r.apply(this, arguments);
                                            };
                                          })()
                                        )
                                        .catch(function (e) {
                                          console.error(
                                            "Error in getPlaybackDevices()",
                                            e
                                          ),
                                            r(e);
                                        });
                                    })
                                  );
                                case 6:
                                  e.next = 12;
                                  break;
                                case 8:
                                  return (
                                    (e.next = 10),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 10:
                                  (s = e.sent),
                                    (n = s
                                      .filter(function (e) {
                                        return "audiooutput" === e.kind;
                                      })
                                      .map(function (e) {
                                        return new mr(
                                          e.deviceId,
                                          e.groupId,
                                          e.kind,
                                          e.label
                                        );
                                      }));
                                case 12:
                                  return e.abrupt("return", n);
                                case 15:
                                  (e.prev = 15),
                                    (e.t0 = e.catch(0)),
                                    (i = e.t0.message),
                                    e.t0 instanceof TypeError &&
                                      "TypeError" === e.t0.name &&
                                      (i =
                                        "Playback device access unavailable: Please ensure your device is compatible and that you're on a secure website (https://)"),
                                    console.error(
                                      "An error occurred in getPlaybackDevices(), ".concat(
                                        i
                                      )
                                    );
                                case 20:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [[0, 15]]
                        );
                      })
                    )),
                    function () {
                      return f.apply(this, arguments);
                    }),
                },
                {
                  key: "getDevices",
                  value:
                    ((m = (0, t.A)(
                      c().mark(function e() {
                        var t, r, n, s, i, a;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.prev = 0),
                                    (e.next = 3),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 3:
                                  (t = e.sent), (r = []), (n = Fi(t));
                                  try {
                                    for (n.s(); !(s = n.n()).done; )
                                      (i = s.value),
                                        r.push(
                                          new ur(
                                            i.deviceId,
                                            i.groupId,
                                            i.kind,
                                            i.label
                                          )
                                        );
                                  } catch (e) {
                                    n.e(e);
                                  } finally {
                                    n.f();
                                  }
                                  return e.abrupt("return", r);
                                case 10:
                                  (e.prev = 10),
                                    (e.t0 = e.catch(0)),
                                    (a = e.t0.message),
                                    e.t0 instanceof TypeError &&
                                      (a =
                                        "TypeError" === e.t0.name
                                          ? "Could not access devices : Please ensure your devices is compatible and that you're on a secure website (https://)"
                                          : e.t0.message),
                                    console.error(
                                      "An error occurred in getDevices(), ".concat(
                                        a
                                      )
                                    );
                                case 15:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [[0, 10]]
                        );
                      })
                    )),
                    function () {
                      return m.apply(this, arguments);
                    }),
                },
                {
                  key: "on",
                  value: function (e, t) {
                    if ("device-changed" !== e)
                      throw new Error("Unsupported event type");
                    this.addDeviceChangeEvent(), this.eventEmitter.on(e, t);
                  },
                },
                {
                  key: "addDeviceChangeEvent",
                  value: function () {
                    var e = this;
                    if (!qi) {
                      this.getDevices().then(function (t) {
                        e.devices = t;
                      });
                      try {
                        navigator.mediaDevices.addEventListener(
                          "devicechange",
                          (function () {
                            var r = (0, t.A)(
                              c().mark(function t(r) {
                                var n, s, i, a, o;
                                return c().wrap(
                                  function (t) {
                                    for (;;)
                                      switch ((t.prev = t.next)) {
                                        case 0:
                                          return (
                                            (n = e.devices),
                                            (t.next = 3),
                                            e.getDevices()
                                          );
                                        case 3:
                                          (e.devices = t.sent),
                                            (s = new Array()),
                                            (i = Fi(e.devices)),
                                            (t.prev = 6),
                                            (o = c().mark(function e() {
                                              var t;
                                              return c().wrap(function (e) {
                                                for (;;)
                                                  switch ((e.prev = e.next)) {
                                                    case 0:
                                                      (t = a.value),
                                                        0 ==
                                                        n.filter(function (e) {
                                                          return (
                                                            e.deviceId ==
                                                              t.deviceId &&
                                                            e.kind == t.kind
                                                          );
                                                        }).length
                                                          ? s.push(t)
                                                          : (n = n.filter(
                                                              function (e) {
                                                                return !(
                                                                  e.deviceId ==
                                                                    t.deviceId &&
                                                                  e.kind ==
                                                                    t.kind
                                                                );
                                                              }
                                                            ));
                                                    case 3:
                                                    case "end":
                                                      return e.stop();
                                                  }
                                              }, e);
                                            })),
                                            i.s();
                                        case 9:
                                          if ((a = i.n()).done) {
                                            t.next = 13;
                                            break;
                                          }
                                          return t.delegateYield(o(), "t0", 11);
                                        case 11:
                                          t.next = 9;
                                          break;
                                        case 13:
                                          t.next = 18;
                                          break;
                                        case 15:
                                          (t.prev = 15),
                                            (t.t1 = t.catch(6)),
                                            i.e(t.t1);
                                        case 18:
                                          return (
                                            (t.prev = 18), i.f(), t.finish(18)
                                          );
                                        case 21:
                                          0 != s.length &&
                                            e.eventEmitter.emit(
                                              "device-changed",
                                              { devices: e.devices }
                                            ),
                                            0 != n.length &&
                                              e.eventEmitter.emit(
                                                "device-changed",
                                                { devices: e.devices }
                                              );
                                        case 23:
                                        case "end":
                                          return t.stop();
                                      }
                                  },
                                  t,
                                  null,
                                  [[6, 15, 18, 21]]
                                );
                              })
                            );
                            return function (e) {
                              return r.apply(this, arguments);
                            };
                          })()
                        ),
                          (qi = !0);
                      } catch (e) {
                        var r = e.message;
                        e instanceof TypeError &&
                          (r =
                            "TypeError" === e.name
                              ? "Could not access devices : Please ensure your devices is compatible and that you're on a secure website (https://)"
                              : e.message),
                          console.error(
                            "An error occurred in device-change event, ".concat(
                              r
                            )
                          );
                      }
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    if ("device-changed" !== e)
                      throw new Error("Unsupported event type");
                    this.eventEmitter.off(e, t);
                  },
                },
                {
                  key: "checkPermissions",
                  value:
                    ((h = (0, t.A)(
                      c().mark(function e(t) {
                        var r, n, s, i, a;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    (t || (t = fr.AUDIO_AND_VIDEO),
                                    (r = new Map()),
                                    !t.includes(fr.AUDIO) &&
                                      !t.includes(fr.AUDIO_AND_VIDEO))
                                  ) {
                                    e.next = 15;
                                    break;
                                  }
                                  return (
                                    (n = !0),
                                    (e.prev = 4),
                                    (e.next = 7),
                                    navigator.permissions.query({
                                      name: "microphone",
                                    })
                                  );
                                case 7:
                                  ("prompt" != (s = e.sent).state &&
                                    "denied" != s.state) ||
                                    (n = !1),
                                    (e.next = 14);
                                  break;
                                case 11:
                                  throw (
                                    ((e.prev = 11),
                                    (e.t0 = e.catch(4)),
                                    Error(
                                      "Browser does not support microphone permission check"
                                    ))
                                  );
                                case 14:
                                  r.set(fr.AUDIO, n);
                                case 15:
                                  if (
                                    !t.includes(fr.VIDEO) &&
                                    !t.includes(fr.AUDIO_AND_VIDEO)
                                  ) {
                                    e.next = 28;
                                    break;
                                  }
                                  return (
                                    (i = !0),
                                    (e.prev = 17),
                                    (e.next = 20),
                                    navigator.permissions.query({
                                      name: "camera",
                                    })
                                  );
                                case 20:
                                  ("prompt" != (a = e.sent).state &&
                                    "denied" != a.state) ||
                                    (i = !1),
                                    (e.next = 27);
                                  break;
                                case 24:
                                  throw (
                                    ((e.prev = 24),
                                    (e.t1 = e.catch(17)),
                                    Error(
                                      "Browser does not support camera permission check"
                                    ))
                                  );
                                case 27:
                                  r.set(fr.VIDEO, i);
                                case 28:
                                  return e.abrupt("return", r);
                                case 29:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [
                            [4, 11],
                            [17, 24],
                          ]
                        );
                      })
                    )),
                    function (e) {
                      return h.apply(this, arguments);
                    }),
                },
                {
                  key: "requestPermission",
                  value:
                    ((p = (0, t.A)(
                      c().mark(function e(t) {
                        var r, n, s, i, a, o, d, l, u, p, h, m, f;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    (t || (t = fr.AUDIO_AND_VIDEO),
                                    (r = new Map()),
                                    !t.includes(fr.AUDIO_AND_VIDEO))
                                  ) {
                                    e.next = 32;
                                    break;
                                  }
                                  return (
                                    (s = { audio: !0, video: !0 }),
                                    (i = !0),
                                    (e.prev = 5),
                                    (e.next = 8),
                                    navigator.mediaDevices.getUserMedia(s)
                                  );
                                case 8:
                                  (n = e.sent), (e.next = 30);
                                  break;
                                case 11:
                                  if (
                                    ((e.prev = 11),
                                    (e.t0 = e.catch(5)),
                                    !(e.t0 instanceof DOMException))
                                  ) {
                                    e.next = 27;
                                    break;
                                  }
                                  (e.t1 = e.t0.name),
                                    (e.next =
                                      "NotAllowedError" === e.t1
                                        ? 17
                                        : "NotReadableError" === e.t1
                                        ? 19
                                        : "NotFoundError" === e.t1
                                        ? 21
                                        : 24);
                                  break;
                                case 17:
                                  return (
                                    "Permission denied by system" ===
                                      e.t0.message &&
                                      (a =
                                        ir.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 25)
                                  );
                                case 19:
                                  return (
                                    (a = zi(e.t0, "video")),
                                    e.abrupt("break", 25)
                                  );
                                case 21:
                                  return (
                                    (a = ir.q.ERROR_CAMERA_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (a =
                                        ir.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 25)
                                  );
                                case 24:
                                  a = e.t0.message;
                                case 25:
                                  e.next = 28;
                                  break;
                                case 27:
                                  a =
                                    e.t0 instanceof TypeError &&
                                    "TypeError" === e.t0.name
                                      ? ir.q.ERROR_CAMERA_ACCESS_UNAVAILABLE
                                          .message
                                      : e.t0.message;
                                case 28:
                                  (i = !1),
                                    a &&
                                      console.error(
                                        "An error occurred in request permission, ".concat(
                                          a
                                        )
                                      );
                                case 30:
                                  n &&
                                    setTimeout(function () {
                                      n.getTracks().forEach(function (e) {
                                        e.stop();
                                      });
                                    }, 100),
                                    r.set(fr.AUDIO_AND_VIDEO, i);
                                case 32:
                                  if (!t.includes(fr.VIDEO)) {
                                    e.next = 62;
                                    break;
                                  }
                                  return (
                                    (d = { audio: !1, video: !0 }),
                                    (l = !0),
                                    (e.prev = 35),
                                    (e.next = 38),
                                    navigator.mediaDevices.getUserMedia(d)
                                  );
                                case 38:
                                  (o = e.sent), (e.next = 60);
                                  break;
                                case 41:
                                  if (
                                    ((e.prev = 41),
                                    (e.t2 = e.catch(35)),
                                    !(e.t2 instanceof DOMException))
                                  ) {
                                    e.next = 57;
                                    break;
                                  }
                                  (e.t3 = e.t2.name),
                                    (e.next =
                                      "NotAllowedError" === e.t3
                                        ? 47
                                        : "NotReadableError" === e.t3
                                        ? 49
                                        : "NotFoundError" === e.t3
                                        ? 51
                                        : 54);
                                  break;
                                case 47:
                                  return (
                                    "Permission denied by system" ===
                                      e.t2.message &&
                                      (u =
                                        ir.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 55)
                                  );
                                case 49:
                                  return (
                                    (u = zi(e.t2, "video")),
                                    e.abrupt("break", 55)
                                  );
                                case 51:
                                  return (
                                    (u = ir.q.ERROR_CAMERA_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (u =
                                        ir.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 55)
                                  );
                                case 54:
                                  u = e.t2.message;
                                case 55:
                                  e.next = 58;
                                  break;
                                case 57:
                                  u =
                                    e.t2 instanceof TypeError &&
                                    "TypeError" === e.t2.name
                                      ? ir.q.ERROR_CAMERA_ACCESS_UNAVAILABLE
                                          .message
                                      : e.t2.message;
                                case 58:
                                  (l = !1),
                                    u &&
                                      console.error(
                                        "An error occurred in request permission, ".concat(
                                          u
                                        )
                                      );
                                case 60:
                                  o &&
                                    o.getTracks().forEach(function (e) {
                                      e.stop();
                                    }),
                                    r.set(fr.VIDEO, l);
                                case 62:
                                  if (!t.includes(fr.AUDIO)) {
                                    e.next = 92;
                                    break;
                                  }
                                  return (
                                    (h = { audio: !0, video: !1 }),
                                    (m = !0),
                                    (e.prev = 65),
                                    (e.next = 68),
                                    navigator.mediaDevices.getUserMedia(h)
                                  );
                                case 68:
                                  (p = e.sent), (e.next = 90);
                                  break;
                                case 71:
                                  if (
                                    ((e.prev = 71),
                                    (e.t4 = e.catch(65)),
                                    !(e.t4 instanceof DOMException))
                                  ) {
                                    e.next = 87;
                                    break;
                                  }
                                  (e.t5 = e.t4.name),
                                    (e.next =
                                      "NotAllowedError" === e.t5
                                        ? 77
                                        : "NotReadableError" === e.t5
                                        ? 79
                                        : "NotFoundError" === e.t5
                                        ? 81
                                        : 84);
                                  break;
                                case 77:
                                  return (
                                    "Permission denied by system" ===
                                      e.t4.message &&
                                      (f =
                                        ir.q
                                          .ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 85)
                                  );
                                case 79:
                                  return (
                                    (f = zi(e.t4, "audio")),
                                    e.abrupt("break", 85)
                                  );
                                case 81:
                                  return (
                                    (f =
                                      ir.q.ERROR_MICROPHONE_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (f =
                                        ir.q
                                          .ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 85)
                                  );
                                case 84:
                                  f = e.t4.message;
                                case 85:
                                  e.next = 88;
                                  break;
                                case 87:
                                  f =
                                    e.t4 instanceof TypeError &&
                                    "TypeError" === e.t4.name
                                      ? ir.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE
                                          .message
                                      : e.t4.message;
                                case 88:
                                  (m = !1),
                                    f &&
                                      console.error(
                                        "An error occurred in request permission, ".concat(
                                          f
                                        )
                                      );
                                case 90:
                                  p &&
                                    p.getTracks().forEach(function (e) {
                                      e.stop();
                                    }),
                                    r.set(fr.AUDIO, m);
                                case 92:
                                  return e.abrupt("return", r);
                                case 93:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [
                            [5, 11],
                            [35, 41],
                            [65, 71],
                          ]
                        );
                      })
                    )),
                    function (e) {
                      return p.apply(this, arguments);
                    }),
                },
                {
                  key: "isInt",
                  value: function (e) {
                    return "number" == typeof e && e % 1 == 0;
                  },
                },
                {
                  key: "getNetworkStats",
                  value:
                    ((u = (0, t.A)(
                      c().mark(function e() {
                        var t,
                          r,
                          n,
                          s,
                          i,
                          a,
                          o = arguments;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = (t =
                                      o.length > 0 && void 0 !== o[0]
                                        ? o[0]
                                        : {}).timeoutDuration),
                                    (n = t.baseUrl),
                                    (s =
                                      void 0 === n ? "api.videosdk.live" : n),
                                    (r && this.isInt(r)) || (r = 6e4),
                                    (i = new Promise(function (e, t) {
                                      setTimeout(function () {
                                        t(
                                          "Not able to get NetworkStats due to timeout"
                                        );
                                      }, r);
                                    })),
                                    (a = new Promise(function (e, t) {
                                      if (navigator.onLine) {
                                        var r = new ji({
                                          measureDownloadLoadedLatency: !1,
                                          measureUploadLoadedLatency: !1,
                                          measurements: [
                                            {
                                              type: "upload",
                                              bytes: 3e6,
                                              count: 1,
                                              bypassMinDuration: !0,
                                            },
                                            {
                                              type: "download",
                                              bytes: 3e6,
                                              count: 1,
                                              bypassMinDuration: !0,
                                            },
                                          ],
                                          uploadApiUrl: "https://".concat(
                                            s,
                                            "/test-upload-speed"
                                          ),
                                          downloadApiUrl: "https://".concat(
                                            s,
                                            "/test-download-speed"
                                          ),
                                        });
                                        r.isRunning
                                          ? ((r.onFinish = function (t) {
                                              e({
                                                downloadSpeed: parseFloat(
                                                  Number(
                                                    t.getDownloadBandwidth() /
                                                      1048576
                                                  ).toFixed(2)
                                                ),
                                                uploadSpeed: parseFloat(
                                                  Number(
                                                    t.getUploadBandwidth() /
                                                      1048576
                                                  ).toFixed(2)
                                                ),
                                              });
                                            }),
                                            (r.onError = function (e) {
                                              t("Not able to get NetworkStats");
                                            }))
                                          : t("Not able to get NetworkStats");
                                      } else t("Not able to get NetworkStats due to no Network");
                                    })),
                                    e.abrupt("return", Promise.race([a, i]))
                                  );
                                case 5:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return u.apply(this, arguments);
                    }),
                },
                {
                  key: "checkConnection",
                  value:
                    ((d = (0, t.A)(
                      c().mark(function e() {
                        var t,
                          r,
                          n,
                          s,
                          i,
                          a,
                          o = arguments;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = (t =
                                      o.length > 0 && void 0 !== o[0]
                                        ? o[0]
                                        : {}).timeoutDuration),
                                    (n = t.baseUrl),
                                    (s =
                                      void 0 === n ? "api.videosdk.live" : n),
                                    (r && this.isInt(r)) || (r = 6e4),
                                    (i = new Promise(function (e, t) {
                                      setTimeout(function () {
                                        t("TimeoutError: NetworkStats timeout");
                                      }, r);
                                    })),
                                    (a = new Promise(function (e, t) {
                                      navigator.onLine
                                        ? fetch("https://".concat(s, "/ping"))
                                            .then(function (r) {
                                              r.text().then(function (r) {
                                                "pong" == r
                                                  ? e("Connection established")
                                                  : t(
                                                      "ConnectionError: Server unreachable"
                                                    );
                                              });
                                            })
                                            .catch(function (e) {
                                              t(
                                                "ConnectionError: Server unreachable"
                                              );
                                            })
                                        : t("NetworkError: Offline");
                                    })),
                                    e.abrupt("return", Promise.race([a, i]))
                                  );
                                case 5:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return d.apply(this, arguments);
                    }),
                },
                {
                  key: "analytics",
                  value: function (e) {
                    var t, r, n;
                    !e &&
                      navigator &&
                      navigator.userAgent &&
                      ((r = navigator.userAgent),
                      delete (n = l().parse(r)).engine);
                    try {
                      var s;
                      (null !== (s = e) &&
                        void 0 !== s &&
                        s.browserUserAgent) ||
                        ((r = navigator.userAgent),
                        delete (n = l().parse(r)).engine);
                    } catch (e) {}
                    e &&
                      e.rawUserAgent &&
                      ((r = e.rawUserAgent), delete (n = l().parse(r)).engine),
                      e || (e = {});
                    var i = {};
                    (i.sdkType = e.sdkType || "javascript"),
                      (i.sdkVersion = e.sdkVersion || "0.2.2"),
                      (i.platform =
                        e.platform ||
                        (null === (t = n) ||
                        void 0 === t ||
                        null === (t = t.platform) ||
                        void 0 === t
                          ? void 0
                          : t.type) ||
                        ""),
                      "null" == e.browserUserAgent
                        ? (i.browserUserAgent = void 0)
                        : (i.browserUserAgent = n),
                      e.deviceUserAgent &&
                        (i.deviceUserAgent = e.deviceUserAgent),
                      (this._deviceInfo = i);
                  },
                },
                {
                  key: "initMeeting",
                  value: function (t) {
                    var r,
                      n = t.meetingId,
                      s = t.customCameraVideoTrack,
                      i = void 0 === s ? void 0 : s,
                      a = t.customMicrophoneAudioTrack,
                      o = void 0 === a ? void 0 : a,
                      c = t.autoConsume,
                      d = void 0 === c || c,
                      l = t.preferredProtocol,
                      u = t.mode,
                      p = t.multiStream,
                      h = void 0 === p || p,
                      m = t.participantId,
                      f = t.name,
                      g = t.micEnabled,
                      v = t.webcamEnabled,
                      _ = t.maxResolution,
                      y = t.metaData,
                      b = t.chatEnabled,
                      w = t.useSpartialLayerAnalytics,
                      S = t.signalingBaseUrl,
                      R = t.defaultCamera,
                      k = t.debugMode,
                      C = void 0 === k || k;
                    if (!n)
                      throw new Error(
                        "'meetingId' is empty, please verify it or generate new meetingId using the API."
                      );
                    var T = m ? m.toString() : E()({ length: 8 }).toLowerCase(),
                      P = f || E()({ length: 6 }).toLowerCase();
                    switch (
                      (this._deviceInfo || this.analytics(),
                      "string" != typeof l && (l = "UDP_OVER_TCP"),
                      null === (r = l) || void 0 === r
                        ? void 0
                        : r.toUpperCase())
                    ) {
                      case "UDP_ONLY":
                      case "UDP_OVER_TCP":
                      case "TCP_ONLY":
                        l = l.toUpperCase();
                        break;
                      default:
                        l = "UDP_OVER_TCP";
                    }
                    if (
                      (u || (u = Te.nI.SEND_AND_RECV),
                      u !== Te.nI.SEND_AND_RECV &&
                        u !== Te.nI.SIGNALLING_ONLY &&
                        u !== Te.nI.RECV_ONLY &&
                        u !== Te.nI.VIEWER &&
                        u !== Te.nI.CONFERENCE)
                    )
                      throw new Error(
                        '"mode" can only be either '
                          .concat(Te.nI.SEND_AND_RECV, " or ")
                          .concat(Te.nI.SIGNALLING_ONLY, " or ")
                          .concat(Te.nI.RECV_ONLY, " ")
                      );
                    if (null != y && "object" != (0, e.A)(y))
                      throw new Error('"metaData" can only be object.');
                    var O = "react-native" === this._deviceInfo.sdkType,
                      x = O
                        ? R
                          ? "front" === R
                            ? 1
                            : 0
                          : i
                          ? "user" ===
                            i.getVideoTracks()[0].getConstraints().facingMode
                            ? 1
                            : 0
                          : O
                          ? 1
                          : 0
                        : 0,
                      D = new ee.default({
                        roomId: n,
                        peerId: T,
                        secret: this.apiKey,
                        device: "unknown",
                        displayName: P,
                        mode: u,
                        useSimulcast: h,
                        produce: !0,
                        consume: !0,
                        datachannel: !1 !== b,
                        micEnabled: !1 !== g,
                        webcamEnabled: !1 !== v,
                        maxResolution: _ || "hd",
                        useSpartialLayerAnalytics: w,
                        _deviceInfo: this._deviceInfo,
                        customCameraVideoTrack: i,
                        customMicrophoneAudioTrack: o,
                        autoConsume: d,
                        preferredProtocol: l,
                        signalingBaseUrl: S,
                        metaData: y,
                        defaultCameraIndex: x,
                        debugMode: C,
                        keyProvider: this.keyProvider,
                      });
                    ie.roomClient = D;
                    var I = new Se({
                      id: T,
                      displayName: P,
                      local: !0,
                      mode: u,
                      metaData: y,
                    });
                    return new rr(n, I, D);
                  },
                },
                {
                  key: "createCameraVideoTrack",
                  value:
                    ((o = (0, t.A)(
                      c().mark(function e(t) {
                        var r, n, s, i, a, o, d, l, u, p, h, m, f, g, v, _;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((r = t.cameraId),
                                    (n = void 0 === r ? void 0 : r),
                                    (s = t.encoderConfig),
                                    (i = void 0 === s ? void 0 : s),
                                    (a = t.facingMode),
                                    (o = void 0 === a ? void 0 : a),
                                    (d = t.optimizationMode),
                                    (l = void 0 === d ? void 0 : d),
                                    (u = t.multiStream),
                                    (p = void 0 === u || u),
                                    !n)
                                  ) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (e.next = 4), this.getCameras();
                                case 4:
                                  (h = e.sent) &&
                                    h.some(function (e) {
                                      return e.deviceId;
                                    }) &&
                                    (h.some(function (e) {
                                      return e.deviceId === n;
                                    }) ||
                                      console.error(
                                        "No camera device found for the given cameraId, please check the passed cameraId. The default camera will be used instead."
                                      ));
                                case 6:
                                  return (
                                    (e.prev = 6),
                                    (m = i
                                      ? cr.$.videoProfiles[i]
                                      : cr.$.videoProfiles.h360p_w640p),
                                    (f = {
                                      video: {
                                        deviceId: n || void 0,
                                        facingMode: o || void 0,
                                        width: m.width,
                                        height: m.height,
                                        frameRate: m.frameRate,
                                      },
                                    }),
                                    (e.next = 11),
                                    (0, or.lp)(f)
                                  );
                                case 11:
                                  return (
                                    (g = e.sent),
                                    l && (g.contentHint = l),
                                    (g.encoderConfig = i || "h360p_w640p"),
                                    (g.contentHint = l || ""),
                                    (g.multiStream = p),
                                    (g.cameraId = n),
                                    e.abrupt("return", g)
                                  );
                                case 20:
                                  if (
                                    ((e.prev = 20),
                                    (e.t0 = e.catch(6)),
                                    "SecurityError" !== e.t0.name)
                                  ) {
                                    e.next = 26;
                                    break;
                                  }
                                  (v =
                                    ir.q
                                      .ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED
                                      .message),
                                    (e.next = 46);
                                  break;
                                case 26:
                                  if ("DOMException" !== e.t0.name) {
                                    e.next = 30;
                                    break;
                                  }
                                  (v = ir.q.ERROR_RN_CAMERA_NOT_FOUND.message),
                                    (e.next = 46);
                                  break;
                                case 30:
                                  if (!(e.t0 instanceof DOMException)) {
                                    e.next = 45;
                                    break;
                                  }
                                  (e.t1 = e.t0.name),
                                    (e.next =
                                      "NotAllowedError" === e.t1
                                        ? 34
                                        : "NotReadableError" === e.t1
                                        ? 36
                                        : "NotFoundError" === e.t1
                                        ? 38
                                        : 41);
                                  break;
                                case 34:
                                  return (
                                    (v = Hi(e.t0, "video")),
                                    e.abrupt("break", 43)
                                  );
                                case 36:
                                  return (
                                    (v = zi(e.t0, "video")),
                                    e.abrupt("break", 43)
                                  );
                                case 38:
                                  return (
                                    (v = ir.q.ERROR_CAMERA_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (v =
                                        ir.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 43)
                                  );
                                case 41:
                                  return (
                                    (v = e.t0.message), e.abrupt("break", 43)
                                  );
                                case 43:
                                  e.next = 46;
                                  break;
                                case 45:
                                  "getUserMedia is not implemented in this browser" ==
                                  e.t0.message
                                    ? ((_ =
                                        ir.q.ERROR_CAMERA_ACCESS_UNAVAILABLE),
                                      (v = _.message))
                                    : (v = e.t0.message);
                                case 46:
                                  console.error(
                                    "An error occurred in creating video track, ".concat(
                                      v
                                    )
                                  );
                                case 47:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[6, 20]]
                        );
                      })
                    )),
                    function (e) {
                      return o.apply(this, arguments);
                    }),
                },
                {
                  key: "createScreenShareVideoTrack",
                  value:
                    ((n = (0, t.A)(
                      c().mark(function e(t) {
                        var r, n, s, i, a, o, d, l, u, p, h;
                        return c().wrap(function (e) {
                          for (;;)
                            switch ((e.prev = e.next)) {
                              case 0:
                                return (
                                  (r = t.encoderConfig),
                                  (n = void 0 === r ? void 0 : r),
                                  (s = t.optimizationMode),
                                  (i = void 0 === s ? void 0 : s),
                                  (a = t.withAudio),
                                  (o = void 0 === a ? "enable" : a),
                                  (d = t.multiStream),
                                  (l = void 0 !== d && d),
                                  (u = n
                                    ? cr.$.screenShareProfiles[n]
                                    : cr.$.screenShareProfiles.h720p_15fps),
                                  (p = {
                                    audio: "enable" === o,
                                    video: {
                                      width: u.resolution.width,
                                      height: u.resolution.height,
                                      frameRate: u.frameRate,
                                    },
                                  }),
                                  (e.next = 5),
                                  (0, or.Zu)(p)
                                );
                              case 5:
                                return (
                                  (h = e.sent),
                                  i && (h.contentHint = i),
                                  (h.multiStream = l),
                                  e.abrupt("return", h)
                                );
                              case 9:
                              case "end":
                                return e.stop();
                            }
                        }, e);
                      })
                    )),
                    function (e) {
                      return n.apply(this, arguments);
                    }),
                },
                {
                  key: "createMicrophoneAudioTrack",
                  value:
                    ((r = (0, t.A)(
                      c().mark(function e(t) {
                        var r, n, s, i, a, o, d, l, u, p, h, m;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((r = t.noiseConfig),
                                    (n = void 0 === r ? void 0 : r),
                                    (s = t.encoderConfig),
                                    (i = void 0 === s ? void 0 : s),
                                    (a = t.microphoneId),
                                    !(o = void 0 === a ? void 0 : a))
                                  ) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (e.next = 4), this.getMicrophones();
                                case 4:
                                  (d = e.sent) &&
                                    d.some(function (e) {
                                      return e.deviceId;
                                    }) &&
                                    (d.some(function (e) {
                                      return e.deviceId === o;
                                    }) ||
                                      console.error(
                                        "No microphone device found for the given microphoneId, please check the passed microphoneId. The default microphone will be used instead."
                                      ));
                                case 6:
                                  return (
                                    (e.prev = 6),
                                    (l = i
                                      ? cr.$.audioProfiles[i]
                                      : cr.$.audioProfiles.speech_standard),
                                    (u = {
                                      audio: {
                                        deviceId: o,
                                        sampleRate: l.sampleRate,
                                        echoCancellation: n
                                          ? n && n.acousticEchoCancellation
                                          : l.echoCancellation,
                                        autoGainControl: n
                                          ? n && n.autoGainControl
                                          : l.autoGainControl,
                                        noiseSuppression: n
                                          ? n && n.noiseSuppression
                                          : l.noiseSuppression,
                                        channelCount: l.channelCount,
                                      },
                                    }),
                                    (e.next = 11),
                                    (0, or.lp)(u)
                                  );
                                case 11:
                                  return (
                                    ((p = e.sent).encoderConfig =
                                      i || "speech_standard"),
                                    (p.microphoneId = o),
                                    e.abrupt("return", p)
                                  );
                                case 17:
                                  if (
                                    ((e.prev = 17),
                                    (e.t0 = e.catch(6)),
                                    "SecurityError" !== e.t0.name)
                                  ) {
                                    e.next = 23;
                                    break;
                                  }
                                  (h =
                                    ir.q.ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED
                                      .message),
                                    (e.next = 43);
                                  break;
                                case 23:
                                  if ("DOMException" !== e.t0.name) {
                                    e.next = 27;
                                    break;
                                  }
                                  (h = ir.q.ERROR_RN_MIC_NOT_FOUND.message),
                                    (e.next = 43);
                                  break;
                                case 27:
                                  if (!(e.t0 instanceof DOMException)) {
                                    e.next = 42;
                                    break;
                                  }
                                  (e.t1 = e.t0.name),
                                    (e.next =
                                      "NotAllowedError" === e.t1
                                        ? 31
                                        : "NotReadableError" === e.t1
                                        ? 33
                                        : "NotFoundError" === e.t1
                                        ? 35
                                        : 38);
                                  break;
                                case 31:
                                  return (
                                    (h = Hi(e.t0, "audio")),
                                    e.abrupt("break", 40)
                                  );
                                case 33:
                                  return (
                                    (h = zi(e.t0, "audio")),
                                    e.abrupt("break", 40)
                                  );
                                case 35:
                                  return (
                                    (h =
                                      ir.q.ERROR_MICROPHONE_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (h =
                                        ir.q
                                          .ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 40)
                                  );
                                case 38:
                                  return (
                                    (h = e.t0.message), e.abrupt("break", 40)
                                  );
                                case 40:
                                  e.next = 43;
                                  break;
                                case 42:
                                  "getUserMedia is not implemented in this browser" ==
                                  e.t0.message
                                    ? ((m =
                                        ir.q
                                          .ERROR_MICROPHONE_ACCESS_UNAVAILABLE),
                                      (h = m.message))
                                    : (h = e.t0.message);
                                case 43:
                                  console.error(
                                    "An error occurred in creating audio track, ".concat(
                                      h
                                    )
                                  );
                                case 44:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[6, 17]]
                        );
                      })
                    )),
                    function (e) {
                      return r.apply(this, arguments);
                    }),
                },
              ]
            );
            var r, n, o, d, u, p, h, m, f, g, v;
          })();
        function Hi(e, t) {
          return (
            "Permission denied" === e.message ||
            "Permission dismissed" === e.message
              ? "video" === t
                ? ir.q.ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED
                : ir.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED
              : e.message.includes(
                  "The request is not allowed by the user agent"
                )
              ? "video" === t
                ? ir.q.ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE
                : ir.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED
              : "Permission denied by system" === e.message
              ? "video" === t
                ? ir.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                : ir.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
              : "video" === t
              ? ir.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
              : ir.q.ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED
          ).message;
        }
        function zi(e, t) {
          return (
            "Device in use" === e.message
              ? "video" === t
                ? ir.q.ERROR_CAMERA_IN_USE
                : ir.q.ERROR_MICROPHONE_IN_USE
              : "video" === t
              ? ir.q.ERROR_VIDEO_SOURCE_INITIATION_FAILED
              : ir.q.ERROR_MICROPHONE_IN_USE
          ).message;
        }
        (0, a.A)(Vi, "devices", []),
          (0, a.A)(Vi, "eventEmitter", new te()),
          (0, a.A)(Vi, "Constants", {
            errors: ir.s,
            recordingEvents: {
              RECORDING_STARTING: "RECORDING_STARTING",
              RECORDING_STARTED: "RECORDING_STARTED",
              RECORDING_STOPPING: "RECORDING_STOPPING",
              RECORDING_STOPPED: "RECORDING_STOPPED",
            },
            livestreamEvents: {
              LIVESTREAM_STARTING: "LIVESTREAM_STARTING",
              LIVESTREAM_STARTED: "LIVESTREAM_STARTED",
              LIVESTREAM_STOPPING: "LIVESTREAM_STOPPING",
              LIVESTREAM_STOPPED: "LIVESTREAM_STOPPED",
            },
            characterState: Ce,
            characterMode: {
              TEXT: "text",
              CO_PILOT: "co_pilot",
              AUTO_PILOT: "auto_pilot",
              VISION_PILOT: "vision_pilot",
            },
            hlsEvents: ar.V,
            transcriptionEvents: {
              TRANSCRIPTION_STARTING: "TRANSCRIPTION_STARTING",
              TRANSCRIPTION_STARTED: "TRANSCRIPTION_STARTED",
              TRANSCRIPTION_STOPPING: "TRANSCRIPTION_STOPPING",
              TRANSCRIPTION_STOPPED: "TRANSCRIPTION_STOPPED",
            },
            modes: Te.nI,
            permission: fr,
          });
        var Gi = Vi;
      })(),
      n
    );
  })()
);
